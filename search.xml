<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>02_全栈笔记/Linux 学习笔记/【Linux】README</title>
    <url>/2020/10/26/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Linux%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Linux%E3%80%91README/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/Linux 学习笔记/【Linux】权限管理</title>
    <url>/2020/10/26/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Linux%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Linux%E3%80%91%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/Linux 学习笔记/【Linux】用户和用户组管理</title>
    <url>/2020/10/26/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Linux%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Linux%E3%80%91%E7%94%A8%E6%88%B7%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>【XPath】XPath 用法整理</title>
    <url>/2020/09/07/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/XPath%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90XPath%E3%80%91XPath%20%E7%94%A8%E6%B3%95%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>xpath</tag>
      </tags>
  </entry>
  <entry>
    <title>02_全栈笔记/Selenium 学习笔记/【Selenium】元素定位</title>
    <url>/2020/09/06/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Selenium%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Selenium%E3%80%91%E5%85%83%E7%B4%A0%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/Java SE 学习笔记/Untitled</title>
    <url>/2020/09/06/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Java%20SE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Untitled/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>01_软件/软件列表</title>
    <url>/2020/09/02/01_%E8%BD%AF%E4%BB%B6/%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>03_编程思想/自动化测试/【AutoTester】测试框架搭建计划</title>
    <url>/2020/08/19/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E3%80%90AutoTester%E3%80%91%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/JPA 学习笔记/【JPA】集成Spring</title>
    <url>/2020/07/26/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/JPA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90JPA%E3%80%91%E9%9B%86%E6%88%90Spring/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/JPA 学习笔记/【JPA】主键生成策略</title>
    <url>/2020/07/26/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/JPA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90JPA%E3%80%91%E4%B8%BB%E9%94%AE%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/JPA 学习笔记/【JPA】基本注解</title>
    <url>/2020/07/26/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/JPA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90JPA%E3%80%91%E5%9F%BA%E6%9C%AC%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/JPA 学习笔记/【JPA】映射关系-一对一</title>
    <url>/2020/07/26/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/JPA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90JPA%E3%80%91%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB-%E4%B8%80%E5%AF%B9%E4%B8%80/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/Jmeter 学习笔记/【Jmeter】命令行运行</title>
    <url>/2020/07/08/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Jmeter%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Jmeter%E3%80%91%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%90%E8%A1%8C/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/Mockito 学习笔记/【Mockito】</title>
    <url>/2020/06/05/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Mockito%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Mockito%E3%80%91/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>06_头脑风暴/在线教育的遐想</title>
    <url>/2020/05/24/06_%E5%A4%B4%E8%84%91%E9%A3%8E%E6%9A%B4/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%9A%84%E9%81%90%E6%83%B3/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>05_读书笔记/书籍购买-20191112</title>
    <url>/2020/05/24/05_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E4%B9%A6%E7%B1%8D%E8%B4%AD%E4%B9%B0-20191112/</url>
    <content><![CDATA[<p>计算机基础相关</p>
<p>数据库</p>
<p>java语言相关</p>
<p>网络</p>
<p>《计算机程序的构造和解释》</p>
]]></content>
  </entry>
  <entry>
    <title>05_读书笔记/《白说》</title>
    <url>/2020/05/24/05_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%99%BD%E8%AF%B4%E3%80%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>04_项目笔记/谷粒学院/项目概要</title>
    <url>/2020/05/24/04_%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%B0%B7%E7%B2%92%E5%AD%A6%E9%99%A2/%E9%A1%B9%E7%9B%AE%E6%A6%82%E8%A6%81/</url>
    <content><![CDATA[<p><strong>工具使用</strong>：</p>
<ul>
<li>IDEA</li>
<li>EZDML</li>
<li></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>04_项目笔记/自动化测试平台/【Hydrogen】项目环境搭建</title>
    <url>/2020/05/24/04_%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0/%E3%80%90Hydrogen%E3%80%91%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>登录页：</p>
<ul>
<li>登录（自动注册）</li>
<li>忘记密码</li>
</ul>
<p>账号信息</p>
<p>项目组管理：</p>
<ul>
<li>项目列表</li>
<li>邀请加入项目组</li>
<li>移交管理员</li>
<li>删除成员</li>
<li>退出项目组/解散项目组（仅自己一个人时可解散）</li>
</ul>
<p>测试数据库管理：</p>
<ul>
<li>mysql</li>
</ul>
<p>用例管理：</p>
<ul>
<li>新增用例</li>
<li>修改用例</li>
<li>删除用例</li>
<li>运行用例</li>
<li>复制用例</li>
</ul>
<p>测试用例集管理：</p>
<ul>
<li>新增用例集</li>
</ul>
<p>参数化环境管理</p>
<ul>
<li>查询</li>
<li>新增</li>
<li>修改</li>
<li>删除</li>
<li>参数值管理<ul>
<li>查询</li>
<li>新增</li>
<li>修改</li>
<li>删除</li>
</ul>
</li>
</ul>
<p>测试报告</p>
]]></content>
  </entry>
  <entry>
    <title>04_项目笔记/自动化测试平台/【Hydrogen】团队维护</title>
    <url>/2020/05/24/04_%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0/%E3%80%90Hydrogen%E3%80%91%E5%9B%A2%E9%98%9F%E7%BB%B4%E6%8A%A4/</url>
    <content><![CDATA[<p>整个界面采用简单的人员管理界面，提供<strong>人员名称</strong>、<strong>邮箱</strong>模糊搜索功能，分页功能，邀请加入功能，移除功能；</p>
<p>表设计：</p>
]]></content>
  </entry>
  <entry>
    <title>03_编程思想/自动化测试/自动化测试模式介绍</title>
    <url>/2020/05/24/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>03_编程思想/微服务架构/云原生的12要素</title>
    <url>/2020/05/24/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/%E4%BA%91%E5%8E%9F%E7%94%9F%E7%9A%8412%E8%A6%81%E7%B4%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/Spring Cloud 学习笔记/【SpringCloud】Eureka</title>
    <url>/2020/05/24/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90SpringCloud%E3%80%91Eureka/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/Zookeeper 学习笔记/Zookeeper学习笔记</title>
    <url>/2020/05/24/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Zookeeper%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Zookeeper%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="Docker安装Zookeeper"><a href="#Docker安装Zookeeper" class="headerlink" title="Docker安装Zookeeper"></a>Docker安装Zookeeper</h3><h4 id="下载zookeeper镜像"><a href="#下载zookeeper镜像" class="headerlink" title="下载zookeeper镜像"></a>下载zookeeper镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull zookeeper</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/Selenium 学习笔记/Web自动化测试之Selenium Webdriver入门</title>
    <url>/2020/05/24/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Selenium%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%B9%8BSelenium%20Webdriver%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="元素定位方法"><a href="#元素定位方法" class="headerlink" title="元素定位方法"></a>元素定位方法</h2><p><code>id</code>定位</p>
<p><code>class</code>定位</p>
]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/Selenium 学习笔记/Web自动化测试之PageObject思想</title>
    <url>/2020/05/24/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Selenium%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%B9%8BPageObject%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/Vue 学习笔记/Vue知识框架</title>
    <url>/2020/05/24/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Vue%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Vue%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/Spring MVC 学习笔记/SpringMVC学习笔记</title>
    <url>/2020/05/24/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20MVC%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/Spring Cloud 学习笔记/Spring Cloud 笔记之 Ribbon</title>
    <url>/2020/05/24/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring%20Cloud%20%E7%AC%94%E8%AE%B0%E4%B9%8B%20Ribbon/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/Spring Cloud 学习笔记/Spring Cloud 笔记之 Feign</title>
    <url>/2020/05/24/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring%20Cloud%20%E7%AC%94%E8%AE%B0%E4%B9%8B%20Feign/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/Spring MVC 学习笔记/SSM 框架整合笔记</title>
    <url>/2020/05/24/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20MVC%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SSM%20%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="SSM框架整合笔记"><a href="#SSM框架整合笔记" class="headerlink" title="SSM框架整合笔记"></a>SSM框架整合笔记</h3>]]></content>
  </entry>
  <entry>
    <title>03_编程思想/RPC框架原理</title>
    <url>/2020/05/24/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/RPC%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>03_编程思想/RPC原理详解</title>
    <url>/2020/05/24/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/RPC%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/Maven 学习笔记/Maven学习笔记</title>
    <url>/2020/05/24/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Maven%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>下载地址： <a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">https://maven.apache.org/download.cgi</a> </p>
<p>安装步骤：</p>
<ol>
<li>解压maven压缩包到指定路径：C:\software\apache-maven-3.6.3</li>
<li>配置环境变量：<ul>
<li>新建环境变量 MAVEN_HOME，赋值 C:\software\apache-maven-3.6.3</li>
<li>编辑环境变量Path，追加<code>%MAVEN_HOME%\bin\</code></li>
</ul>
</li>
</ol>
<p>本地配置：</p>
<ol>
<li>修改C:\software\apache-maven-3.6.3\conf\settings.xml文件，添加本地仓库配置。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>C:\software\apache-maven-3.6.3\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置仓库镜像：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 阿里云仓库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 中央仓库1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 中央仓库2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo2.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/IDEA 学习笔记/IDEA学习笔记</title>
    <url>/2020/05/24/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/IDEA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/IDEA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="使用已安装的maven及其配置"><a href="#使用已安装的maven及其配置" class="headerlink" title="使用已安装的maven及其配置"></a>使用已安装的maven及其配置</h4><p><img src="../../images/image-20200305163952800.png" alt="image-20200305163952800"></p>
]]></content>
  </entry>
  <entry>
    <title>02_全栈笔记/Dubbo 学习笔记/Dubbo原理详解</title>
    <url>/2020/05/24/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Dubbo%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Dubbo%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tomcat9安装与配置</title>
    <url>/2020/05/18/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Tomcat%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/tomcat%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p><strong>版本：tomcat 9</strong></p>
<p><strong>官网地址：</strong><a href="https://tomcat.apache.org" target="_blank" rel="noopener">https://tomcat.apache.org</a></p>
<a id="more"></a>

<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="1-下载tomcat安装包"><a href="#1-下载tomcat安装包" class="headerlink" title="1.下载tomcat安装包"></a>1.下载tomcat安装包</h4><p><img src="/images/image-20200519171750938.png" alt="image-20200519171750938"></p>
<h4 id="2-解压至安装路径"><a href="#2-解压至安装路径" class="headerlink" title="2.解压至安装路径"></a>2.解压至安装路径</h4><p><img src="/images/image-20200519171918160.png" alt="image-20200519171918160"></p>
<h4 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h4><ul>
<li>“CATALINA_HOME”：”C:\software\apache-tomcat-9.0.35”</li>
<li>“Path”:”%CATALINA_HOME%\bin 和 %CATALINA_HOME%\lib”</li>
</ul>
<h4 id="4-tomcat服务安装"><a href="#4-tomcat服务安装" class="headerlink" title="4.tomcat服务安装"></a>4.tomcat服务安装</h4><p>在 <code>C:\software\apache-tomcat-9.0.35\bin</code> 目录下运行cmd，执行<code>service.bat install</code>命令安装</p>
<h4 id="5-校验是否安装成功"><a href="#5-校验是否安装成功" class="headerlink" title="5.校验是否安装成功"></a>5.校验是否安装成功</h4><ul>
<li>双击运行”C:\software\apache-tomcat-9.0.35\bin\tomcat9.exe”、双击执行“startup.bat”或cmd运行“startup.bat”。</li>
<li>打开浏览器访问”localhost：8080“，出现下图则安装成功</li>
</ul>
<p><img src="/images/20190701112345662.png" alt="在这里插入图片描述"></p>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>1.运行 tomcat ，日志出现乱码</p>
<p><img src="/images/image-20200519172810156.png" alt="image-20200519172810156"></p>
<p>解决方案：</p>
<p>修改<code>C:\software\apache-tomcat-9.0.35\conf\logging.properties</code>文件中<code>java.util.logging.ConsoleHandler.encoding</code>值为<code>GBK</code>.</p>
<p><img src="/images/image-20200519172937817.png" alt="image-20200519172937817"></p>
<h3 id="IDEA使用Tomcat"><a href="#IDEA使用Tomcat" class="headerlink" title="IDEA使用Tomcat"></a>IDEA使用Tomcat</h3><p><img src="/images/image-20200519173333627.png" alt="image-20200519173333627"></p>
]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS下Docker安装与配置</title>
    <url>/2020/05/18/01_%E8%BD%AF%E4%BB%B6/Linux%20%E8%BD%AF%E4%BB%B6/%E3%80%90Centos%E3%80%91Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p>
<p>官方地址： <a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a></p>
<p><strong>安装环境：CentOS 7</strong></p>
<p><strong>安装版本：Docker v19.03</strong></p>
<a id="more"></a>

<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="卸载已安装的Docker"><a href="#卸载已安装的Docker" class="headerlink" title="卸载已安装的Docker"></a><strong>卸载已安装的Docker</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看已安装的docker</span></span><br><span class="line">yum list installed | grep docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载已安装的docker</span></span><br><span class="line">yum remove docker \</span><br><span class="line">           docker-client \</span><br><span class="line">           docker-client-latest \</span><br><span class="line">           docker-common \</span><br><span class="line">           docker-latest \</span><br><span class="line">           docker-latest-logrotate \</span><br><span class="line">           docker-logrotate \</span><br><span class="line">           docker-engine</span><br><span class="line">           </span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除已安装过的镜像、容器等</span></span><br><span class="line">rm -rf /var/lib/docker/</span><br></pre></td></tr></table></figure>

<h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装依赖包</span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line"></span><br><span class="line"># 设置稳定的仓库</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line"># 查看docker版本</span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"></span><br><span class="line"># 安装docker-ce（The Docker Engine - Community package）</span><br><span class="line"># 指定版本：sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"># 启动docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h4 id="配置docker镜像加速"><a href="#配置docker镜像加速" class="headerlink" title="配置docker镜像加速"></a>配置docker镜像加速</h4><ul>
<li>创建daemon配置文件<code>/etc/docker/daemon.json</code>:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;:[&quot;https://tnxkcso1.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>重新读取daemon文件：<code>sudo systemctl daemon-reload</code></li>
<li>重启docker：<code>sudo systemctl restart docker</code></li>
</ul>
]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS下Docker安装Nacos</title>
    <url>/2020/05/18/01_%E8%BD%AF%E4%BB%B6/Linux%20%E8%BD%AF%E4%BB%B6/%E3%80%90CentOS%E3%80%91%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85Nacos/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p><strong>Nacos</strong> 英文全称 <strong>Dynamic Naming and Configuration Service</strong>。</p>
<p><strong>Nacos</strong>就是 <strong>配置中心(Config)</strong> <strong>+</strong> <strong>注册中心(Eureka)</strong>。</p>
<p><strong>官方地址：<a href="https://nacos.io/" target="_blank" rel="noopener">https://nacos.io/</a></strong></p>
<p><strong>安装环境：CentOS 7 Docker v19.03</strong></p>
<p><strong>安装版本：Nacos 1.3.0</strong></p>
<a id="more"></a>

<ul>
<li>Clone项目</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/nacos-group/nacos-docker.git</span><br><span class="line">cd nacos-docker</span><br></pre></td></tr></table></figure>

<ul>
<li>单机模式 Mysql</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose -f example/standalone-mysql.yaml up</span><br></pre></td></tr></table></figure>

<ul>
<li>集群模式</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose -f example/cluster-hostname.yaml up</span><br></pre></td></tr></table></figure>

<ul>
<li>作为注册中心</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">服务注册</span></span><br><span class="line">curl -X POST 'http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=nacos.naming.serviceName&amp;ip=20.18.7.10&amp;port=8080'</span><br><span class="line"><span class="meta">#</span><span class="bash">服务发现</span></span><br><span class="line">curl -X GET 'http://127.0.0.1:8848/nacos/v1/ns/instances?serviceName=nacos.naming.serviceName'</span><br></pre></td></tr></table></figure>

<ul>
<li>作为配置中心</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">发布配置</span></span><br><span class="line">curl -X POST "http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;group=test&amp;content=helloWorld"</span><br><span class="line"><span class="meta">#</span><span class="bash">获取配置</span></span><br><span class="line">  curl -X GET "http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;group=test"</span><br></pre></td></tr></table></figure>

<ul>
<li>校验是否安装成功：<a href="http://127.0.0.1:8848/nacos/（nacos" target="_blank" rel="noopener">http://127.0.0.1:8848/nacos/（nacos</a> 控制台）</li>
</ul>
<hr>
<p><strong>安装过程异常情况记录</strong></p>
<ul>
<li><p>问题描述：docker-compose 找不到</p>
</li>
<li><p>解决方案</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">获取docker-compose</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta">#</span><span class="bash">增加运行权限</span></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta">#</span><span class="bash">校验是否安装成功</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下tomcat9安装与配置</title>
    <url>/2020/05/18/01_%E8%BD%AF%E4%BB%B6/Windows%20%E8%BD%AF%E4%BB%B6/windows%E4%B8%8Btomcat9%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p><strong>版本：tomcat 9</strong></p>
<p><strong>官网地址：</strong><a href="https://tomcat.apache.org" target="_blank" rel="noopener">https://tomcat.apache.org</a></p>
<a id="more"></a>

<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="1-下载tomcat安装包"><a href="#1-下载tomcat安装包" class="headerlink" title="1.下载tomcat安装包"></a>1.下载tomcat安装包</h4><p><img src="/images/image-20200519171750938.png" alt="image-20200519171750938"></p>
<h4 id="2-解压至安装路径"><a href="#2-解压至安装路径" class="headerlink" title="2.解压至安装路径"></a>2.解压至安装路径</h4><p><img src="/images/image-20200519171918160.png" alt="image-20200519171918160"></p>
<h4 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h4><ul>
<li>“CATALINA_HOME”：”C:\software\apache-tomcat-9.0.35”</li>
<li>“Path”:”%CATALINA_HOME%\bin 和 %CATALINA_HOME%\lib”</li>
</ul>
<h4 id="4-tomcat服务安装"><a href="#4-tomcat服务安装" class="headerlink" title="4.tomcat服务安装"></a>4.tomcat服务安装</h4><p>在 <code>C:\software\apache-tomcat-9.0.35\bin</code> 目录下运行cmd，执行<code>service.bat install</code>命令安装</p>
<h4 id="5-校验是否安装成功"><a href="#5-校验是否安装成功" class="headerlink" title="5.校验是否安装成功"></a>5.校验是否安装成功</h4><ul>
<li>双击运行”C:\software\apache-tomcat-9.0.35\bin\tomcat9.exe”、双击执行“startup.bat”或cmd运行“startup.bat”。</li>
<li>打开浏览器访问”localhost：8080“，出现下图则安装成功</li>
</ul>
<p><img src="/images/20190701112345662.png" alt="在这里插入图片描述"></p>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="1-运行-tomcat-，日志出现乱码"><a href="#1-运行-tomcat-，日志出现乱码" class="headerlink" title="1.运行 tomcat ，日志出现乱码"></a>1.运行 tomcat ，日志出现乱码</h4><p><img src="/images/image-20200519172810156.png" alt="image-20200519172810156"></p>
<p>解决方案：</p>
<p>修改<code>C:\software\apache-tomcat-9.0.35\conf\logging.properties</code>文件中<code>java.util.logging.ConsoleHandler.encoding</code>值为<code>GBK</code>.</p>
<p><img src="/images/image-20200519172937817.png" alt="image-20200519172937817"></p>
<h3 id="IDEA使用Tomcat"><a href="#IDEA使用Tomcat" class="headerlink" title="IDEA使用Tomcat"></a>IDEA使用Tomcat</h3><p><img src="/images/image-20200519173333627.png" alt="image-20200519173333627"></p>
]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下JDK8安装与配置</title>
    <url>/2020/05/18/01_%E8%BD%AF%E4%BB%B6/Windows%20%E8%BD%AF%E4%BB%B6/windows%E4%B8%8BJDK8%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p><strong>版本：jdk 8</strong></p>
<p><strong>下载地址：</strong><a href="https://www.oracle.com/java/technologies/javase-jdk8-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-jdk8-downloads.html</a></p>
<a id="more"></a>

<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3>]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下其他软件安装</title>
    <url>/2020/05/18/01_%E8%BD%AF%E4%BB%B6/Windows%20%E8%BD%AF%E4%BB%B6/windows%E4%B8%8B%E5%85%B6%E4%BB%96%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>这里汇总了经常需要使用的软件及破解过程，仅作学习，建议官方购买。</p>
<p>包括以下软件：</p>
<ul>
<li><a id="more"></a>



</li>
</ul>
]]></content>
      <categories>
        <category>software</category>
      </categories>
  </entry>
  <entry>
    <title>ReadME</title>
    <url>/2020/03/30/ReadME/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>【Gmall】商品服务业务分析与数据库设计</title>
    <url>/2020/01/01/04_%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/Gmall%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/%E3%80%90Gmall%E3%80%91%E5%95%86%E5%93%81%E6%9C%8D%E5%8A%A1%E4%B8%9A%E5%8A%A1%E5%88%86%E6%9E%90%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>









]]></content>
      <categories>
        <category>项目笔记</category>
      </categories>
      <tags>
        <tag>Spring Data JPA</tag>
        <tag>Spring Boot</tag>
        <tag>Spring Cloud</tag>
        <tag>Gmall项目笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java日志框架体系</title>
    <url>/2019/12/23/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

<h3 id="常用日志框架"><a href="#常用日志框架" class="headerlink" title="常用日志框架"></a>常用日志框架</h3><p><strong>日志门面</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>JCL (Jakarta Commons Logging)</td>
<td>陈旧</td>
</tr>
<tr>
<td>SLF4J (Simple Logging Facade for Java)</td>
<td>适合（同一作者）</td>
</tr>
<tr>
<td>jboss-logging</td>
<td>特殊专业领域使用</td>
</tr>
</tbody></table>
<p><strong>日志实现</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>log4j</td>
<td>最初版（同一作者）</td>
</tr>
<tr>
<td>JUL(java.util.logging)</td>
<td>JDK自带</td>
</tr>
<tr>
<td>log4j2</td>
<td>Apache 收购 log4j 后全面重构，内部实现和 log4j 完全不同</td>
</tr>
<tr>
<td>logback</td>
<td>优雅、强大（同一作者）</td>
</tr>
</tbody></table>
<p><strong>不同日志系统的整合</strong></p>
<p><img src="/images/concrete-bindings-1590582216858.png" alt="img"></p>
<h3 id="Spring-5-日志框架整合"><a href="#Spring-5-日志框架整合" class="headerlink" title="Spring 5 日志框架整合"></a>Spring 5 日志框架整合</h3>]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>SLF4J</tag>
        <tag>Logback</tag>
      </tags>
  </entry>
  <entry>
    <title>【Jmeter】目录结构与配置文件说明</title>
    <url>/2019/12/23/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Jmeter%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Jmeter%E3%80%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

<h3 id="Jmeter-目录说明"><a href="#Jmeter-目录说明" class="headerlink" title="Jmeter 目录说明"></a>Jmeter 目录说明</h3><h3 id="Jmeter-常用配置文件"><a href="#Jmeter-常用配置文件" class="headerlink" title="Jmeter 常用配置文件"></a>Jmeter 常用配置文件</h3><p>一般情况下，不建议修改<code>jmeter.properties</code>和<code>reportgenerator.properties</code>，在<code>user.properties</code>文件中完成配置，需要重启才能生效。</p>
<p>仅记录常用配置，其他配置请参考官网：<a href="https://jmeter.apache.org/usermanual/properties_reference.html" target="_blank" rel="noopener">https://jmeter.apache.org/usermanual/properties_reference.html</a></p>
<h4 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h4><p>默认情况下，GUI 语言为英文，可以修改为中文(<code>zh_CN</code>)，此属性是唯一一个必须配置在<code>jmeter.properties</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">language=zh_CN</span><br></pre></td></tr></table></figure>

<h4 id="SSL配置"><a href="#SSL配置" class="headerlink" title="SSL配置"></a>SSL配置</h4><h4 id="JDBC请求配置"><a href="#JDBC请求配置" class="headerlink" title="JDBC请求配置"></a>JDBC请求配置</h4><h4 id="jmeter集群配置"><a href="#jmeter集群配置" class="headerlink" title="jmeter集群配置"></a>jmeter集群配置</h4><h4 id="请求结果文件配置"><a href="#请求结果文件配置" class="headerlink" title="请求结果文件配置"></a>请求结果文件配置</h4>]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>MyBatis Generator</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】Linux 目录结构</title>
    <url>/2019/12/23/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Linux%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Linux%E3%80%91Linux%20%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p><strong>在Linux世界里，一切皆文件。</strong></p>
<a id="more"></a>

<h2 id="Linux-目录结构"><a href="#Linux-目录结构" class="headerlink" title="Linux 目录结构"></a>Linux 目录结构</h2><h2 id="文件分类"><a href="#文件分类" class="headerlink" title="文件分类"></a>文件分类</h2>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】虚拟化技术</title>
    <url>/2019/12/23/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Linux%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Linux%E3%80%91%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

<h2 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h2><p><strong>定义</strong>： 通过<strong>虚拟化</strong>技术将一台计算机<strong>虚拟</strong>为多台逻辑计算机。 在一台计算机上同时运行多个逻辑计算机，每个逻辑计算机可运行不同的操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。 </p>
<p><strong>优势</strong>：</p>
<p><strong>劣势</strong>：</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>虚拟化技术</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】docker 安装</title>
    <url>/2019/12/23/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Linux%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Linux%E3%80%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Centos%208/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>虚拟化技术</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>【MyBatis】MyBatis Generator的使用</title>
    <url>/2019/12/23/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Mybatis%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90MyBatis%E3%80%91MyBatis%20Generator%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p><strong>MyBatis Generator</strong> 简称MBG，是一个专门为MyBatis框架使用者定制的<strong>代码生成器</strong>，可以快速的根据表生成对应的 映射文件，接口，以及bean类。支持基本的增删 改查，以及QBC风格的条件查询。</p>
<a id="more"></a>

<p>在项目使用过程中，使用默认配置，可能不能完全满足需求。根据项目需求做了以下调整：</p>
<ul>
<li>使用lombok注解简化java bean</li>
<li>修改了java bean的注释</li>
<li>重新生成时，覆盖mapper.xml文件</li>
<li>取消所有默认注释</li>
<li>……</li>
</ul>
<p>整体项目结构：</p>
<p><img src="/images/image-20200526152356223.png" alt="image-20200526152356223"></p>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="1-引入maven依赖（pom-xml"><a href="#1-引入maven依赖（pom-xml" class="headerlink" title="1.引入maven依赖（pom.xml)"></a>1.引入maven依赖（pom.xml)</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用lombok简化开发,生成的model文件需要，需要引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-编写MBG配置文件-generatorConfig-xml"><a href="#2-编写MBG配置文件-generatorConfig-xml" class="headerlink" title="2.编写MBG配置文件(generatorConfig.xml)"></a>2.编写MBG配置文件(generatorConfig.xml)</h4><p>具体的配置请参考官方文档：<a href="http://mybatis.org/generator/configreference/xmlconfig.html" target="_blank" rel="noopener">http://mybatis.org/generator/configreference/xmlconfig.html</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--读取配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"MySQLContext"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置文件编码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaFileEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 引入lombok注解及引用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"com.wusuiwei.crowdfunding.generator.LombokAnnotationPlugin"</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 重新生成mapper.xml文件 覆盖内容--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"com.wusuiwei.crowdfunding.generator.XMLGeneratorPlugin"</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--注释生成器：配置自己的注释生成器类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span> <span class="attr">type</span>=<span class="string">"com.wusuiwei.crowdfunding.generator.CommentGenerator"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否去除自动生成的注释--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--设置数据库连接驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"$&#123;jdbc.url&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"$&#123;jdbc.username&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--当字段类型是 DECIMAL或者 NUMERIC时，是否强制转换为BigDecimal,否的话会自动根据规模的大小选择合适的类型  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成模型的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.wusuiwei.crowdfunding.entity"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">"crowdfunding-common-reverse/src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成映射文件的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span> <span class="attr">targetProject</span>=<span class="string">"crowdfunding-common-reverse/src/main/resources"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成DAO的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.wusuiwei.crowdfunding.mapper"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">"crowdfunding-common-reverse/src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名，需要根据自己的需求修改--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"t_admin"</span> <span class="attr">domainObjectName</span>=<span class="string">"Admin"</span> <span class="attr">enableCountByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">sqlStatement</span>=<span class="string">"MySql"</span> <span class="attr">identity</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1）配置中引入了数据库连接配置(db.properties)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.driverClass=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://172.20.155.189:3306/crowdfunding</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=wusuiwei</span><br></pre></td></tr></table></figure>

<p>2）配置中使用lombok注解简化java bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.IntrospectedColumn;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.IntrospectedTable;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.PluginAdapter;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.Method;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.TopLevelClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokAnnotationPlugin</span> <span class="keyword">extends</span> <span class="title">PluginAdapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokAnnotationPlugin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modelBaseRecordClassGenerated</span><span class="params">(TopLevelClass topLevelClass, IntrospectedTable introspectedTable)</span> </span>&#123;</span><br><span class="line">        topLevelClass.addImportedType(<span class="string">"lombok.Data"</span>);</span><br><span class="line">        topLevelClass.addAnnotation(<span class="string">"@Data"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modelSetterMethodGenerated</span><span class="params">(Method method, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modelGetterMethodGenerated</span><span class="params">(Method method, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3)重新生成时，覆盖mapper.xml文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.GeneratedXmlFile;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.IntrospectedTable;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.PluginAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLGeneratorPlugin</span> <span class="keyword">extends</span> <span class="title">PluginAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XMLGeneratorPlugin</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(List&lt;String&gt; warnings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成mapper.xml,文件内容会被清空再写入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqlMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> introspectedTable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sqlMapGenerated</span><span class="params">(GeneratedXmlFile sqlMap, IntrospectedTable introspectedTable)</span> </span>&#123;</span><br><span class="line">        sqlMap.setMergeable(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4)添加model的注释及字段的注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.IntrospectedColumn;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.IntrospectedTable;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.Field;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.TopLevelClass;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultCommentGenerator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentGenerator</span> <span class="keyword">extends</span> <span class="title">DefaultCommentGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommentGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFieldComment</span><span class="params">(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn)</span> </span>&#123;</span><br><span class="line">        field.addJavaDocLine(<span class="string">"/**"</span>);</span><br><span class="line">        field.addJavaDocLine(<span class="string">"* "</span> + introspectedColumn.getRemarks());</span><br><span class="line">        field.addJavaDocLine(<span class="string">"*/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addModelClassComment</span><span class="params">(TopLevelClass topLevelClass, IntrospectedTable introspectedTable)</span> </span>&#123;</span><br><span class="line">        topLevelClass.addJavaDocLine(<span class="string">"/**"</span>);</span><br><span class="line">        topLevelClass.addJavaDocLine(<span class="string">" * This class was generated by MyBatis Generator."</span>);</span><br><span class="line">        topLevelClass.addJavaDocLine(<span class="string">" * 表名："</span> + introspectedTable.getFullyQualifiedTable());</span><br><span class="line">        topLevelClass.addJavaDocLine(<span class="string">" * 表注释："</span> + introspectedTable.getRemarks());</span><br><span class="line">        topLevelClass.addJavaDocLine(<span class="string">" */"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-运行MyBatis-Generator-Generator-java"><a href="#3-运行MyBatis-Generator-Generator-java" class="headerlink" title="3.运行MyBatis Generator(Generator.java)"></a>3.运行MyBatis Generator(Generator.java)</h4><p>mybatis generator 提供了多种方式（maven、ant、java等），本次项目中使用了java代码运行的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Mybatis Generator 生成器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//警告信息集合</span></span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//读取生成器的配置文件</span></span><br><span class="line">        InputStream resourceAsStream = Generator.class.getResourceAsStream("generatorConfig.xml");</span><br><span class="line">        <span class="comment">//创建配置解析器</span></span><br><span class="line">        ConfigurationParser configurationParser = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        <span class="comment">//解析配置文件</span></span><br><span class="line">        Configuration configuration = configurationParser.parseConfiguration(resourceAsStream);</span><br><span class="line">        resourceAsStream.close();</span><br><span class="line">        <span class="comment">//true时，如果有相同的文件则覆盖文件</span></span><br><span class="line">        DefaultShellCallback defaultShellCallback = <span class="keyword">new</span> DefaultShellCallback(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//创建生成器对象</span></span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(configuration, defaultShellCallback, warnings);</span><br><span class="line">        <span class="comment">//执行生成代码</span></span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//输出警告信息</span></span><br><span class="line">        <span class="keyword">for</span> (String warning : warnings) &#123;</span><br><span class="line">            System.out.println(warning);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>MyBatis Generator</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>【NoSql】NoSql入门和概述</title>
    <url>/2019/12/23/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/NoSQL%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90NoSql%E3%80%91NoSql%E5%85%A5%E9%97%A8%E5%92%8C%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

]]></content>
      <categories>
        <category>NoSQL</category>
      </categories>
      <tags>
        <tag>NoSql</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring】集成Spring MVC</title>
    <url>/2019/12/23/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20MVC%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90SpringMVC%E3%80%91%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring】集成MyBatis</title>
    <url>/2019/12/23/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Spring%E3%80%91%E9%9B%86%E6%88%90MyBatis/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>众筹后台项目使用到了<strong>SSM(Spring+SpringMVC+MyBatis)</strong>框架，记录以下Spring集成Mybatis的过程。</p>
<a id="more"></a>

<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p><strong>将mybatis的mapper交给spring IoC容器管理。</strong></p>
<p><img src="/images/image-20200527113545711.png" alt="image-20200527113545711"></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><img src="/images/image-20200527114132194.png" alt="image-20200527114130371"></p>
<h3 id="集成mybatis步骤"><a href="#集成mybatis步骤" class="headerlink" title="集成mybatis步骤"></a>集成mybatis步骤</h3><p><img src="/images/image-20200527132406178.png" alt="image-20200527132406178"></p>
<ul>
<li>引入maven依赖</li>
<li>配置SqlSessionFactoryBean<ul>
<li>配置数据源（jdbc.properties）</li>
<li>指定mapper配置文件位置</li>
<li>指定mybatis全局配置文件(mybatis-config.xml)</li>
</ul>
</li>
<li>配置 MapperScannerConfigurer</li>
</ul>
<p>maven 配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>spring-persist-mybatis.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载jdbc.properties 文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    配置SqlSessionFactoryBean：</span></span><br><span class="line"><span class="comment">    1）配置数据源</span></span><br><span class="line"><span class="comment">    2）指定mapper配置文件位置</span></span><br><span class="line"><span class="comment">    3）指定mybatis全局配置文件(mybatis-config.xml)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/AdminMapper.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 MapperScannerConfigurer --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.wusuiwei.crowdfunding.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>jdbc.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClass</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://172.20.155.189:3306/crowdfunding</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">wusuiwei</span></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.wusuiwei.crowdfunding.entity.Admin;</span><br><span class="line"><span class="keyword">import</span> com.wusuiwei.crowdfunding.mapper.AdminMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit.jupiter.SpringExtension;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ExtendWith</span>(SpringExtension<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:spring-persist-mybatis.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource datasource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AdminMapper adminMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDatasource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection connection = datasource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Admin admin = adminMapper.selectByPrimaryKey(<span class="number">1</span>);</span><br><span class="line">        System.out.println(admin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>【设计模式】前端控制器模式</title>
    <url>/2019/12/23/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E5%89%8D%E7%AB%AF%E6%8E%A7%E5%88%B6%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p><strong>前端控制器(Front Controller Pattern)</strong>  用来提供一个<strong>集中的请求处理机制</strong>，所有的请求都将由一个单一的处理程序处理。该处理程序可以做认证/授权/记录日志，或者跟踪请求，然后把请求传给相应的处理程序。</p>
<a id="more"></a>

<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p><strong>前端控制器(Front Controller Pattern)</strong> 模式角色如下：</p>
<ul>
<li><strong>前端控制器（Front Controller）</strong> - 处理应用程序所有类型请求的单个处理程序，应用程序可以是基于 web 的应用程序，也可以是基于桌面的应用程序。</li>
<li><strong>调度器（Dispatcher）</strong> - 前端控制器可能使用一个调度器对象来调度请求到相应的具体处理程序。</li>
<li><strong>视图（View）</strong> - 视图是为请求而创建的对象。</li>
</ul>
<p><strong>模式结构图如下：</strong></p>
<p><img src="/images/892594-20160623194328953-1886361315.jpg" alt="img"></p>
<h3 id="应用示例"><a href="#应用示例" class="headerlink" title="应用示例"></a>应用示例</h3><p>我们将创建 <em>FrontController<em>、</em>Dispatcher</em> 分别当作前端控制器和调度器。<em>HomeView</em> 和 <em>StudentView</em> 表示各种为前端控制器接收到的请求而创建的视图。</p>
<p><em>FrontControllerPatternDemo*，我们的演示类使用 *FrontController</em> 来演示前端控制器设计模式。</p>
<p><strong>前端控制器：</strong>FrontController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrontController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">private</span> Dispatcher dispatcher;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">FrontController</span><span class="params">()</span></span>&#123;</span><br><span class="line">      dispatcher = <span class="keyword">new</span> Dispatcher();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAuthenticUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"User is authenticated successfully."</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">trackRequest</span><span class="params">(String request)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Page requested: "</span> + request);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchRequest</span><span class="params">(String request)</span></span>&#123;</span><br><span class="line">      <span class="comment">//记录每一个请求</span></span><br><span class="line">      trackRequest(request);</span><br><span class="line">      <span class="comment">//对用户进行身份验证</span></span><br><span class="line">      <span class="keyword">if</span>(isAuthenticUser())&#123;</span><br><span class="line">         dispatcher.dispatch(request);</span><br><span class="line">      &#125;    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>调度器：</strong>Dispatcher.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> StudentView studentView;</span><br><span class="line">   <span class="keyword">private</span> HomeView homeView;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Dispatcher</span><span class="params">()</span></span>&#123;</span><br><span class="line">      studentView = <span class="keyword">new</span> StudentView();</span><br><span class="line">      homeView = <span class="keyword">new</span> HomeView();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(String request)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(request.equalsIgnoreCase(<span class="string">"STUDENT"</span>))&#123;</span><br><span class="line">         studentView.show();</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         homeView.show();</span><br><span class="line">      &#125;    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>视图：</strong>HomeView 和 StudentView</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeView</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Displaying Home Page"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentView</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Displaying Student Page"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong>：FrontControllerPatternDemo.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrontControllerPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      FrontController frontController = <span class="keyword">new</span> FrontController();</span><br><span class="line">      frontController.dispatchRequest(<span class="string">"HOME"</span>);</span><br><span class="line">      frontController.dispatchRequest(<span class="string">"STUDENT"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试结果</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Page requested: HOME</span><br><span class="line">User is authenticated successfully.</span><br><span class="line">Displaying Home Page</span><br><span class="line">Page requested: STUDENT</span><br><span class="line">User is authenticated successfully.</span><br><span class="line">Displaying Student Page</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>前端控制器模式</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring Boot】异常处理机制</title>
    <url>/2019/11/29/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20Boot%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Spring%20Boot%E3%80%91%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>今天，刚好用到了Spring Boot的统一异常处理，复习并总结一下。主要内容如下：</p>
<ul>
<li>Spring Boot 提供的默认异常处理机制</li>
<li>如何自定义异常</li>
<li>项目中如何使用统一异常处理</li>
</ul>
<a id="more"></a>

<h3 id="默认异常处理"><a href="#默认异常处理" class="headerlink" title="默认异常处理"></a>默认异常处理</h3><p>默认情况下，Spring Boot 分情况提供了两种处理方式：</p>
<ul>
<li>浏览器访问（ Accept: text/html ）：返回一个 error 页面</li>
</ul>
<p><img src="/images/image-20191130232129074.png" alt="image-20191130232129074"></p>
<ul>
<li>其他客户端访问（如Postman，Accept: */*）：返回一个json数据</li>
</ul>
<p><img src="/images/image-20191130232326570.png" alt="image-20191130232326570"></p>
<p>原理：</p>
<p>异常处理的自动配置类：<code>org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration</code> </p>
<p>向 Spring 容器中添加了以下组件：</p>
<ul>
<li>DefaultErrorAttributes</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>BasicErrorController</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//产生html类型的数据</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(produces = MediaType.TEXT_HTML_VALUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        HttpStatus status = getStatus(request);</span><br><span class="line">        Map&lt;String, Object&gt; model = Collections</span><br><span class="line">            .unmodifiableMap(getErrorAttributes(request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">        response.setStatus(status.value());</span><br><span class="line">        <span class="comment">//去哪个页面作为错误页面，包含页面地址和页面内容</span></span><br><span class="line">        ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">        <span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//产生json数据</span></span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">        HttpStatus status = getStatus(request);</span><br><span class="line">        <span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(status);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; body = getErrorAttributes(request, isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(body, status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ErrorPageCustomizer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;error.path:/error&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String path = <span class="string">"/error"</span>;<span class="comment">//系统错误之后来到error请求来进行处理；</span></span><br></pre></td></tr></table></figure>

<ul>
<li>DefaultErrorViewResolver</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    ModelAndView modelAndView = resolve(String.valueOf(status.value()), model);</span><br><span class="line">    <span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">        modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认Spring Boot可以去找到一个页面：/error/404.html</span></span><br><span class="line">    String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//模板引擎可以解析这个页面地址就用模板引擎解析</span></span><br><span class="line">    TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName,</span><br><span class="line">                                                                                           <span class="keyword">this</span>.applicationContext);</span><br><span class="line">    <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果模板引擎可用的情况下返回到errorViewName指定的视图地址</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的界面 error/404.html</span></span><br><span class="line">    <span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>异常处理步骤：</p>
<p>一旦系统出现4xx或5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/erroe请求，就会被BasicErrorController处理：</p>
<p>1) 响应页面，去哪个页面由DefaultErrorViewResolver解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">        ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">        <span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> modelAndView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）如何定制错误响应：</p>
<ul>
<li><p>如何定制错误的页面：</p>
<ul>
<li>在有模板引擎情况下，将错误页面命名为<code>404.html</code>，放在模板引擎文件夹下的error文件夹下<ul>
<li>也可以使用4xx或5xx作为错误页面的文件名来匹配错误，优先精确匹配404.html</li>
<li>页面可以获取到的信息：<ul>
<li>timestamp:时间戳</li>
<li>status：状态码</li>
<li>error：错误提示</li>
<li>exception：异常</li>
<li>message：异常消息</li>
<li>errors：JSR303数据校验的错误</li>
</ul>
</li>
</ul>
</li>
<li>没有模板引擎，静态资源文件夹下error文件中404.html页面</li>
<li>以上位置都未配置错误页面，则默认来到springboot默认错误页面</li>
</ul>
</li>
</ul>
<ul>
<li><p>如何定制错误的JSON数据：</p>
<ul>
<li></li>
</ul>
</li>
</ul>
<h3 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h3><p><strong>定制错误页面</strong></p>
<p><strong>定制错误JSON数据</strong></p>
<h3 id="统一异常处理实践"><a href="#统一异常处理实践" class="headerlink" title="统一异常处理实践"></a>统一异常处理实践</h3>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringBoot】拦截器</title>
    <url>/2019/11/29/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20Boot%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90SpringBoot%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><blockquote>
<p>实现java web token的拦截</p>
</blockquote>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>拦截器</tag>
      </tags>
  </entry>
  <entry>
    <title>【接口自动化测试框架（Java版）】基本环境搭建</title>
    <url>/2019/11/27/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E3%80%90%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%EF%BC%88Java%E7%89%88%EF%BC%89%E3%80%91%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>从本文起，将详细介绍 Java 自动化框架的搭建及相关知识学习，我也是边写边学，不一定完全正确，如果有异常情况，请在评论区留言。</p>
<p>本文主要介绍JDK安装配置、IDEA安装配置、SpringBoot项目创建。</p>
<a id="more"></a>

<p>应用技术：SpringBoot、HttpClient、Spring Data JPA、TestNG、ReportNG、Jenkins、Vue等技术</p>
<h4 id="JDK-环境搭建"><a href="#JDK-环境搭建" class="headerlink" title="JDK 环境搭建"></a>JDK 环境搭建</h4><p>想要运行java项目，必须有jdk环境，我使用的是JDK8.</p>
<p>下载地址： <a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a> </p>
<p>选择自己系统的相应版本并下载安装即可。</p>
<p>jdk需要配置环境变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量名：JAVA_HOME</span><br><span class="line">变量值：C:\Program Files (x86)\Java\jdk1.8.0_91        // 要根据自己的实际路径配置</span><br><span class="line">变量名：CLASSPATH</span><br><span class="line">变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;         //记得前面有个&quot;.&quot;</span><br><span class="line">变量名：Path</span><br><span class="line">变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br></pre></td></tr></table></figure>

<p>检查是否安装成功：</p>
<p>运行CMD，执行命令：<code>java -version</code></p>
<p><img src="/images/image-20191127195442440.png" alt="image-20191127195442440"></p>
<h4 id="IDEA-环境搭建"><a href="#IDEA-环境搭建" class="headerlink" title="IDEA 环境搭建"></a>IDEA 环境搭建</h4><p>搭建过程非常简单，仅需要下载安装并输入注册码即可。</p>
<p>下载地址： <a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener">https://www.jetbrains.com/idea/download/</a> ( <strong>Ultimate</strong> 版本)</p>
<p>注册码（亲测可用，建议官方购买)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CATF44LT7C-eyJsaWNlbnNlSWQiOiJDQVRGNDRMVDdDIiwibGljZW5zZWVOYW1lIjoiVmxhZGlzbGF2IEtvdmFsZW5rbyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiJGb3IgZWR1Y2F0aW9uYWwgdXNlIG9ubHkiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJQUyIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiUkQiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJQQyIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IkRDIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In1dLCJoYXNoIjoiMTE1MzA4ODUvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-BZLL+H88k449OQC56NsqU0fwb6wMAX1Di+CK5HS46DuOD1E68HPiTqREdn8DzrLVAoMkJReaH30RaIDLwUI8GEFifDcCYE5RbpE5ApNJ8mcUJr8oA1nrjY9IzZCgrSBFr4GAOLqSfXH+1UJ3K8UPqGh8nThomnKW9Jvv9pA7HIH/KrNm2RLV/aNMHWO8Q44A8ToXm7g5FS2lW903URPQ0KFgxT11w/KL81UkHm6yUXC7/LTAygIBArI8j+XUk3rlz4rpi2wrJclYXukrKQqH/V6CTbnVV3d6XAdtCqjryQ2Ga7bP/XTLjwAGwPEB3Q1W7LHNQ7CsyvZG/oTSOgD2YQ==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</span><br></pre></td></tr></table></figure>

<h4 id="SpringBoot-项目创建"><a href="#SpringBoot-项目创建" class="headerlink" title="SpringBoot 项目创建"></a>SpringBoot 项目创建</h4><p>从IDEA搭建项目过程非常简单，下面将简要介绍一下</p>
<p><img src="/images/image-20191127194915867.png" alt="image-20191127194915867"></p>
<p>首先，选择”Spring Initalizr”,下一步：</p>
<p><img src="/images/image-20191127195614517.png" alt="image-20191127195614517"></p>
<p>输入Group、Artifact，下一步:</p>
<p><img src="/images/image-20191127195953736.png" alt="image-20191127195953736"></p>
<p>然后选择依赖，这里我们暂时先不选择任何依赖，下一步：</p>
<p><img src="/images/image-20191127200110798.png" alt="image-20191127200110798"></p>
<p>输入项目名及项目本次存储地址，”Finish”即可创建一个SpringBoot项目。</p>
<p><img src="/images/image-20191127200144375.png" alt="image-20191127200144375"></p>
<p>好了，至此，SpringBoot项目基本搭建完成，开心~~</p>
]]></content>
      <categories>
        <category>接口自动化</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>接口自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>【接口自动化测试框架（Java版）】集成HttpClient</title>
    <url>/2019/11/27/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E3%80%90%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%EF%BC%88Java%E7%89%88%EF%BC%89%E3%80%91%E9%9B%86%E6%88%90HttpClient/</url>
    <content><![CDATA[<p>本文主要介绍HttpClient的用法及与SpringBoot的集成。</p>
<a id="more"></a>

<h4 id="HttpClient-介绍"><a href="#HttpClient-介绍" class="headerlink" title="HttpClient 介绍"></a>HttpClient 介绍</h4><p> <a href="http://hc.apache.org/index.html" target="_blank" rel="noopener">HttpClient</a>是Apache Jakarta Common下的子项目，用来提供高效的、最新的、功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。 </p>
<p>HttpClient相比传统JDK自带的URLConnection，增加了易用性和灵活性，它不仅使客户端发送Http请求变得容易，而且也方便开发人员测试接口（基于Http协议的），提高了开发的效率，也方便提高代码的健壮性。因此熟练掌握HttpClient是很重要的必修内容，掌握HttpClient后，相信对于Http协议的了解会更加深入。</p>
<p><strong>org.apache.commons.httpclient.HttpClient与org.apache.http.client.HttpClient的区别</strong></p>
<p>Commons的HttpClient项目现在是生命的尽头，不再被开发,  已被Apache HttpComponents项目HttpClient和HttpCore  模组取代，提供更好的性能和更大的灵活性。  </p>
<p><strong>HttpClient 特性</strong></p>
<ul>
<li>实现了所有 HTTP 的方法（GET,POST,PUT,DELETE 等）</li>
<li>支持自动转向</li>
<li>支持 HTTPS 协议</li>
<li>支持代理服务器等</li>
</ul>
<p>引用HttpClient非常简单，仅需要在maven中添加相关依赖即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 集成 httpclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="原生HttpClient使用"><a href="#原生HttpClient使用" class="headerlink" title="原生HttpClient使用"></a>原生HttpClient使用</h4><h5 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//打开浏览器</span></span><br><span class="line">    CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">    <span class="comment">//申明Get请求</span></span><br><span class="line">    HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    CloseableHttpResponse response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.判断状态码</span></span><br><span class="line">    <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">//从响应中取出实体</span></span><br><span class="line">        HttpEntity entity = response.getEntity();</span><br><span class="line">        <span class="comment">//使用工具类EntityUtils将实体并转换成字符串</span></span><br><span class="line">        String s = EntityUtils.toString(entity);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    response.close();</span><br><span class="line">    httpClient.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPost</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//打开浏览器</span></span><br><span class="line">    CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">    <span class="comment">//声明Post请求</span></span><br><span class="line">    HttpPost httpPost = <span class="keyword">new</span> HttpPost(<span class="string">"https://www.oschina.net/"</span>);</span><br><span class="line">    <span class="comment">//3.开源中国为了安全，防止恶意攻击，在post请求中都限制了浏览器才能访问</span></span><br><span class="line">    httpPost.addHeader(<span class="string">"User-Agent"</span>,<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span>);</span><br><span class="line">    ArrayList&lt;NameValuePair&gt; params = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"scope"</span>, <span class="string">"project"</span>));</span><br><span class="line">    params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"q"</span>, <span class="string">"java"</span>));</span><br><span class="line">    UrlEncodedFormEntity formEntity = <span class="keyword">new</span> UrlEncodedFormEntity(params, Charset.forName(<span class="string">"utf-8"</span>));</span><br><span class="line">    httpPost.setEntity(formEntity);</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    CloseableHttpResponse response = httpClient.execute(httpPost);</span><br><span class="line">    <span class="comment">//判断状态码</span></span><br><span class="line">    <span class="keyword">if</span>(response.getStatusLine().getStatusCode()==<span class="number">200</span>)&#123;</span><br><span class="line">        HttpEntity entity = response.getEntity();</span><br><span class="line">        String string = EntityUtils.toString(entity, <span class="string">"utf-8"</span>);</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.关闭资源</span></span><br><span class="line">    response.close();</span><br><span class="line">    httpClient.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="SpringBoot集成HttpClient"><a href="#SpringBoot集成HttpClient" class="headerlink" title="SpringBoot集成HttpClient"></a>SpringBoot集成HttpClient</h4><p>引入Maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 集成 httpclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>接口自动化</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>接口自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>【设计模式】装饰者模式</title>
    <url>/2019/11/21/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>“装饰者模式”</strong>动态的将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</p>
<a id="more"></a>

]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
        <tag>Decorator Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>【设计模式】观察者模式</title>
    <url>/2019/11/18/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>观察者模式</strong>（又被称为发布-订阅（Publish/Subscribe）模式，属于行为型模式的一种，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。</p>
<a id="more"></a>

<hr>
<h3 id="功能需求–天气预报项目"><a href="#功能需求–天气预报项目" class="headerlink" title="功能需求–天气预报项目"></a>功能需求–天气预报项目</h3><blockquote>
<ul>
<li>气象站可以将每天测量到的温度、湿度、气压等数据以公告的方式发布出去（比如发布到自己的网站或第三方）</li>
<li>需要设计开放型API，便于其他第三方也能接入气象站获取数据</li>
<li>提供温度、气压和湿度的接口</li>
<li>测量数据更新时，要能实时通知第三方</li>
</ul>
</blockquote>
<hr>
<h3 id="传统的设计方案"><a href="#传统的设计方案" class="headerlink" title="传统的设计方案"></a>传统的设计方案</h3><h4 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h4><p>此系统的三部分为气象站（通过物理设备获取气象信息）、WeatherData对象（追踪气象数据并更新布告板）、布告板（显示气象信息）。</p>
<p><img src="/images/15741511334251.png" alt="1574151133425"></p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WeatherData 气象数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wusuiwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/11/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> CurrentConditionsDisplay currentConditionsDisplay;</span><br><span class="line">    <span class="keyword">private</span> StatisticsDisPlay statisticsDisPlay;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentConditionsDisplay = <span class="keyword">new</span> CurrentConditionsDisplay();</span><br><span class="line">        <span class="keyword">this</span>.statisticsDisPlay = <span class="keyword">new</span> StatisticsDisPlay();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dataChange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        currentConditionsDisplay.update(temperature,pressure,humidity);</span><br><span class="line">        statisticsDisPlay.update(temperature,pressure,humidity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pressure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> humidity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> pressure, <span class="keyword">float</span> humidity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        dataChange();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * “目前状况”布告板，用于显示气象信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wusuiwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/11/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature,<span class="keyword">float</span> pressure,<span class="keyword">float</span> humidity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.humidity=humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"***Today mTemperature: "</span>+ temperature+<span class="string">"***"</span>);</span><br><span class="line">        System.out.println(<span class="string">"***Today mPressure: "</span>+ pressure+<span class="string">"***"</span>);</span><br><span class="line">        System.out.println(<span class="string">"***Today mHumidity: "</span>+ humidity+<span class="string">"***"</span>);</span><br><span class="line">        System.out.println(<span class="string">"===================================================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * “气象统计”布告板，用于显示气象统计信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wusuiwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/11/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatisticsDisPlay</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature,<span class="keyword">float</span> pressure,<span class="keyword">float</span> humidity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.humidity=humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (temperature &gt;= <span class="number">32</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            System.out.println(<span class="string">"***High Temperature's Day In Summer: "</span>+ i+<span class="string">"***"</span>);</span><br><span class="line">            System.out.println(<span class="string">"===================================================="</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终端，用于收集气象信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wusuiwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/11/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 WeatherData</span></span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line">        <span class="comment">//更新天气情况</span></span><br><span class="line">        weatherData.setData(<span class="number">32</span>, <span class="number">150</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="comment">//天气变化</span></span><br><span class="line">        weatherData.setData(<span class="number">31</span>, <span class="number">160</span>, <span class="number">20</span>);</span><br><span class="line">        weatherData.setData(<span class="number">31</span>, <span class="number">158</span>, <span class="number">19</span>);</span><br><span class="line">        weatherData.setData(<span class="number">32</span>, <span class="number">160</span>, <span class="number">21</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><ul>
<li>无法在运行时动态添加/删除布告板</li>
<li>添加新的布告板需要修改代码</li>
<li>面向实现编程，而非面向接口编程</li>
<li>未封装改变的部分</li>
</ul>
<h3 id="观察者模式的原理"><a href="#观察者模式的原理" class="headerlink" title="观察者模式的原理"></a>观察者模式的原理</h3><h4 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h4><p><strong>观察者模式</strong>定义了对象之间一对多依赖，这样一来，当一个对象改变状态时，他的所有依赖者都会收到通知并自动更新。</p>
<h4 id="模式图解"><a href="#模式图解" class="headerlink" title="模式图解"></a>模式图解</h4><p><img src="/images/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.gif" alt="12"></p>
<ul>
<li>Subject: 目标</li>
<li>ConcreteSubject: 具体目标</li>
<li>Observer: 观察者</li>
<li>ConcreteObserver: 具体观察者</li>
</ul>
<h3 id="观察者模式的设计方案"><a href="#观察者模式的设计方案" class="headerlink" title="观察者模式的设计方案"></a>观察者模式的设计方案</h3><h4 id="方案设计-1"><a href="#方案设计-1" class="headerlink" title="方案设计"></a>方案设计</h4><p><img src="/images/15742121602391.png" alt="1574212160239"></p>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><h4 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h4><h3 id="观察者模式的应用场景"><a href="#观察者模式的应用场景" class="headerlink" title="观察者模式的应用场景"></a>观察者模式的应用场景</h3>]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
        <tag>Observer Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>【设计模式】策略模式</title>
    <url>/2019/11/15/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>策略模式：</strong>定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。策略模式的结构如下：</p>
<p> <img src="/images/3-1Q116103K1205.gif" alt="Strategy Pattern"> </p>
<a id="more"></a>

<hr>
<h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p><strong>策略模式：</strong>定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p>策略模式的角色如下：</p>
<ul>
<li>抽象策略(Strategy)类：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口, 环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。</li>
<li>具体策略(Concrete Strategy)类：实现抽象策略定义的接口，提供具体的算法实现。</li>
<li>环境(Context)类：持有一个策略类的引用，最终给客户端调用。</li>
</ul>
<p>其结构图如下图：</p>
<p> <img src="/images/3-1Q116103K1205-1573820059937.gif" alt="Strategy Pattern"> </p>
<h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><p>【例】游戏设定：游戏中有多种角色：国王(King)、皇后(Queen)、骑士(Knight)、妖怪(Troll)等，武器种类有匕首(King)、斧头(King)、宝剑(King)、弓箭(King)等，每个角色一次只能使用一种武器，而且游戏过程中可以换用其他武器。请分析并实现这个业务。</p>
<p>分析：每个角色游戏过程中可以换用不同的武器，即可以使用不同的武器。</p>
<p>首先，定义一个使用武器的抽象策略类（WeaponBahavior)，里面包括一个使用武器的抽象方法<code>useWeapon()</code>，然后定义使用匕首(King)、斧头(King)、宝剑(King)、弓箭(King)等武器的具体策略类，他们实现了抽象策略类的抽象方法。</p>
<p>其次，定义一个角色环境类（Character），分别定义国王(King)、皇后(Queen)、骑士(Knight)、妖怪(Troll)等角色类并继承于（Character），在环境类中使用抽象策略类的<code>useWeapon()</code>方法，可以使用面向对象基础的多态的用法，实现根据不同的角色调用不同的武器。</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义环境类</span></span><br><span class="line"><span class="keyword">import</span> behavior.WeaponBehavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Charater</span> </span>&#123;</span><br><span class="line">    WeaponBehavior weaponBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performUseWeapon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        weaponBehavior.useWepon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeapon</span><span class="params">(WeaponBehavior weaponBehavior)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weaponBehavior = weaponBehavior;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承环境类，实现不同的角色</span></span><br><span class="line"><span class="keyword">import</span> behavior.impl.BowAndArrowBahavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">King</span> <span class="keyword">extends</span> <span class="title">Charater</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">King</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        weaponBehavior = <span class="keyword">new</span> BowAndArrowBahavior();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> behavior.impl.KnifeBehavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Knight</span> <span class="keyword">extends</span> <span class="title">Charater</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Knight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        weaponBehavior = <span class="keyword">new</span> KnifeBehavior();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> behavior.impl.AxeBehavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queen</span> <span class="keyword">extends</span> <span class="title">Charater</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Queen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        weaponBehavior = <span class="keyword">new</span> AxeBehavior();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> behavior.impl.BowAndArrowBahavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Troll</span> <span class="keyword">extends</span> <span class="title">Charater</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Troll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        weaponBehavior = <span class="keyword">new</span> BowAndArrowBahavior();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义抽象策略类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeaponBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">useWepon</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现抽象策略类，提供不同的具体策略</span></span><br><span class="line"><span class="keyword">import</span> behavior.WeaponBehavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AxeBehavior</span> <span class="keyword">implements</span> <span class="title">WeaponBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useWepon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用斧头"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> behavior.WeaponBehavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BowAndArrowBahavior</span> <span class="keyword">implements</span> <span class="title">WeaponBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useWepon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用弓箭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> behavior.WeaponBehavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KnifeBehavior</span> <span class="keyword">implements</span> <span class="title">WeaponBehavior</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useWepon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用匕首"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> behavior.WeaponBehavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwordBehavior</span> <span class="keyword">implements</span> <span class="title">WeaponBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useWepon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用宝剑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">import</span> behavior.impl.KnifeBehavior;</span><br><span class="line"><span class="keyword">import</span> character.Charater;</span><br><span class="line"><span class="keyword">import</span> character.King;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Charater charater = <span class="keyword">new</span> King();</span><br><span class="line">        charater.setWeapon(<span class="keyword">new</span> SwordBehavior());</span><br><span class="line">        charater.performUseWeapon();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试结果：使用宝剑</span></span><br></pre></td></tr></table></figure>

<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>主要优点：</p>
<ul>
<li>策略模式提供了对“开闭原则”的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。 </li>
<li>策略模式提供了管理相关的算法族的办法。 </li>
<li>策略模式提供了可以替换继承关系的办法。 </li>
<li>使用策略模式可以避免使用多重条件转移语句。 </li>
</ul>
<p>主要缺点：</p>
<ul>
<li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。 </li>
<li>策略模式将造成产生很多策略类。</li>
<li>无法同时在客户端使用多个策略类，</li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>在以下情况下可以使用策略模式：</p>
<ul>
<li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。</li>
<li>一个系统需要动态地在几种算法中选择一种。</li>
<li>如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</li>
<li>不希望客户端知道复杂的、与算法相关的数据结构，在具体策略类中封装算法和相关的数据结构，提高算法的保密性与安全性。</li>
</ul>
]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
        <tag>Strategy Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringBoot】Spring Data JPA</title>
    <url>/2019/11/08/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/JPA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90JPA%E3%80%91JPA%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>JPA</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring Data JPA】Spring Boot 整合 Spring Data JPA</title>
    <url>/2019/11/08/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/JPA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Spring%20Data%20JPA%E3%80%91Spring%20Boot%20%E6%95%B4%E5%90%88%20Spring%20Data%20JPA/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

<h3 id="maven-依赖"><a href="#maven-依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">mysql123</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MySQL</span></span><br><span class="line">    <span class="attr">database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JPA 学习笔记</category>
      </categories>
      <tags>
        <tag>Spring Data JPA</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring Boot】整合Spring Data JPA</title>
    <url>/2019/11/08/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20Boot%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Spring%20Boot%E3%80%91%E6%95%B4%E5%90%88Spring%20Data%20JPA/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Data JPA</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringBoot】JWT实现用户认证与鉴权</title>
    <url>/2019/11/08/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20Boot%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90SpringBoot%E3%80%91JWT%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E4%B8%8E%E9%89%B4%E6%9D%83/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>Http协议是无状态协议，通常需要实现用户认证，实现认证的方式有传统的Session认证和基于Token的认证，下面将介绍基于token的认证方式。</p>
<a id="more"></a>

<h3 id="JWT概要"><a href="#JWT概要" class="headerlink" title="JWT概要"></a>JWT概要</h3><blockquote>
<p> JSON Web Token（JWT）是一个开放的标准（RFC 7519），它定义了一个紧凑且自包含的方式，用于在各方之间以JSON对象安全地传输信息。这些信息可以通过数字签名进行验证和信任。可以使用秘密（使用HMAC算法）或使用RSA的公钥/私钥对来对JWT进行签名。<br>具体的jwt介绍可以查看官网的介绍：<a href="https://jwt.io/introduction/" target="_blank" rel="noopener">https://jwt.io/introduction/</a> </p>
</blockquote>
<h3 id="JWT请求流程"><a href="#JWT请求流程" class="headerlink" title="JWT请求流程"></a>JWT请求流程<img src="/images/17.png" alt="JSON Web令牌如何工作"></h3><p>中文介绍：</p>
<ol>
<li>用户使用账号和面发出post请求；</li>
<li>服务器使用私钥创建一个jwt；</li>
<li>服务器返回这个jwt给浏览器；</li>
<li>浏览器将该jwt串在请求头中像服务器发送请求；</li>
<li>服务器验证该jwt；</li>
<li>返回响应的资源给浏览器。</li>
</ol>
<h3 id="JWT组成"><a href="#JWT组成" class="headerlink" title="JWT组成"></a>JWT组成</h3><p> jwt含有三部分：头部（header）、载荷（payload）、签证（signature） </p>
<p><strong>Header</strong></p>
<p>头部一般有两部分信息：声明类型、声明加密的算法（通常使用HMAC SHA256）<br>头部一般使用base64加密：<code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</code><br>解密后：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"typ"</span>:<span class="string">"JWT"</span>,</span><br><span class="line">    <span class="attr">"alg"</span>:<span class="string">"HS256"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>payload</strong></p>
<p>该部分一般存放一些有效的信息。jwt的标准定义包含五个字段：</p>
<ul>
<li><code>iss</code>：该JWT的签发者</li>
<li><code>sub</code>: 该JWT所面向的用户</li>
<li><code>aud</code>: 接收该JWT的一方</li>
<li><code>exp(expires)</code>: 什么时候过期，这里是一个Unix时间戳</li>
<li><code>iat(issued at)</code>: 在什么时候签发的</li>
</ul>
<p>这个只是JWT的定义标准，不强制使用。另外自己也可以添加一些公开的不涉及安全的方面的信息。</p>
<p><strong>signature</strong></p>
<p>JWT最后一个部分。该部分是使用了HS256加密后的数据；包含三个部分：</p>
<ul>
<li>header (base64后的)</li>
<li>payload (base64后的)</li>
<li>secret 私钥</li>
</ul>
<p>secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。</p>
<h3 id="SpringBoot项目集成JWT"><a href="#SpringBoot项目集成JWT" class="headerlink" title="SpringBoot项目集成JWT"></a>SpringBoot项目集成JWT</h3><ol>
<li>添加JWT依赖：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>SpringBoot配置文件中配置JWT配置信息</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#jwt配置</span></span><br><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="string">VTBoc2EyTnRPVzVhVnpkdGJra3piR2x4U0c1eE5qZzk=</span></span><br><span class="line">  <span class="attr">issuer:</span> <span class="string">hydrogen网关服务器</span></span><br><span class="line">  <span class="attr">subject:</span> <span class="string">hydrogen用户</span></span><br><span class="line">  <span class="attr">ttlMillis:</span> <span class="number">86400000</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>定义一个接口<code>Payload</code>，用于拓展的JWT载荷。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Payload</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">key</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>定义一个JwtConfig类，用于加载配置：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"jwt"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秘钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签发主体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String issuer;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签发主题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String subject;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token有效期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long ttlMillis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>提供JWT的工具类：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wusuiwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/11/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createJWT</span><span class="params">(Payload payload, JwtConfig jwtConfig)</span> </span>&#123;</span><br><span class="line">        Claims claims = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//载荷</span></span><br><span class="line">        String key = payload.key();</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String value = JSON.toJSONString(payload);</span><br><span class="line">            claims = <span class="keyword">new</span> DefaultClaims();</span><br><span class="line">            claims.put(<span class="string">"module"</span>, key);</span><br><span class="line">            claims.put(key, value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Date expiration = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//过期时间</span></span><br><span class="line">        <span class="keyword">if</span> (jwtConfig.getTtlMillis() != <span class="keyword">null</span> &amp;&amp; jwtConfig.getTtlMillis() &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            expiration = <span class="keyword">new</span> Date(System.currentTimeMillis() + jwtConfig.getTtlMillis());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//签名密钥</span></span><br><span class="line">        <span class="keyword">byte</span>[] secretBytes = DatatypeConverter.parseBase64Binary(jwtConfig.getSecret());</span><br><span class="line">        Key secretKey = <span class="keyword">new</span> SecretKeySpec(secretBytes, SignatureAlgorithm.HS256.getJcaName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Jwts.builder().setHeaderParam(<span class="string">"typ"</span>, <span class="string">"JWT"</span>)</span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                .setExpiration(expiration)</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, secretKey).compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title">parseJWT</span><span class="params">(String token, JwtConfig jwtConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(DatatypeConverter.parseBase64Binary(jwtConfig.getSecret()))</span><br><span class="line">                .parseClaimsJws(token)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>实现一个拦截器，处理鉴权</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import com.wusuiwei.hydrogen.base.jwt.JwtConfig;</span><br><span class="line">import com.wusuiwei.hydrogen.base.jwt.JwtUtil;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.http.HttpMethod;</span><br><span class="line">import org.springframework.web.method.HandlerMethod;</span><br><span class="line">import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.lang.annotation.Annotation;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author wusuiwei</span><br><span class="line"> * @since 2019/11/29</span><br><span class="line"> */</span><br><span class="line">public class JWTIntercepter extends HandlerInterceptorAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private JwtConfig jwtConfig;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        // 忽略带JwtIgnore注解的请求, 不做后续token认证校验</span><br><span class="line">        if (handler instanceof HandlerMethod) &#123;</span><br><span class="line">            HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">            Annotation annotation = handlerMethod.getMethod().getAnnotation(JwtIgnore.class);</span><br><span class="line">//            JwtIgnore jwtIgnore = handlerMethod.getMethodAnnotation(JwtIgnore.class);</span><br><span class="line">            if (annotation != null) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String authHeader = request.getHeader(&quot;authorization&quot;);</span><br><span class="line">        if (HttpMethod.OPTIONS.equals(request.getMethod())) &#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (authHeader == null || !authHeader.startsWith(&quot;Bearer&quot;)) &#123;</span><br><span class="line">                throw new RuntimeException(&quot;请登录~&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //获取token</span><br><span class="line">            String token = authHeader.substring(7);</span><br><span class="line">            JwtUtil.parseJWT(token, jwtConfig);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，为了实现绕过登录认证，提供了<code>@JwtIgnore</code>注解，只需要将其注解在请求方法上，则可以绕过登录：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wusuiwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/11/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JwtIgnore &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>注：jwt可能会出现跨域问题，暂时不予处理，等后期相关知识具备时再处理。</strong></p>
<hr>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringBoot】Spring Data JPA</title>
    <url>/2019/11/08/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20Boot%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90SpringBoot%E3%80%91Spring%20Data%20JPA%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Spring Data JPA</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring Cloud Alibaba】Nacos</title>
    <url>/2019/11/08/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20Cloud%20Alibaba%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Spring%20Cloud%20Alibaba%E3%80%91Seata/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

<h3 id="Nacos作为注册中心"><a href="#Nacos作为注册中心" class="headerlink" title="Nacos作为注册中心"></a>Nacos作为注册中心</h3>]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring Cloud Alibaba】Nacos</title>
    <url>/2019/11/08/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20Cloud%20Alibaba%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Spring%20Cloud%20Alibaba%E3%80%91Nacos/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

<h3 id="Nacos作为注册中心"><a href="#Nacos作为注册中心" class="headerlink" title="Nacos作为注册中心"></a>Nacos作为注册中心</h3>]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring Cloud Alibaba】Nacos注册中心</title>
    <url>/2019/11/08/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20Cloud%20Alibaba%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Spring%20Cloud%20Alibaba%E3%80%91Sentinel/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

<h3 id="Nacos作为注册中心"><a href="#Nacos作为注册中心" class="headerlink" title="Nacos作为注册中心"></a>Nacos作为注册中心</h3>]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记</title>
    <url>/2019/11/08/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

<h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><h4 id="架构演变史"><a href="#架构演变史" class="headerlink" title="架构演变史"></a>架构演变史</h4><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需一个治理系统确保架构有条不紊的演进。</p>
<p><img src="/images/dubbo-architecture-roadmap.jpg" alt="image"></p>
<p><strong>单一应用架构</strong></p>
<p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p>
<p><strong>垂直应用架构</strong></p>
<p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p>
<p><strong>分布式服务架构</strong></p>
<p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p>
<p><strong>流动计算架构</strong></p>
<p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p>
<h4 id="微服务简介"><a href="#微服务简介" class="headerlink" title="微服务简介"></a>微服务简介</h4><p> <img src="https://docshome.gitbooks.io/microservices/content/resources/1-2.png" alt="图 1-2、一个单体应用分解成微服务"> </p>
<p> 微服务架构（Microservice Architecture）是一种架构概念，旨在通过将功能分解到各个离散的服务中以实现对解决方案的解耦。你可以将其看作是在架构层次而非获取服务的</p>
<p>类上应用很多SOLID原则。微服务架构是个很有趣的概念，它的主要作用是将功能分解到离散的各个服务当中，从而降低系统的耦合性，并提供更加灵活的服务支持。</p>
<p><strong>概念：</strong>把一个大型的单个应用程序和服务拆分为数个甚至数十个的支持微服务，它可扩展单个组件而不是整个的应用程序堆栈，从而满足服务等级协议。</p>
<p><strong>定义：</strong>围绕业务领域组件来创建应用，这些应用可独立地进行开发、管理和迭代。在分散的组件中使用云架构和平台式部署、管理和服务功能，使产品交付变得更加简单。</p>
<p><strong>本质：</strong>用一些功能比较明确、业务比较精练的服务去解决更大、更实际的问题。</p>
<blockquote>
<p>面向服务的架构（SOA) 与微服务架构 之间的区别？</p>
<p>1.SOA（Service Oriented Architecture）“面向服务的架构”:他是一种设计方法，其中包含多个服务， 服务之间通过相互依赖最终提供一系列的功能。一个服务 通常以独立的形式存在与操作系统进程中。各个服务之间 通过网络调用。</p>
<p> 2.微服务架构:其实和 SOA 架构类似,微服务是在 SOA 上做的升华，微服务架构强调的一个重点是“业务需要彻底的组件化和服务化”，原有的单个业务系统会拆分为多个可以独立开发、设计、运行的小应用。这些小应用之间通过服务完成交互和集成。</p>
<p> <strong>微服务架构 = 80%的SOA服务架构思想 + 100%的组件化架构思想 + 80%的领域建模思想</strong></p>
<p>微服务架构是SOA架构发展之后的产物。</p>
</blockquote>
<h4 id="微服务优点"><a href="#微服务优点" class="headerlink" title="微服务优点"></a>微服务优点</h4><p><strong>关键字：复杂度可控，独立按需扩展，技术选型灵活，容错，可用性高</strong> </p>
<p><strong>①</strong>它解决了复杂性的问题。它会将一种怪异的整体应用程序分解成一组服务。虽然功能总量 不变，但应用程序已分解为可管理的块或服务。每个服务都以RPC或消息驱动的API的</p>
<p>形式定义了一个明确的边界；Microservice架构模式实现了一个模块化水平。</p>
<p><strong>②</strong>这种架构使每个服务都能够由专注于该服务的团队独立开发。开发人员可以自由选择任何有用的技术，只要该服务符合API合同。当然，大多数组织都希望避免完全无政府状态并</p>
<p>限制技术选择。然而，这种自由意味着开发人员不再有义务使用在新项目开始时存在的可能过时的技术。在编写新服务时，他们可以选择使用当前的技术。此外，由于服务相对较小，</p>
<p>因此使用当前技术重写旧服务变得可行。</p>
<p><strong>③</strong>Microservice架构模式使每个微服务都能独立部署。开发人员不需要协调部署本地服务的变更。这些变化可以在测试后尽快部署。例如，UI团队可以执行A | B测试，并快速迭代</p>
<p>UI更改。Microservice架构模式使连续部署成为可能。</p>
<p><strong>④</strong>Microservice架构模式使每个服务都可以独立调整。您可以仅部署满足其容量和可用性限制的每个服务的实例数。此外，您可以使用最符合服务资源要求的硬件。</p>
<h4 id="微服务缺点"><a href="#微服务缺点" class="headerlink" title="微服务缺点"></a>微服务缺点</h4><p> <strong>关键点（挑战）：多服务运维难度，系统部署依赖，服务间通信成本，数据一致性，系统集成测试，重复工作，性能监控等</strong> </p>
<p><strong>①</strong>一个缺点是名称本身。术语microservice过度强调服务规模。但重要的是要记住，这是一种手段，而不是主要目标。微服务的目标是充分分解应用程序，以便于敏捷应用程序开发和部署。</p>
<p><strong>②</strong>微服务器的另一个主要缺点是分布式系统而产生的复杂性。开发人员需要选择和实现基于消息传递或RPC的进程间通信机制。此外，他们还必须编写代码来处理部分故障，因为请求的目的地可能很慢或不可用。</p>
<p><strong>③</strong>微服务器的另一个挑战是分区数据库架构。更新多个业务实体的业务交易是相当普遍的。但是，在基于微服务器的应用程序中，您需要更新不同服务所拥有的多个数据库。使用分布式事务通常不是一个选择，而不仅仅是因为CAP定理。许多今天高度可扩展的NoSQL数据库都不支持它们。你最终不得不使用最终的一致性方法，这对开发人员来说更具挑战性。</p>
<p><strong>④</strong>测试微服务应用程序也更复杂。服务类似的测试类将需要启动该服务及其所依赖的任何服务（或至少为这些服务配置存根）。再次，重要的是不要低估这样做的复杂性。</p>
<p><strong>⑤</strong>Microservice架构模式的另一个主要挑战是实现跨越多个服务的更改。例如，我们假设您正在实施一个需要更改服务A，B和C的故事，其中A取决于B和B取决于C.在单片应用程序中，您可以简单地更改相应的模块，整合更改，并一次性部署。相比之下，在Microservice架构模式中，您需要仔细规划和协调对每个服务的更改。例如，您需要更新服务C，然后更新服务B，然后再维修A.幸运的是，大多数更改通常仅影响一个服务，而需要协调的多服务变更相对较少。</p>
<p><strong>⑥</strong>部署基于微服务的应用程序也更复杂。单一应用程序简单地部署在传统负载平衡器后面的一组相同的服务器上。每个应用程序实例都配置有基础架构服务（如数据库和消息代理）的位置（主机和端口）。相比之下，微服务应用通常由大量服务组成。例如，每个服务将有多个运行时实例。更多的移动部件需要进行配置，部署，扩展和监控。此外，您还需要实现服务发现机制，使服务能够发现需要与之通信的任何其他服务的位置（主机和端口）。传统的基于故障单和手动操作的方法无法扩展到这种复杂程度。因此，成功部署微服务应用程序需要开发人员更好地控制部署方法，并实现高水平的自动化。</p>
<h3 id="Spring-Cloud-微服务架构"><a href="#Spring-Cloud-微服务架构" class="headerlink" title="Spring Cloud 微服务架构"></a>Spring Cloud 微服务架构</h3><p> <img src="https://spring.io/images/diagram-microservices-88e01c7d34c688cb49556435c130d352.svg" alt="Microservices diagram">  </p>
<p>Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具（例如配置管理，服务发现，断路器，智能路由，微代理，控制总线）。</p>
<p>Spring Cloud 提供的工具分为以下几类：</p>
<ul>
<li>服务注册与发现(Eureka、Consul、zookeeper、Nacos等)</li>
<li>服务调用（Ribbon、LoadBalancer、Feign、OpenFeign等）</li>
<li>服务降级（Hystrix、Resilience4j、Sentinel等）</li>
<li>服务网关（Zuul、Gateway等）</li>
<li>服务配置（Config、Nacos等）</li>
<li>服务总线（Bus、Nacos等）</li>
<li>…</li>
</ul>
<p>当前版本：<strong>Hoxton SR3</strong></p>
<p>支持的Spring Boot版本： <strong>2.2.5.RELEASE</strong> </p>
<blockquote>
<p>云原生的12要素（  <a href="https://12factor.net/zh_cn/" target="_blank" rel="noopener">https://12factor.net/zh_cn/</a> ）</p>
</blockquote>
<h3 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h3><h4 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h4><p>Eureka 是 <a href="https://github.com/Netflix" target="_blank" rel="noopener">Netflix</a> 公司开发的， 一个基于 REST 服务的，服务注册与发现的组件 。</p>
<p>包括  <strong>Eureka Server</strong> 和 *<em>Eureka  Client *</em> 组件：</p>
<ul>
<li>Eureka Client：一个Java客户端，用于简化与 Eureka Server 的交互（通常就是微服务中的客户端和服务端）</li>
<li>Eureka Server：提供服务注册和发现的能力（通常就是微服务中的注册中心）</li>
</ul>
<h5 id="Eureka-原理"><a href="#Eureka-原理" class="headerlink" title="Eureka 原理"></a>Eureka 原理</h5><h5 id="单个Eureka-Server-配置部署"><a href="#单个Eureka-Server-配置部署" class="headerlink" title="单个Eureka Server 配置部署"></a>单个Eureka Server 配置部署</h5><p>maven 依赖<code>pom.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>主启动类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wusuiwei.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span><span class="comment">//开启Eureka服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServerMain<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>application.yml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="comment">#Eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">www.eureka7003.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false 表示本身就是注册中心，本身职责是维护服务实例，不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hosthome&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>

<p>启动服务~~，访问：<a href="http://localhost:7001" target="_blank" rel="noopener">http://localhost:7001</a>:</p>
<p><img src="/images/image-20200312172743517.png" alt="image-20200312172743517"></p>
<h6 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h6><p>maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="Eureka-Server-集群配置部署"><a href="#Eureka-Server-集群配置部署" class="headerlink" title="Eureka Server 集群配置部署"></a>Eureka Server 集群配置部署</h5><h6 id="服务注册-1"><a href="#服务注册-1" class="headerlink" title="服务注册"></a>服务注册</h6><h4 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h4><h4 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h4><h3 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h3><h4 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h4><h4 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h4><h4 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h4><h4 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h4><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><h4 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h4><h4 id="Resilience4j"><a href="#Resilience4j" class="headerlink" title="Resilience4j"></a>Resilience4j</h4><h4 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h4><h3 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h3><h4 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h4><h4 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h4><h3 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h3><h4 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h4><h4 id="Nacos-1"><a href="#Nacos-1" class="headerlink" title="Nacos"></a>Nacos</h4><h3 id="服务总线"><a href="#服务总线" class="headerlink" title="服务总线"></a>服务总线</h3><h4 id="Bus"><a href="#Bus" class="headerlink" title="Bus"></a>Bus</h4><h4 id="Nacos-2"><a href="#Nacos-2" class="headerlink" title="Nacos"></a>Nacos</h4>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>JPA</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring Cloud Alibaba】Nacos注册中心</title>
    <url>/2019/11/08/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Spring%20Cloud%E3%80%91GateWay/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

<h3 id="Nacos作为注册中心"><a href="#Nacos作为注册中心" class="headerlink" title="Nacos作为注册中心"></a>Nacos作为注册中心</h3>]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring笔记】面向切面编程</title>
    <url>/2019/11/08/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Spring%E7%AC%94%E8%AE%B0%E3%80%91%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p><strong>AOP</strong>(Aspect-Oriented Programming, 面向切面编程): 是一种新的方法论, 是对传统 OOP(Object-Oriented Programming, 面向对象编程) 的补充.</p>
<p>AOP 的主要编程对象是切面(aspect), 而切面模块化横切关注点.</p>
<p>在应用 AOP 编程时, 仍然需要定义公共功能, 但可以明确的定义这个功能在哪里, 以什么方式应用, 并且不必修改受影响的类. 这样一来横切关注点就被模块化到特殊的对象(切面)里.</p>
<p>AOP 的好处:</p>
<ul>
<li>每个事物逻辑位于一个位置, 代码不分散, 便于维护和升级</li>
<li>业务模块更简洁, 只包含核心业务代码</li>
</ul>
<a id="more"></a>

<hr>
<h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h1><h2 id="AOP概述"><a href="#AOP概述" class="headerlink" title="AOP概述"></a>AOP概述</h2><h3 id="AOP关键概念详解"><a href="#AOP关键概念详解" class="headerlink" title="AOP关键概念详解"></a>AOP关键概念详解</h3><p><strong>AOP</strong>(Aspect-Oriented Programming, 面向切面编程): 是一种新的方法论, 是对传统 OOP(Object-Oriented Programming, 面向对象编程) 的补充.</p>
<p>AOP 的主要编程对象是切面(aspect), 而切面模块化横切关注点.</p>
<p>在应用 AOP 编程时, 仍然需要定义公共功能, 但可以明确的定义这个功能在哪里, 以什么方式应用, 并且不必修改受影响的类. 这样一来横切关注点就被模块化到特殊的对象(切面)里.</p>
<p>AOP 的好处:</p>
<ul>
<li>每个事物逻辑位于一个位置, 代码不分散, 便于维护和升级</li>
<li>业务模块更简洁, 只包含核心业务代码</li>
</ul>
<p><strong>切面</strong>(Aspect):  横切关注点(跨越应用程序多个模块的功能)被模块化的特殊对象。比如日志、验证。</p>
<p><strong>通知</strong>(Advice):  切面必须要完成的工作。通俗的说，切面被完成的方法就被称为通知。</p>
<p><strong>目标</strong>(Target): 被通知的对象。通俗的说，就是与业务本身相关的原始对象。</p>
<p><strong>代理</strong>(Proxy): 向目标对象应用通知之后创建的对象。通俗的说，就是原始对象用代理对象包装了一层又一层的对象，就是图中最上面的一大坨方框。</p>
<p><strong>连接点</strong>（Joinpoint）：程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后等。连接点由两个信息确定：方法表示的程序执行点；相对点表示的方位。例如 ArithmethicCalculator#add() 方法执行前的连接点，执行点为 ArithmethicCalculator#add()； 方位为该方法执行前的位置</p>
<p><strong>切点</strong>（pointcut）：每个类都拥有多个连接点：例如 ArithmethicCalculator 的所有方法实际上都是连接点，即连接点是程序类中客观存在的事务。AOP 通过切点定位到特定的连接点。类比：连接点相当于数据库中的记录，切点相当于查询条件。切点和连接点不是一对一的关系，一个切点匹配多个连接点，切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。</p>
<h3 id="AOP原理简解"><a href="#AOP原理简解" class="headerlink" title="AOP原理简解"></a>AOP原理简解</h3><p>实现方式为：<strong>动态代理</strong>。</p>
<p><img src="/images/1546329141979.png" alt="1546329141979"></p>
<p>为了实现计算功能，并同时记录日志和验证参数。采用AOP的方式，需要实现以下业务逻辑及切面：</p>
<p>AtithmeticCalculator接口类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.master.yi.spring.aop.xml;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Master Yi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/12/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AtithmeticCalculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AtithmeticCalculatorImpl实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.master.yi.spring.aop.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Master Yi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/12/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtithmeticCalculatorImpl</span> <span class="keyword">implements</span> <span class="title">AtithmeticCalculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i + j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i - j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i / j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i * j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>日志切面LoggingAspect类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.master.yi.spring.aop.xml;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把这个类声明为一个切面：需要把该类放入到IOC容器中，再声明为一个切面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Master Yi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/1/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareJoinPoingExpression</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        List&lt;Object&gt; args = Arrays.asList(joinPoint.getArgs());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"The method begings "</span> + methodName + <span class="string">"begins with "</span> + args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"The method ends "</span> + methodName + <span class="string">"ends"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> </span>&#123;</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"The method"</span> + methodName + <span class="string">"ends with "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint joinPoint,NullPointerException ex)</span> </span>&#123;</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"The method "</span> + methodName + <span class="string">" occurs exception: "</span> + ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjd)</span> </span>&#123;</span><br><span class="line">        Object result=<span class="keyword">null</span>;</span><br><span class="line">        String methodName=pjd.getSignature().getName();</span><br><span class="line">        Object[] args = pjd.getArgs();</span><br><span class="line">        <span class="comment">//执行目标方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//前置通知</span></span><br><span class="line">            System.out.println(<span class="string">"The method begings "</span> + methodName + <span class="string">"begins with "</span> + Arrays.asList(args));</span><br><span class="line">            result=pjd.proceed();</span><br><span class="line">            <span class="comment">//返回通知</span></span><br><span class="line">            System.out.println(<span class="string">"The method"</span>+methodName + <span class="string">"ends with"</span>+ result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//异常通知</span></span><br><span class="line">            System.out.println(<span class="string">"The method occurs exception: "</span> +e);</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">//后置通知</span></span><br><span class="line">        System.out.println(<span class="string">"The method"</span>+methodName + <span class="string">"ends"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>验证切面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.master.yi.spring.aop.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Master Yi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/1/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        List&lt;Object&gt; args = Arrays.asList(joinPoint.getArgs());</span><br><span class="line">        System.out.println(<span class="string">"--&gt;Validated "</span> + args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AOP通知类型"><a href="#AOP通知类型" class="headerlink" title="AOP通知类型"></a>AOP通知类型</h3><p> <strong>Before advice</strong>( 前置通知 )</p>
<p> <strong>After returning advice</strong> ( 返回通知 )</p>
<p> <strong>After throwing advice</strong>( 异常通知 )</p>
<p> <strong>After advice</strong> ( 后置通知 )</p>
<p>  <strong>Around advice</strong> ( 环绕通知 )</p>
<h2 id="AOP-HelloWorld"><a href="#AOP-HelloWorld" class="headerlink" title="AOP HelloWorld"></a>AOP HelloWorld</h2><blockquote>
<p>maven 依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>aop配置（applicationContext.xml)</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wusuiwei.spring.aop"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    //开启AOP代理</span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>切面（EmployeeCRUDAspect.java)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeCRUDAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* EmployeeManager.getEmployeeById(..))"</span>)        <span class="comment">//point-cut expression</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logBeforeV1</span><span class="params">(JoinPoint joinPoint)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"EmployeeCRUDAspect.logBeforeV1() : "</span> + joinPoint.getSignature().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实体类及目标对象（EmployeeDTO.java、EmployeeManager.java)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmployeeDTO <span class="title">getEmployeeById</span><span class="params">(Integer employeeId)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Method getEmployeeById() called"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EmployeeDTO();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>主类/测试类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAOP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        EmployeeManager manager = context.getBean(EmployeeManager<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        manager.getEmployeeById(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：</p>
<p>EmployeeCRUDAspect.logBeforeV1() : getEmployeeById<br>Method getEmployeeById() called</p>
</blockquote>
<h2 id="基于注解配置AOP"><a href="#基于注解配置AOP" class="headerlink" title="基于注解配置AOP"></a>基于注解配置AOP</h2><p>因为后续的开发中大多使用注解开发，因此，xml配置仅做了解。</p>
<h3 id="启用-AspectJ-注解支持"><a href="#启用-AspectJ-注解支持" class="headerlink" title="启用 AspectJ 注解支持"></a>启用 AspectJ 注解支持</h3><ul>
<li>XML 配置文件：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加入命名空间xmlns:aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启`@Aspect` 注解支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Java 配置文件：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Aspect注解声明切面"><a href="#Aspect注解声明切面" class="headerlink" title="@Aspect注解声明切面"></a><code>@Aspect</code>注解声明切面</h3><ul>
<li><p>切面首先是一个bean，即加入<code>@Component</code> 注解</p>
</li>
<li><p>切面还需要加入<code>@Aspect</code>注解</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.master.yi.spring.aop.impl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把这个类声明为一个切面：需要把该类放入到IOC容器中，再声明为一个切面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Master Yi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/1/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(public int AtithmeticCalculator.add(int,int))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        List&lt;Object&gt; args = Arrays.asList(joinPoint.getArgs());</span><br><span class="line"></span><br><span class="line">      	System.out.println(<span class="string">"The method begings "</span> + methodName+<span class="string">"begins with "</span> + args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Before声明前置通知"><a href="#Before声明前置通知" class="headerlink" title="@Before声明前置通知"></a><code>@Before</code>声明前置通知</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.master.yi.spring.aop.impl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Master Yi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/1/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把这个类声明为一个切面：需要把该类放入到IOC容器中，再声明为一个切面</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(public int AtithmeticCalculator.add(int,int))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        List&lt;Object&gt; args = Arrays.asList(joinPoint.getArgs());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"The method begings "</span> + methodName+<span class="string">"begins with "</span> + args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="After声明后置通知"><a href="#After声明后置通知" class="headerlink" title="@After声明后置通知"></a><code>@After</code>声明后置通知</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@After</span>(<span class="string">"execution(public int AtithmeticCalculator.add(int,int))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    String methodName = joinPoint.getSignature().getName();</span><br><span class="line">    List&lt;Object&gt; args = Arrays.asList(joinPoint.getArgs());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"The method ends "</span> + methodName+<span class="string">"ends"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AfterReturning声明返回通知"><a href="#AfterReturning声明返回通知" class="headerlink" title="@AfterReturning声明返回通知"></a><code>@AfterReturning</code>声明返回通知</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回通知：在方法正常结束后执行的代码</span></span><br><span class="line"><span class="comment">* 返回通知是可以访问到方法返回值的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@AfterReturning</span>(value = <span class="string">"execution(public int AtithmeticCalculator.*(..))"</span>, returning = <span class="string">"result"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> </span>&#123;</span><br><span class="line">    String methodName = joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">"The method"</span> + methodName + <span class="string">"ends with "</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AfterThrowing声明异常通知"><a href="#AfterThrowing声明异常通知" class="headerlink" title="@AfterThrowing声明异常通知"></a><code>@AfterThrowing</code>声明异常通知</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">**</span><br><span class="line">* 异常通知：在目标方法出现异常时会执行的代码</span><br><span class="line">* 可以访问到异常对象，且可以指定出现特定异常时再执行通知的代码</span><br><span class="line">*/</span><br><span class="line"><span class="meta">@AfterThrowing</span>(value = <span class="string">"execution(public int AtithmeticCalculator.*(..))"</span>, throwing = <span class="string">"ex"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint,NullPointerException ex)</span> </span>&#123;</span><br><span class="line">    String methodName = joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">"The method "</span> + methodName + <span class="string">" occurs exception: "</span> + ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Around声明异常通知"><a href="#Around声明异常通知" class="headerlink" title="@Around声明异常通知"></a><code>@Around</code>声明异常通知</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 环绕通知：需要ProceedingJoinPoint类型的参数</span></span><br><span class="line"><span class="comment">* 环绕通知类似于动态代理的全过程：ProceedingJoinPoint类型的参数剋决定是否执行目标方法</span></span><br><span class="line"><span class="comment">* 且环绕通知必须要有返回值，返回值即为目标方法的返回值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"execution(public int AtithmeticCalculator.*(..)))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjd)</span> </span>&#123;</span><br><span class="line">    Object result=<span class="keyword">null</span>;</span><br><span class="line">    String methodName=pjd.getSignature().getName();</span><br><span class="line">    Object[] args = pjd.getArgs();</span><br><span class="line">    <span class="comment">//执行目标方法</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//前置通知</span></span><br><span class="line">        System.out.println(<span class="string">"The method begings "</span> + methodName + <span class="string">"begins with "</span> + Arrays.asList(args));</span><br><span class="line">        result=pjd.proceed();</span><br><span class="line">        <span class="comment">//返回通知</span></span><br><span class="line">        System.out.println(<span class="string">"The method"</span>+methodName + <span class="string">"ends with"</span>+ result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">"The method occurs exception: "</span> +e);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"The method"</span>+methodName + <span class="string">"ends"</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="切面优先级"><a href="#切面优先级" class="headerlink" title="切面优先级"></a>切面优先级</h3><p><strong>可以使用<code>@Order(1)</code>指定优先级，值越小，优先级越高</strong></p>
<h3 id="重用切面表达式"><a href="#重用切面表达式" class="headerlink" title="重用切面表达式"></a>重用切面表达式</h3><p>定义一个方法，用于声明切入点表达式，一般地，该方法中不需要添加其他代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(public int AtithmeticCalculator.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareJoinPoingExpression</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明该方法时一个前置通知：在目标方法开始执行之前执行</span></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"declareJoinPoingExpression()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    String methodName = joinPoint.getSignature().getName();</span><br><span class="line">    List&lt;Object&gt; args = Arrays.asList(joinPoint.getArgs());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"The method begings "</span> + methodName + <span class="string">"begins with "</span> + args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>引用其他切面切入点表达式可以采用以下形式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span>(<span class="string">"LoggingAspect.declareJoinPoingExpression()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    List&lt;Object&gt; args = Arrays.asList(joinPoint.getArgs());</span><br><span class="line">    System.out.println(<span class="string">"Validated "</span>+Arrays.asList(args) );</span><br><span class="line">Java Configuratio</span><br></pre></td></tr></table></figure>

<h2 id="基于XML配置AOP"><a href="#基于XML配置AOP" class="headerlink" title="基于XML配置AOP"></a>基于XML配置AOP</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"atithmeticCalculator"</span> <span class="attr">class</span>=<span class="string">"com.master.yi.spring.aop.xml.AtithmeticCalculatorImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面的bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"loggingAspect"</span> <span class="attr">class</span>=<span class="string">"com.master.yi.spring.aop.xml.LoggingAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"validationAspect"</span> <span class="attr">class</span>=<span class="string">"com.master.yi.spring.aop.xml.ValidationAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置AOP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(public int com.master.yi.spring.aop.xml.AtithmeticCalculator.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面及通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"loggingAspect"</span> <span class="attr">order</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforeMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> <span class="attr">throwing</span>=<span class="string">"ex"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> <span class="attr">returning</span>=<span class="string">"result"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"validationAspect"</span> <span class="attr">order</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"validate"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring笔记</category>
      </categories>
      <tags>
        <tag>Spring AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>【AutoTest】搭建关键字驱动的Web UI 自动化框架</title>
    <url>/2019/11/08/04_%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0/%E3%80%90AutoTest%E3%80%91%E6%90%AD%E5%BB%BA%E5%85%B3%E9%94%AE%E5%AD%97%E9%A9%B1%E5%8A%A8%E7%9A%84Web%20UI%20%E8%87%AA%E5%8A%A8%E5%8C%96%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>本文将详细介绍如何使用<code>autotest-spring-boot-starter</code>快速搭建<strong>关键字</strong>驱动的Web UI 自动化测试框架。</p>
<ul>
<li>使用 IDEA 搭建Spring Boot项目</li>
<li>引入maven依赖</li>
<li>默认提供的关键字列表</li>
<li>自定义关键字</li>
<li>启动项目</li>
</ul>
<a id="more"></a>

<h3 id="搭建-Spring-Boot-项目"><a href="#搭建-Spring-Boot-项目" class="headerlink" title="搭建 Spring Boot 项目"></a>搭建 Spring Boot 项目</h3><blockquote>
<p>开发工具：IDEA</p>
</blockquote>
<h3 id="引入maven依赖"><a href="#引入maven依赖" class="headerlink" title="引入maven依赖"></a>引入maven依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">autotest.version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">autotest.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.wusuiwei<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>autotest-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;autotest.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="默认关键字列表"><a href="#默认关键字列表" class="headerlink" title="默认关键字列表"></a>默认关键字列表</h3><h3 id="自定义关键字"><a href="#自定义关键字" class="headerlink" title="自定义关键字"></a>自定义关键字</h3><p>自定义关键字也是非常建单的，只需要新建一个java类，并标识<code>@keywords</code>注解，并在每个方法上标注<code>@keyword</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Keywords</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeleniumActionKeywords</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> WebDriver driver;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Keyword</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">openBrowser</span><span class="params">(String browserName)</span> </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">"webdriver.chrome.driver"</span>, <span class="string">"D:\\code\\github\\autotest-spring-boot\\baidu-webui-autotest\\src\\main\\resources\\chromedriver.exe"</span>);</span><br><span class="line">        driver = <span class="keyword">new</span> ChromeDriver();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        driver.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p><img src="/images/image-20200903105805800.png" alt="image-20200903105805800"></p>
]]></content>
      <categories>
        <category>Spring笔记</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>hydrogen</tag>
        <tag>jwt</tag>
      </tags>
  </entry>
  <entry>
    <title>【AutoTest】搭建关键字驱动的Web UI 自动化框架</title>
    <url>/2019/11/08/04_%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0/%E3%80%90AutoTest%E3%80%91%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>本文将详细介绍如何使用<code>autotest-spring-boot-starter</code>快速搭建<strong>关键字</strong>驱动的Web UI 自动化测试框架。</p>
<p><code>autotest-spring-boot-starter</code>项目地址：<a href="https://github.com/wusuiwei/autotest-spring-boot" target="_blank" rel="noopener">https://github.com/wusuiwei/autotest-spring-boot</a></p>
<a id="more"></a>

<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><p>- </p>
]]></content>
      <categories>
        <category>Spring笔记</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>hydrogen</tag>
        <tag>jwt</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring笔记】面向切面编程</title>
    <url>/2019/11/08/04_%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0/%E3%80%90Hydrogen%E3%80%91%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>本系统将采用前后端分离的架构，后端采用SpringBoot等相关框架，前端采用Vue相关框架。</p>
<a id="more"></a>

]]></content>
      <categories>
        <category>Spring笔记</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>hydrogen</tag>
        <tag>jwt</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringMVC】框架体系</title>
    <url>/2019/11/08/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20MVC%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90SpringMVC%E3%80%91%E6%A1%86%E6%9E%B6%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring】事务管理</title>
    <url>/2019/11/08/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Spring%E3%80%91%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>Spring Transaction</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring笔记】核心容器</title>
    <url>/2019/11/08/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Spring%E7%AC%94%E8%AE%B0%E3%80%91%E6%A0%B8%E5%BF%83%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>IOC容器根据XML文件、Java注释或Java config文件中的配置信息创建、装配、管理bean，Spring应用只需要声明所需的类就可以直接使用这些bean的功能。如下图：</p>
<p> <img src="/images/5ab6e3c3c7c024947945a20841bd20ea_498x296.png" alt="The Spring IoC container"></p>
<a id="more"></a>

<h1 id="Spring-IOC-Container"><a href="#Spring-IOC-Container" class="headerlink" title="Spring IOC Container"></a>Spring IOC Container</h1><h2 id="IOC-vs-DI"><a href="#IOC-vs-DI" class="headerlink" title="IOC vs. DI"></a>IOC vs. DI</h2><blockquote>
<h2 id="1-What-is-Inversion-of-Control-IoC"><a href="#1-What-is-Inversion-of-Control-IoC" class="headerlink" title="1. What is Inversion of Control (IoC)"></a>1. What is Inversion of Control (IoC)</h2><p>In traditional programming, the flow of the business logic is determined by objects that are statically assigned to one another. With <em>inversion of control</em>, the flow depends on the object graph that is instantiated by the assembler and is made possible by object interactions being defined through abstractions. The binding process is achieved through <em>dependency injection</em>, although some argue that the use of a service locator also provides inversion of control.</p>
<p><strong>Inversion of control as a design guideline</strong> serves the following purposes:</p>
<ol>
<li>There is a decoupling of the execution of a certain task from implementation.</li>
<li>Every module can focus on what it is designed for.</li>
<li>Modules make no assumptions about what other systems do but rely on their contracts.</li>
<li>Replacing modules has no side effect on other modules.</li>
</ol>
</blockquote>
<blockquote>
<h2 id="2-What-is-Dependency-Injection-DI"><a href="#2-What-is-Dependency-Injection-DI" class="headerlink" title="2. What is Dependency Injection (DI)"></a>2. What is Dependency Injection (DI)</h2><p>IoC is a design paradigm with the goal of giving more control to the targeted components of your application, the ones getting the work done. While <em>Dependency injection</em> is a pattern used to create instances of objects that other objects rely on without knowing at compile time which class will be used to provide that functionality. IoC relies on dependency injection because a mechanism is needed in order to activate the components providing the specific functionality.</p>
<p>The two concepts work together in this way to allow for much more flexible, reusable, and encapsulated code to be written. As such, they are important concepts in designing object-oriented solutions.</p>
</blockquote>
<h2 id="IOC-Container"><a href="#IOC-Container" class="headerlink" title="IOC Container"></a>IOC Container</h2><p>IOC容器根据XML文件、Java注释或Java config文件中的配置信息创建、装配、管理bean，Spring应用只需要声明所需的类就可以直接使用这些bean的功能。如下图：</p>
<p> <img src="/images/5ab6e3c3c7c024947945a20841bd20ea_498x296.png" alt="The Spring IoC container"> </p>
<p>IOC容器执行的主要任务：</p>
<ul>
<li>创建bean实例</li>
<li>根据配置文件装配bean</li>
<li>为bean设置初始化参数</li>
<li>管理bean的生命周期</li>
</ul>
<blockquote>
<p><strong>什么是Java Bean？</strong></p>
<p>Bean是Java中基本的代码重用单位，是遵守一定约定的Java类。</p>
<ul>
<li>必须是个公有(public)类</li>
<li>有无参构造函数</li>
<li>用公共方法暴露内部成员属性(getter,setter)</li>
</ul>
<p>在Spring中，Bean就是普通的Java类，由Spring IoC容器实例化、组装、管理。</p>
</blockquote>
<p>Spring提供了两种类型的IOC容器实现：</p>
<ul>
<li><code>BeanFactory</code>：IOC容器的基本实现,是Spring框架的基础设施，面向Spring本身。</li>
<li><code>ApplicationContext</code>:提供了更多的高级特性，是<code>BeanFactory</code>的子接口.面向使用Spring框架的开发者，几乎所有场合都直接使用<code>ApplicationContext</code>而非<code>BeanFactory</code>。</li>
</ul>
<p><code>ApplicationContext</code>初始化时实例化所有的Bean，主要实现类如下</p>
<p><img src="/images/1545965390369.png" alt="1545965390369"></p>
<ul>
<li><code>ClassPathXmlApplicationContext</code>从类路径下加载配置文件。</li>
<li><code>FileSystemXmlApplicationContext</code>从文件系统中加载配置文件。</li>
</ul>
<p><code>ConfigurableApplicationContext</code> extends <code>ApplicationContext</code>，主要新增了refresh()和close()方法，让ApplicationContext具有启动、刷新和关闭上下文的能力。</p>
<blockquote>
<p>创建ApplicationContext</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">HelloWorld obj = (HelloWorld) context.getBean(<span class="string">"helloWorld"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Spring-HelloWorld"><a href="#Spring-HelloWorld" class="headerlink" title="Spring HelloWorld"></a><strong>Spring HelloWorld</strong></h2><blockquote>
<p>创建POJO(Customer.java)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置元数据(beans.xml)</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.wusuiwei.spring.helloworld.Customer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"男"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>加载配置文件(beans.xml)与POJO(Customer.java)，通过ioc容器获取bean对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过ClassPathXmlApplicationContext加载上下文</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        <span class="comment">//从上下文中获取相应的bean对象</span></span><br><span class="line">        Customer customer = (Customer) context.getBean(<span class="string">"customer"</span>);</span><br><span class="line">        System.out.println(customer.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<code>Customer(id=1, name=张三, gender=男)</code></p>
</blockquote>
<h1 id="Spring-Bean-Configuration"><a href="#Spring-Bean-Configuration" class="headerlink" title="Spring Bean Configuration"></a>Spring Bean Configuration</h1><h2 id="XML-based-Configuration"><a href="#XML-based-Configuration" class="headerlink" title="XML-based Configuration"></a>XML-based Configuration</h2><h3 id="Bean-Definition"><a href="#Bean-Definition" class="headerlink" title="Bean Definition"></a>Bean Definition</h3><ul>
<li>构造器实例化</li>
</ul>
<blockquote>
<p>Java Bean（Car.java)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wusuiwei.spring.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>xml配置（beans.xml)</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--无参构造器创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.wusuiwei.spring.ioc.Car"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--有参构造器创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">class</span>=<span class="string">"com.wusuiwei.spring.ioc.Car"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"大众"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"300000"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
</blockquote>
<ul>
<li>实例工厂方法实例化</li>
</ul>
<blockquote>
<p> Java Bean（Car.java)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wusuiwei.spring.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Java Bean Factory(InstanceCarFactory.java)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Car&gt; cars=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InstanceCarFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cars = <span class="keyword">new</span> HashMap&lt;String, Car&gt;();</span><br><span class="line">        cars.put(<span class="string">"Audi"</span>, <span class="keyword">new</span> Car(<span class="string">"Audi"</span>, <span class="number">32000</span>));</span><br><span class="line">        cars.put(<span class="string">"Ford"</span>, <span class="keyword">new</span> Car(<span class="string">"Ford"</span>, <span class="number">40000</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  cars.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置文件（beans.xml)</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--实例工厂方法配置bean--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置实例工厂类实例--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceCarFactory"</span> <span class="attr">class</span>=<span class="string">"com.master.yi.spring.factory.InstanceCarFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	factory-bean:指向实例工厂类的实例</span></span><br><span class="line"><span class="comment">	factory-method：指向实例工厂类的工厂方法</span></span><br><span class="line"><span class="comment">	constructor-arg：如果工厂方法需要传参，则使用constructor-arg传入参数</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">factory-bean</span>=<span class="string">"instanceCarFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getCar"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"Ford"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>静态工厂方法实例化</li>
</ul>
<blockquote>
<p> Java Bean（Car.java)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wusuiwei.spring.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Java Bean Factory(StaticCarFactory.java)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticCarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  Map&lt;String,Car&gt; cars= <span class="keyword">new</span> HashMap&lt;String, Car&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        cars.put(<span class="string">"Audi"</span>, <span class="keyword">new</span> Car(<span class="string">"Audi"</span>, <span class="number">32000</span>));</span><br><span class="line">        cars.put(<span class="string">"Ford"</span>, <span class="keyword">new</span> Car(<span class="string">"Ford"</span>, <span class="number">40000</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cars.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置文件（beans.xml)</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--静态工厂方法配置bean--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	class:指向静态工厂类的全类名</span></span><br><span class="line"><span class="comment">	factory-method：指向静态工厂类的工厂方法</span></span><br><span class="line"><span class="comment">	constructor-arg：如果工厂方法需要传参，则使用constructor-arg传入参数</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car1"</span> <span class="attr">class</span>=<span class="string">"com.master.yi.spring.factory.StaticCarFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getCar"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"Audi"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h3><ol>
<li>属性注入</li>
</ol>
<ul>
<li>属性注入即通过Java bean 属性的<code>setter</code>方法注入bean的属性值或依赖的对象。</li>
<li>标签：<code>&lt;property&gt;&lt;/property&gt;</code><ul>
<li><code>name</code>属性：必填，指定bean的属性名</li>
<li><code>value</code>属性/value子节点：赋值</li>
<li><code>ref</code>属性/ref子节点：赋引用值</li>
<li>子标签<code>ref</code>、<code>value</code>、<code>bean</code>、<code>array</code>、<code>list</code>、<code>map</code>、<code>set</code>、<code>null</code>、<code>props</code>、<code>meta</code>、<code>description</code>、<code>idref</code>:指定属性值及其他信息</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.master.yi.spring.Person"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Jacket"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>构造器注入</li>
</ol>
<ul>
<li>通过构造方法注入Bean的属性或依赖的对象，它保证了Bean实力在实例化后就可以使用。</li>
<li>构造方法注入在<code>constructor-org&gt;</code>元素里声明属性，<code>constructor-org&gt;</code>中没有name属性。</li>
<li>标签：<code>&lt;constructor-org&gt;&lt;/constructor-org&gt;</code><ul>
<li><code>type</code>:指定参数的名称</li>
<li><code>index</code>：指定参数的顺序</li>
<li><code>name</code>：指定参数名称</li>
<li><code>value</code>/value子节点:赋值</li>
<li><code>ref</code>/ref子节点：赋引用值</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car3"</span> <span class="attr">class</span>=<span class="string">"com.wusuiwei.spring.ioc.Car"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.Long"</span> <span class="attr">value</span>=<span class="string">"300000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"brand"</span> <span class="attr">value</span>=<span class="string">"奥迪"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>接口注入(xml配置方式不支持)</li>
</ol>
<h3 id="Bean-Autowiring"><a href="#Bean-Autowiring" class="headerlink" title="Bean Autowiring"></a>Bean Autowiring</h3><p>Spring提供了<code>@Autowired</code>注解进行自动装配，可以用于多个地方：</p>
<ul>
<li>setter方法</li>
<li>构造方法</li>
<li>成员属性</li>
<li>任意方法</li>
</ul>
<h3 id="Bean-Definition-Inheritance"><a href="#Bean-Definition-Inheritance" class="headerlink" title="Bean Definition Inheritance"></a>Bean Definition Inheritance</h3><h3 id="Bean-Scope"><a href="#Bean-Scope" class="headerlink" title="Bean Scope"></a>Bean Scope</h3><table>
<thead>
<tr>
<th align="left">Scope</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>singleton</code></td>
<td align="left">(Default) Scopes a single bean definition to a single object instance for each Spring IoC container.</td>
</tr>
<tr>
<td align="left"><code>prototype</code></td>
<td align="left">Scopes a single bean definition to any number of object instances.</td>
</tr>
<tr>
<td align="left"><code>request</code></td>
<td align="left">Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td>
</tr>
<tr>
<td align="left"><code>session</code></td>
<td align="left">Scopes a single bean definition to the lifecycle of an HTTP <code>Session</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td>
</tr>
<tr>
<td align="left"><code>application</code></td>
<td align="left">Scopes a single bean definition to the lifecycle of a <code>ServletContext</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td>
</tr>
<tr>
<td align="left"><code>websocket</code></td>
<td align="left">Scopes a single bean definition to the lifecycle of a <code>WebSocket</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td>
</tr>
</tbody></table>
<p>常用的有<code>singleton</code>、<code>prototype</code></p>
<ul>
<li>singleton` : 默认值，每个容器仅创建一次，并存储在缓存中，后续的请求和应用都得到该实例。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- To specify singleton scope is redundant --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanId"</span> <span class="attr">class</span>=<span class="string">"com.howtodoinjava.BeanClass"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span> /&gt;</span></span><br><span class="line">//or</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanId"</span> <span class="attr">class</span>=<span class="string">"com.howtodoinjava.BeanClass"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>prototype</code>：对该bean的请求都会创建新的实例。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanId"</span> <span class="attr">class</span>=<span class="string">"com.howtodoinjava.BeanClass"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Bean-Life-Cycle"><a href="#Bean-Life-Cycle" class="headerlink" title="Bean Life Cycle"></a>Bean Life Cycle</h3><p>Spring Bean的生命周期从spring容器创建开始，直到最终容器销毁bean。</p>
<h3 id="BeanPostProcessors"><a href="#BeanPostProcessors" class="headerlink" title="BeanPostProcessors"></a>BeanPostProcessors</h3><h2 id="Annotation-based-Configuration"><a href="#Annotation-based-Configuration" class="headerlink" title="Annotation-based Configuration"></a>Annotation-based Configuration</h2><h3 id="Component-Scan"><a href="#Component-Scan" class="headerlink" title="Component Scan"></a>Component Scan</h3><blockquote>
<p><strong>组件扫描</strong></p>
<ol>
<li><p>使用<code>&lt;context:component-scan&gt;</code>标签开启组件扫描配置</p>
<ul>
<li><code>base-pachage</code>属性：spring会自动扫描基类包及其子包下的所有类，多个包可以用逗号分隔- </li>
<li><code>resource-pattern</code>属性：spring会过滤特定的类</li>
<li><code>&lt;context:include-filter&gt;</code>子节点：要包含的目标类</li>
<li><code>&lt;context:exclude-filter&gt;</code>子节点：要排除的目标类</li>
<li><code>&lt;context:include-filter&gt;</code> 和 <code>&lt;context:exclude-filter&gt;</code> 子节点 支持多种类型的过滤表达式：</li>
</ul>
</li>
</ol>
<p><img src="/images/1571818551051.png" alt="1571818551051"></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描`com.wusuiwei.spring` 包及其子包下的所有 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wusuiwei.spring"</span> <span class="attr">resource-pattern</span>=<span class="string">"autowire/*.class"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>常用于标识组件的注解：</p>
<ul>
<li><code>@Componet</code>：  基本注解, 标识了一个受 Spring 管理的组件 </li>
<li><code>@Repository</code>：  标识持久层组件 </li>
<li><code>@Service</code>： 标识服务层(业务层)组件 </li>
<li><code>@Controller</code>： 标识表现层组件 </li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PositionService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"PositionService save..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Component-Autowiring"><a href="#Component-Autowiring" class="headerlink" title="Component Autowiring"></a>Component Autowiring</h3><p><strong>使用 @Autowired自动装配Bean</strong></p>
<p><code>@Autowired</code>注解用法：</p>
<ul>
<li><p>@Autowired 注解自动装配单个Java Bean属性</p>
</li>
<li><p>@Autowired 注解自动装配任意方法的参数</p>
</li>
<li><p>@Authwired 注解也可以应用在<strong>数组类型</strong>的属性上, 此时 Spring 将会把所有匹配的 Bean 进行自动装配.</p>
</li>
<li><p>@Authwired 注解也可以应用在<strong>集合属性</strong>上, 此时 Spring 读取该集合的类型信息, 然后自动装配所有与之兼容的 Bean. </p>
</li>
<li><p>@Authwired 注解用在 <strong>java.util.Map</strong> 上时, 若该 Map 的键值为 String, 那么 Spring 将自动装配与之 Map 值类型兼容的 Bean, 此时 Bean 的名称作为键值</p>
</li>
<li><p>默认情况下, 当 IOC 容器里存在多个类型兼容的 Bean 时, 通过类型的自动装配将无法工作. 此时可以在 <strong>@Qualifier</strong> 注解里提供 Bean 的名称. <strong>Spring 允许对方法的入参标注 @Qualifiter 已指定注入 Bean 的名称</strong>。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">C</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span> <span class="comment">//从成员变量注入</span></span><br><span class="line">	<span class="keyword">private</span> A a;</span><br><span class="line">	<span class="keyword">private</span> B b;</span><br><span class="line">	<span class="keyword">private</span> C c;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span> <span class="comment">//从构造方法注入</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyClass</span><span class="params">(C c)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.c = c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> A <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">(A a)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.a = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> B <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Autowired</span> <span class="comment">//从普通/setter方法注入</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(B b)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.b = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> C <span class="title">getC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setC</span><span class="params">(C c)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.c = c;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Java-based-Configuration"><a href="#Java-based-Configuration" class="headerlink" title="Java-based Configuration"></a>Java-based Configuration</h2>]]></content>
      <categories>
        <category>Spring笔记</category>
      </categories>
      <tags>
        <tag>Spring Core</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC模式</title>
    <url>/2019/11/08/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/MVC%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>MVC模式</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring笔记】框架概述</title>
    <url>/2019/11/08/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Spring%E7%AC%94%E8%AE%B0%E3%80%91%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>Spring框架是分层的Java SE/EE 应用 full-stack 轻量级开源框架。</p>
<p>Spring框架核心特性：<strong>IOC(Inverse Of Control)</strong> 和 <strong>AOP(Aspect Oriented Programming)</strong>。</p>
<blockquote>
<p> <strong>JEE – Java Enterprise Edition / Java企业版</strong><br> 主要用于开发企业软件的Java版本。企业软件例子：会计软件、帐单管理、业务流程管理、CMS、CRM、ERP等。 </p>
</blockquote>
<p>Spring框架的优势：</p>
<ul>
<li>方便解耦，简化开发 （高内聚低耦合） </li>
<li>AOP编程的支持</li>
<li>声明式事务的支持</li>
<li>方便程序的测试</li>
<li>方便集成各种优秀框架</li>
<li>降低JavaEE API的使用难度</li>
</ul>
<a id="more"></a>

<hr>
<h2 id="Spring框架体系结构"><a href="#Spring框架体系结构" class="headerlink" title="Spring框架体系结构"></a>Spring框架体系结构</h2><p>Spring框架大概由20个模块组成，可分为几个大的层次：核心容器、数据访问、集成、Web、AOP（面向切面编程）、工具和测试等，如下图所示。 </p>
<p><img src="/images/spring-overview.png" alt="Spring5 overview"></p>
<h2 id="Spring框架之HelloWorld-IDEA版本"><a href="#Spring框架之HelloWorld-IDEA版本" class="headerlink" title="Spring框架之HelloWorld(IDEA版本)"></a>Spring框架之HelloWorld(IDEA版本)</h2><ol>
<li><strong>引入依赖</strong></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring-beans --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok 简化JavaBean开发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建Java Bean</li>
</ol>
<p>Customer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wusuiwei.spring.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建Bean的xml装配文件</li>
</ol>
<p>applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.wusuiwei.spring.helloworld.Customer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"男"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建主类，运行查看结果</li>
</ol>
<p>HelloWorld.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wusuiwei.spring.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Customer customer = (Customer) context.getBean(<span class="string">"customer"</span>);</span><br><span class="line">        System.out.println(customer.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><code>Customer(id=1, name=张三, gender=男)</code></p>
]]></content>
      <categories>
        <category>Spring笔记</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>【每日英语】The Unbearable Lightness of Being</title>
    <url>/2019/11/08/07_%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/%E3%80%90%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD%E3%80%912019-11-8/</url>
    <content><![CDATA[<p> 没有任何办法可以检验何种选择更好我们经历着生活中突然临头的一切，毫无防备，就像演员进入初排如果生活的第一排练便是生活本身，那生活有什么价值呢？ </p>
<hr>
<a id="more"></a>

<p>If eternal return is the heaviest of burdens, then our lives can stand out against it in all their splendid lightness. But, is heaviness truly deplorable and lightness splendid? The heaviest of burdens crushes us. We sink beneath it. It pins us to the ground. The heaviest of burdens is, therefore, simultaneously an image of life’s most intense fulfillment. The heavier the burden, the closer our lives come to the earth; the more real and truthful they become.</p>
<p>Conversely, the absolute absence of a burden causes man to be lighter than air, to soar into the heights. Take leave of the earth and his earthly being and become only half real. His movements as free as they are insignificant. What then shall we choose; weight or lightness?</p>
<p>I have been thinking about Tomas for many years. But only in the light of these reflections did I see him clearly. I saw him standing at the window of his flat and looking across the courtyard at the opposite walls not knowing what to do.</p>
<p>He had first met Tereza about three weeks earlier in a small Czech town. They had spent scarcely an hour together. She had accompanied him to the station and waited with him until he boarded the train. Ten days later she paid him a visit. They made love the day she arrived. That night she came down with a fever and stayed a whole week in his flat with the flu. He had come to feel an in-explicable love for this all but complete stranger. She seemed a child to him, a child someone had put in a bulrush basket docked with pitch and sent downstream for Tomas to fetch under the riverbank of his bed.</p>
<p>He knelt down next to her. Her feverous breath quickened and she gave out a weak moan. He pressed his face to hers and whispered calming words into her sleep. And all at once he fancied she had been with him for many years and was dying. He had a sudden clear feeling that he would not survive her death. He would lie down beside her and want to die with her. He pressed his face into the pillow beside her head and kept it there for a long time.</p>
<p>Now he was standing at the window trying to call that moment to account. What could it have been if not love declaring itself to him? But was it love? The feeling of wanting to die beside her was clearly exaggerated; he had seen her only once before in his life. Was it simply the hysteria of a man who aware deep down of his inaptitude for love, felt the self-deluding need to simulate it? His unconscious was so cowardly that the best partner he could choose for his life comedy was this miserable provincial waitress with practically no chance at all to enter his life.</p>
<p>He remained annoyed with himself until he realized that not knowing what he really wanted was actually quite natural. We can never know what to want because, living only one life, we can neither compare it with our previous lives nor perfect it in our lives to come.</p>
<p>There is no means of testing which decision is better because there is no basis for comparison. We live even-thing as it comes. Without warming, like an actor going on cold. And what can life be worth if the first rehearsal for life is life itself?</p>
<p>“Einmal ist keinmal”, says Tomas to himself. What happens but once, says the German adage, might as well not have happened at all. If we have only one life to live, we might as well not have lived at all.</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>【自动化测试】Android自动化测试环境搭建</title>
    <url>/2019/11/07/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<a id="more"></a>

<ol>
<li>安装Android SDK并配置环境变量</li>
</ol>
<p>下载地址：<a href="http://tools.android-studio.org/index.php/sdk/" target="_blank" rel="noopener">http://tools.android-studio.org/index.php/sdk/</a></p>
<p>环境变量配置：</p>
<ul>
<li>ANDROID_HOME：C:\software\airdroid\</li>
<li>Path:%ANDROID_HOME%\platform-tools;%ANDROID_HOME%\tools</li>
</ul>
<ol start="2">
<li>安装node</li>
</ol>
<p>下载地址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p>
<p>校验版本：<code>node -v</code></p>
<ol start="3">
<li>安装appium</li>
</ol>
<p>下载地址：<a href="https://github.com/appium/appium-desktop/releases/tag/v1.15.1" target="_blank" rel="noopener">https://github.com/appium/appium-desktop/releases/tag/v1.15.1</a></p>
<ol start="4">
<li>获取手机参数</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">adb devices <span class="comment">#获取手机devicesName</span></span><br><span class="line">adb install packagesname <span class="comment">#安装应用</span></span><br><span class="line">adb uninstall packagesname <span class="comment">#卸载应用</span></span><br><span class="line">adb shell pm list packages <span class="comment">#查看设备所有包名</span></span><br><span class="line">adb shell pm path packagename <span class="comment">#查看安装包的路径</span></span><br><span class="line">adb shell pull packagepath <span class="comment">#包pull到本地</span></span><br><span class="line">adb shell dumpsys window windows|findstr <span class="string">"mCurrent"</span> <span class="comment">#获取当前窗口活动</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>Android自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>【自动化测试】测试报告生成</title>
    <url>/2019/11/07/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<p>这里汇集了使用到的所有测试报告生成方法。</p>
<ul>
<li>IDEA+Maven+TestNG+ReportNG 生成测试报告</li>
</ul>
<a id="more"></a>

<h3 id="IDEA-Maven-TestNG-ReportNG-生成测试报告"><a href="#IDEA-Maven-TestNG-ReportNG-生成测试报告" class="headerlink" title="IDEA+Maven+TestNG+ReportNG 生成测试报告"></a>IDEA+Maven+TestNG+ReportNG 生成测试报告</h3><p>1.新建maven项目</p>
<p>2.项目文件下添加TestNG配置文件</p>
<p><img src="/images/image-20191122003725162.png" alt="image-20191122003725162"></p>
<p>3.添加testng及reportng依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>       </span><br><span class="line">    <span class="comment">&lt;!-- 添加testNG依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加reportNG依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.uncommons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reportng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 排除testNG依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.inject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加插件,添加ReportNg的监听器，修改最后的TestNg的报告 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">suiteXmlFiles</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 配置 testng.xml 位置，相对位置从当前项目根目录算起--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">suiteXmlFile</span>&gt;</span>testNG.xml<span class="tag">&lt;/<span class="name">suiteXmlFile</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">suiteXmlFiles</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">name</span>&gt;</span>usedefaultlisteners<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">name</span>&gt;</span>listener<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.uncommons.reportng.HTMLReporter,  org.uncommons.reportng.JUnitXMLReporter<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">workingDirectory</span>&gt;</span>target/<span class="tag">&lt;/<span class="name">workingDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">forkMode</span>&gt;</span>always<span class="tag">&lt;/<span class="name">forkMode</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.运行maven test</p>
<p>5.浏览器中查看<code>target/surefire-reports/html/index.html</code>文件</p>
<p><img src="/images/image-20191122004202038.png" alt="image-20191122004202038"></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>【设计模式】适配器模式</title>
    <url>/2019/11/07/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<a id="more"></a>

]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
  </entry>
  <entry>
    <title>【Hydrogen-ui】Vue.js 环境准备（IDEA）</title>
    <url>/2019/11/07/04_%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0/%E3%80%90Hydrogen-ui%E3%80%91Vue.js%20%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87%EF%BC%88IDEA%EF%BC%89/</url>
    <content><![CDATA[<p>记录了IDEA下编辑Vue.js 代码的配置</p>
<a id="more"></a>

<ol>
<li>添加”vue.js”插件</li>
</ol>
<p><img src="/images/1574915669322.png" alt="1574915669322"></p>
<ol start="2">
<li>配置支持 ECMAScript 6</li>
</ol>
<p><img src="/images/1574915705512.png" alt="1574915705512"></p>
<ol start="3">
<li>搭建Vue项目</li>
</ol>
<p><img src="/images/20190509180042603.png" alt="img"></p>
<p><img src="/images/20190509180056736.png" alt="img"></p>
<p><img src="/images/20190509180117154.png" alt="img"></p>
<ol start="4">
<li>安装 Vue脚手架</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -g vue-cli</span><br></pre></td></tr></table></figure>

<p>验证是否安装成功：<code>vue -V</code></p>
<p><strong>npm下载慢的问题</strong>：添加国内镜像。</p>
<p>临时使用:<code>npm --registry https://registry.npm.taobao.org install express</code></p>
<p>持久使用:<code>npm config set registry https://registry.npm.taobao.org</code></p>
<p>验证是否配置成功：<code>npm config get registry</code>或<code>npm info express</code></p>
<ol start="5">
<li>项目初始化</li>
</ol>
<p>切换到项目的上级目录，执行：<code>vue init webpack demo</code></p>
<ol start="6">
<li>运行项目</li>
</ol>
<p>运行项目：<code>npm run dev</code></p>
<ol start="7">
<li>验证项目是否运行成功：localhost:8080</li>
</ol>
<p><img src="/images/1574918874140.png" alt="1574918874140"></p>
<hr>
<ul>
<li><strong>webpack</strong> ：一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)</em>。</li>
</ul>
]]></content>
      <categories>
        <category>项目笔记</category>
      </categories>
      <tags>
        <tag>hydrogen</tag>
        <tag>hydrogen-ui-master</tag>
      </tags>
  </entry>
  <entry>
    <title>【设计模式】单例模式</title>
    <url>/2019/11/07/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p> 单例模式(Singleton Pattern)：单例模式确保某一个类只有一个实例，并提供一个访问它的全剧访问点。 </p>
</blockquote>
<img src="/images/singleton-pattern.png" height="50%" width="50%" />

<a id="more"></a>]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
        <tag>Singleton Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>【设计模式】建造者模式</title>
    <url>/2019/11/07/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<a id="more"></a>

]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
        <tag>Builder Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>【设计模式】抽象工厂模式</title>
    <url>/2019/11/07/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<a id="more"></a>

]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
  </entry>
  <entry>
    <title>【设计模式】面向对象设计原则</title>
    <url>/2019/11/07/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<a id="more"></a>]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
        <tag>Design Principles</tag>
      </tags>
  </entry>
  <entry>
    <title>【设计模式】工厂方法模式</title>
    <url>/2019/11/07/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<a id="more"></a>

]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
        <tag>Factory Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>【设计模式】概述</title>
    <url>/2019/11/07/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[ <img src="/images/Java-Design-Patterns.png" width="60%" height="30%">

<a id="more"></a>

<h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><table>
<thead>
<tr>
<th>类模式</th>
<th>工厂方法</th>
<th>(类）适配器</th>
<th>模板方法<br />解释器</th>
</tr>
</thead>
<tbody><tr>
<td>范围\目的</td>
<td>创建型模式</td>
<td>结构型模式</td>
<td>行为型模式</td>
</tr>
<tr>
<td>对象模式</td>
<td>单例<br />原型<br />抽象工厂 <br />建造者</td>
<td>代理 <br />(对象）适配器<br />桥接<br />装饰<br />外观<br />享元<br />组合</td>
<td>策略<br />命令<br />职责链<br />状态<br />观察者<br />中介者<br />迭代器<br />访问者<br />备忘录</td>
</tr>
</tbody></table>
<h3 id="根据目的分类"><a href="#根据目的分类" class="headerlink" title="根据目的分类"></a>根据目的分类</h3><ul>
<li>创建者模式：用于描述“怎样创建对象”，GoF提供了单例、原型、工厂方法、抽象工厂、建造者等5种创建者模式。</li>
<li>结构型模式：用于描述“如何将类或对象按某种布局组成更大的结构”，GoF提供了代理、适配器、桥接、装饰、外观、享元、组合等7种结构型模式。</li>
<li>行为型模式：用于描述“类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责”，GoF提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等11种行为型模式。</li>
</ul>
<h3 id="根据作用范围分类"><a href="#根据作用范围分类" class="headerlink" title="根据作用范围分类"></a>根据作用范围分类</h3><ul>
<li>类模式：用于“处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻确定下来了”，GoF提供了工厂方法、（类）适配器、模板方法、解释器属于该模式。</li>
<li>对象模式：用于“处理对象之间的关系，这些关系可以通过组合或聚合的关系来实现，在运行时刻是可以变化的，更具动态性”，GoF中除以上4种，其他都是对象模式。</li>
</ul>
]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 学习路线图</title>
    <url>/2019/11/07/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

<p><strong>Java 学习路线图</strong></p>
<ul>
<li>Java核心（10天）<ul>
<li>Java核心语法</li>
<li>Java面向对象核心</li>
<li>集合框架</li>
<li>异常机制</li>
<li>Java常用API</li>
<li>Java泛型、枚举、注解</li>
<li>反射机制</li>
<li>线程、线程通信</li>
<li>网络编程</li>
<li>Java 8 新特性</li>
<li>Java9~13新特性</li>
<li>数据结构与算法</li>
<li>设计模式</li>
<li>集成开发环境的使用</li>
</ul>
</li>
<li>Java与数据库交互（15）<ul>
<li>SQL与PL/SQL的使用</li>
<li>MySQL数据库</li>
<li>数据库事务</li>
<li>存储过程</li>
<li>函数</li>
<li>存储引擎</li>
<li>JDBC</li>
<li>C3P0、Druid数据库连接池</li>
</ul>
</li>
<li>Java Web前后端交互（5）<ul>
<li>Html基础与CSS</li>
<li>JavaScript与Jquery</li>
<li>XML与XML解析</li>
<li>Tomcat服务器安装与配置</li>
<li>Http协议</li>
<li>服务器组件Servlet</li>
<li>JSP</li>
<li>EL表达式</li>
<li>会话控制Cookie与Session</li>
<li>服务器组件Filter</li>
<li>服务器组件Listener</li>
<li>异步数据传输框架Ajax</li>
<li>文件的上传下载</li>
<li>前端框架Bootstrap</li>
</ul>
</li>
<li>Java EE框架（40）<ul>
<li>系统整体分层解耦框架Spring</li>
<li>Spring IOC容器</li>
<li>Spring AOP容器</li>
<li>Spring高级应用</li>
<li>轻量级Web框架SpringMVC</li>
<li>轻量级持久化层框架Mybatis</li>
<li>Mybatis自定义插件开发</li>
<li>反向代码生成器MybatisGenerator</li>
<li>Mybatis增强器Mybatis_Plus</li>
<li>快速集成构建框架SpringBoot</li>
<li>微服务构建框架SpringCloud</li>
<li>服务网关SpringCloudGateway</li>
<li>分布式配置SpringCloudConfig</li>
<li>消息总线SpringCloudBus</li>
<li>客户端负载均衡SpringCloudRibbon</li>
<li>服务熔断与服务降级SpringCloud Hystrix</li>
<li>服务注册与发现SpringCloud Eureka</li>
<li>申明式服务调用SpringCloud Feign</li>
<li>Web安全框架SpringSecurity</li>
<li>分布式Session管理SpringSession</li>
<li>缓存机制</li>
</ul>
</li>
<li>常用工具和环境<ul>
<li>项目构建、jar包管理工具Maven</li>
<li>日志输出Log4j</li>
<li>分布式版本管理工具Git和Github</li>
<li>分布式系统与内存数据库Redis</li>
<li>MySQL集群</li>
<li>服务器操作系统Linux常用操作、进程、线程</li>
<li>Java虚拟机JVM原理、优化</li>
<li>高并发编程工具JUC</li>
<li>命令解析器Shell</li>
<li>Intellij IDEA的使用</li>
</ul>
</li>
<li>Java EE高级<ul>
<li>服务器操作系统Linux常用操作</li>
<li>远程调用技术WebService</li>
<li>企业级现代数据访问技术SpringData</li>
<li>MySQL索引优化与锁</li>
<li>MyCat实现MySQL的分布式、分库分表、读写分离</li>
<li>支付接口调用开发</li>
<li>Nginx反向代理、负载均衡、动静分离</li>
<li>全文索引数据库Solr</li>
<li>分布式构建框架Dubbo</li>
<li>Tomcat性能优化</li>
<li>JVM内存模式、参数调优</li>
<li>Java并发包JUC</li>
</ul>
</li>
<li>互联网架构新技术（5）<ul>
<li>分布式架构中的注册中心Zookeeper</li>
<li>全文检索引擎ElasticSearch</li>
<li>日志收集、转发工具Logstash</li>
<li>用于分析ElasticSearch中数据的可视化平台 Kibana</li>
<li>分布式发布-订阅消息系统Kafka</li>
<li>虚拟化应用容器Docker</li>
<li>大数据分析存储框架Hadoop</li>
<li>数仓仓库工具Hive</li>
<li>MapReduce编程模型</li>
<li>前端技术栈Node.js+Vue.js</li>
<li>消息队列ActiveMQ</li>
<li>消息队列RabbitMQ</li>
<li>消息队列RocketMQ</li>
<li>数据库增量订阅Canal</li>
<li>实时接口文档Swagger2</li>
<li>社交登录SpringSocial</li>
<li>分布式配置、服务发现与注册Nacas</li>
<li>服务熔断Sentinel</li>
<li>分布式事务Seata</li>
</ul>
</li>
<li>大数据技术<ul>
<li>大数据技术概论</li>
<li>Hadoop概述与安装</li>
<li>HDFS伪分布式文件</li>
<li>Hadoop-HA高可用</li>
<li>HDFS完全分布式</li>
<li>Hive入门</li>
</ul>
</li>
</ul>
<hr>
<p><strong>Java 学习路线图</strong>（2020-02-13–2020-05-10）</p>
<p>java基础阶段：（10）</p>
<p>相关工具：linux、IDEA</p>
<ol>
<li><p>java基础：<a href="https://www.bilibili.com/video/av48144058/?spm_id_from=333.788.b_636f6d6d656e74.5" target="_blank" rel="noopener">Java核心技术</a>、<a href="www.bilibili.com/video/av54029771/">java数据结构与算法</a>、<a href="https://www.bilibili.com/video/av57936239/?spm_id_from=333.788.b_636f6d6d656e74.20" target="_blank" rel="noopener">java设计模式</a></p>
</li>
<li><p>JUC：可延后学习</p>
</li>
<li><p>面试题总结</p>
</li>
</ol>
<p>学习指南：</p>
<ol>
<li>学习IO时，同时学习NIO，对比学习；</li>
<li>学习集合时，学习java数据结构与算法，加深印象；</li>
<li>学习linux及idea的使用教程；（1）</li>
</ol>
<p>数据库技术阶段：（15）</p>
<ol>
<li>数据库基础：<a href="www.bilibili.com/video/av21400736/">MySQL基础</a>、<a href="https://www.bilibili.com/video/av21334868/?spm_id_from=333.788.b_636f6d6d656e74.37" target="_blank" rel="noopener">MySQL高级</a>）–(5)</li>
<li>数据架构相关：<a href="https://www.bilibili.com/video/av80469766/?spm_id_from=333.788.b_636f6d6d656e74.54" target="_blank" rel="noopener">Mycat</a>可延后学习</li>
<li>框架：Mybatis、Mybatisplus、通用Mapper、hibernate、jpa、springdata–(10)</li>
</ol>
<p>Web基础：（10）</p>
<ol>
<li>基础：javascript、css、html、XML（2）</li>
<li>Java Web基础：servlet/jsp、mvc、cookie、session、EL表达式、简单标签、JSTL表达式、Fileter/Listener、文件上传下载、国际化（3）</li>
<li>项目实战（5）</li>
</ol>
<p>Java EE：（30）</p>
<p>Spring–&gt;SpringMVC–&gt;SpringBoot–&gt;SpringCloud</p>
<p>MySQL基础–&gt;MySQL高级–&gt;MyCAT</p>
<p>Mybatis–&gt;Mybatisplus–&gt;通用mapper</p>
<p>hibernate–&gt;Jpa–&gt;SpringData Jpa</p>
<p>Redis</p>
<p>常用工具：Docker、Nginx、Jenkins、git、maven</p>
<p>SSM项目实战：（30）</p>
<p>面试阶段：（10）</p>
<p>数据库技术：</p>
<ul>
<li>MySQL–&gt;JDBC–&gt;Mybatis（MP等）–&gt;hibernate–&gt;SpringData</li>
<li>redis</li>
</ul>
<p>Web开发框架：Spring–&gt;SpringMVC–&gt;SpringBoot–&gt;SpringCloud(或Dubbo)</p>
<p>框架整合：SSM、SSP等。</p>
<p>常用工具：</p>
<ul>
<li>maven</li>
<li>docker</li>
<li>linux</li>
<li>tomcat</li>
<li>jenkins</li>
<li>nginx</li>
<li>git&amp;github</li>
</ul>
<p>思维训练：</p>
<ul>
<li>设计模式</li>
<li>数据结构与算法</li>
</ul>
<p>前端技术：html–&gt;css–&gt;javascript–&gt;jQuery–&gt;Ajax–&gt;Vue</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>【JPA】简介及HelloWorld</title>
    <url>/2018/10/06/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/JPA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90JPA%E3%80%91%E7%AE%80%E4%BB%8B%E5%8F%8AHelloWorld/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>JPA</tag>
        <tag>HelloWorld</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式学习笔记</title>
    <url>/2018/09/25/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

<h1 id="设计模式的七大原则"><a href="#设计模式的七大原则" class="headerlink" title="设计模式的七大原则"></a>设计模式的七大原则</h1><h1 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h1><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot学习笔记</title>
    <url>/2018/06/30/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20Boot%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

<h3 id="SpringBoot-与-数据访问"><a href="#SpringBoot-与-数据访问" class="headerlink" title="SpringBoot 与 数据访问"></a>SpringBoot 与 数据访问</h3><h4 id="集成JDBC"><a href="#集成JDBC" class="headerlink" title="集成JDBC"></a>集成JDBC</h4>]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo框架学习总结</title>
    <url>/2018/06/15/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Dubbo%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Dubbo%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>Reids</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 学习笔记</title>
    <url>/2018/06/15/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Git%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p><strong>Git</strong> 是目前最先进的<strong>分布式版本控制系统</strong>。</p>
<p>官方地址： <a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p>
<p>用户文档：<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2</a></p>
<p><strong>安装环境：CentOS 8</strong></p>
<p><strong>安装版本：2.29.1</strong></p>
<a id="more"></a>

<h3 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h3><blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> CentOS 8 安装</span></span><br><span class="line">sudo dnf install git-all</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查安装是否成功</span></span><br><span class="line">git --version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置用户信息</span></span><br><span class="line">git config --global user.name "John Doe"</span><br><span class="line">git config --global user.email johndoe@example.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查配置信息</span></span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">生成 SSH 公钥</span></span><br><span class="line">cd ~/.ssh # 查看是否已生成公钥</span><br><span class="line">ssh-keygen -o # 生成公钥</span><br><span class="line">cat ~/.ssh/id_rsa.pub # 查看ssh公钥</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="Git-本地工作流程"><a href="#Git-本地工作流程" class="headerlink" title="Git 本地工作流程"></a>Git 本地工作流程</h3><h3 id="Git-Flow-工作流程"><a href="#Git-Flow-工作流程" class="headerlink" title="Git Flow 工作流程"></a>Git Flow 工作流程</h3>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus学习笔记</title>
    <url>/2018/06/15/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Mybatis%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MybatisPlus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>Mybatis-Plus（简称MP）是一个Mybatis的增强工具包，只做增强不做改变，为简化开发工作、提高生产率而生。</p>
<p>我们的愿景是成为Mybatis最好的搭档，就像魂斗罗中的1P、2P，基友搭配，效率翻倍。</p>
<a id="more"></a>

<h3 id="Mybatis-Plus简介"><a href="#Mybatis-Plus简介" class="headerlink" title="Mybatis-Plus简介"></a>Mybatis-Plus简介</h3><p>官方地址： <a href="https://mp.baomidou.com/" target="_blank" rel="noopener">https://mp.baomidou.com/</a> </p>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul>
<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>
<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>
<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>
<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>
<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>
<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>
<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>
<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>
<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>
<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>
<li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>
<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>
</ul>
<h4 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h4><p> <img src="https://mybatis.plus/img/mybatis-plus-framework.jpg" alt="framework"> </p>
<h3 id="SpringBoot集成Mybatis-Plus"><a href="#SpringBoot集成Mybatis-Plus" class="headerlink" title="SpringBoot集成Mybatis-Plus"></a>SpringBoot集成Mybatis-Plus</h3><h3 id="CRUD接口"><a href="#CRUD接口" class="headerlink" title="CRUD接口"></a>CRUD接口</h3><h4 id="Service-CRUD接口"><a href="#Service-CRUD接口" class="headerlink" title="Service CRUD接口"></a>Service CRUD接口</h4><h4 id="Mapper-CRUD接口"><a href="#Mapper-CRUD接口" class="headerlink" title="Mapper CRUD接口"></a>Mapper CRUD接口</h4><h3 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h3><h3 id="插件拓展"><a href="#插件拓展" class="headerlink" title="插件拓展"></a>插件拓展</h3><h4 id="mybatis插件机制"><a href="#mybatis插件机制" class="headerlink" title="mybatis插件机制"></a>mybatis插件机制</h4><h4 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h4><h4 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h4>]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 学习总结</title>
    <url>/2018/06/15/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Redis%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Redis%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>本文主要介绍 Redis 相关基础知识。主要包括以下内容：</p>
<ul>
<li>Redis 数据结构</li>
<li>Redis 配置文件</li>
<li>Redis 持久化</li>
<li>Redis 事务</li>
<li>Redis 订阅发布</li>
<li>Redis 主从复制</li>
<li>Jedis的使用</li>
</ul>
<a id="more"></a>

<h3 id="Redis-概要"><a href="#Redis-概要" class="headerlink" title="Redis 概要"></a>Redis 概要</h3><h4 id="Redis介绍"><a href="#Redis介绍" class="headerlink" title="Redis介绍"></a>Redis介绍</h4><p>官网： <a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a> </p>
<p>中文网站：  <a href="https://www.redis.net.cn/" target="_blank" rel="noopener">https://www.redis.net.cn/</a> </p>
<p>命令参考： <a href="http://redisdoc.com/index.html" target="_blank" rel="noopener">http://redisdoc.com/index.html</a> </p>
<p><strong>Redis</strong>（REmote DIctionary Server）是一个开源的高性能的key-value存储系统。具有以下特点：</p>
<ul>
<li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li>
<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，sorted set，hash等数据结构的存储。</li>
<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>
<li>优势：<ul>
<li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li>
<li>丰富的数据类型 – Redis支持二进制案例的 String, List, Hash, Set 及 Sorted Set 数据类型操作。</li>
<li>原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。</li>
<li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性</li>
</ul>
</li>
</ul>
<h4 id="Redis-使用场景"><a href="#Redis-使用场景" class="headerlink" title="Redis 使用场景"></a>Redis 使用场景</h4><h4 id="基于Docker安装Redis"><a href="#基于Docker安装Redis" class="headerlink" title="基于Docker安装Redis"></a><strong>基于Docker安装Redis</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建并运行一个名为 myredis 的容器</span></span><br><span class="line">docker run \</span><br><span class="line">--restart=always #开机启动容器</span><br><span class="line">-d #后台运行</span><br><span class="line">-p 6379:6379 \ # 端口映射 宿主机:容器</span><br><span class="line">-v /data/redis/data:/data:rw \ # 映射数据目录 rw 为读写</span><br><span class="line">-v /data/redis/conf/redis.conf:/etc/redis/redis.conf:ro \ # 挂载配置文件 ro 为readonly</span><br><span class="line">--privileged=true \ # 给与容器内的root用户root权限，否则只有外部普通用户权限</span><br><span class="line">--name myredis redis redis-server /etc/redis/redis.conf # 容器名字 redis实例名 配置文件</span><br><span class="line">--appendonly yes #开启持久化</span><br></pre></td></tr></table></figure>

<h4 id="redis-客户端"><a href="#redis-客户端" class="headerlink" title="redis 客户端"></a>redis 客户端</h4><p>在redis server上执行命令，需要安装redis客户端。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">本地redis服务器</span></span><br><span class="line">redis-cli</span><br><span class="line"><span class="meta">#</span><span class="bash">远程redis服务器：redis-cli -h host -p port -a password</span></span><br><span class="line">redis-cli -h 127.0.0.1 -p 6379 -a "mypass"</span><br></pre></td></tr></table></figure>

<h3 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h3><p> <strong>key</strong>的类型只能为字符串，<strong>value</strong>支持五种数据类型：字符串、列表、集合、散列表、有序集合。 </p>
<h4 id="Redis-key"><a href="#Redis-key" class="headerlink" title="Redis key"></a>Redis key</h4><p>基本命令如下：</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.redis.net.cn/order/3543.html" target="_blank" rel="noopener">Redis Type 命令</a></td>
<td align="left">返回 key 所储存的值的类型。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3533.html" target="_blank" rel="noopener">Redis PEXPIREAT 命令</a></td>
<td align="left">设置 key 的过期时间亿以毫秒计。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3534.html" target="_blank" rel="noopener">Redis PEXPIREAT 命令</a></td>
<td align="left">设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3541.html" target="_blank" rel="noopener">Redis Rename 命令</a></td>
<td align="left">修改 key 的名称</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3537.html" target="_blank" rel="noopener">Redis PERSIST 命令</a></td>
<td align="left">移除 key 的过期时间，key 将持久保持。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3536.html" target="_blank" rel="noopener">Redis Move 命令</a></td>
<td align="left">将当前数据库的 key 移动到给定的数据库 db 当中。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3540.html" target="_blank" rel="noopener">Redis RANDOMKEY 命令</a></td>
<td align="left">从当前数据库中随机返回一个 key 。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3529.html" target="_blank" rel="noopener">Redis Dump 命令</a></td>
<td align="left">序列化给定 key ，并返回被序列化的值。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3539.html" target="_blank" rel="noopener">Redis TTL 命令</a></td>
<td align="left">以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3531.html" target="_blank" rel="noopener">Redis Expire 命令</a></td>
<td align="left">seconds 为给定 key 设置过期时间。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3528.html" target="_blank" rel="noopener">Redis DEL 命令</a></td>
<td align="left">该命令用于在 key 存在是删除 key。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3538.html" target="_blank" rel="noopener">Redis Pttl 命令</a></td>
<td align="left">以毫秒为单位返回 key 的剩余的过期时间。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3542.html" target="_blank" rel="noopener">Redis Renamenx 命令</a></td>
<td align="left">仅当 newkey 不存在时，将 key 改名为 newkey 。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3530.html" target="_blank" rel="noopener">Redis EXISTS 命令</a></td>
<td align="left">检查给定 key 是否存在。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3532.html" target="_blank" rel="noopener">Redis Expireat 命令</a></td>
<td align="left">EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3535.html" target="_blank" rel="noopener">Redis Keys 命令</a></td>
<td align="left">查找所有符合给定模式( pattern)的 key 。</td>
</tr>
</tbody></table>
<h4 id="Redis-value"><a href="#Redis-value" class="headerlink" title="Redis value"></a>Redis value</h4><p><strong>value</strong> 支持的数据类型有：字符串、列表、集合、散列表、有序集合。</p>
<h5 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h5><p><strong>Redis String</strong> 可存储的类型有字符串、整数或者浮点数。</p>
<p>常用命令如下：</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.redis.net.cn/order/3552.html" target="_blank" rel="noopener">Redis Setnx 命令</a></td>
<td align="left">只有在 key 不存在时设置 key 的值。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3546.html" target="_blank" rel="noopener">Redis Getrange 命令</a></td>
<td align="left">返回 key 中字符串值的子字符</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3555.html" target="_blank" rel="noopener">Redis Mset 命令</a></td>
<td align="left">同时设置一个或多个 key-value 对。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3551.html" target="_blank" rel="noopener">Redis Setex 命令</a></td>
<td align="left">将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3544.html" target="_blank" rel="noopener">Redis SET 命令</a></td>
<td align="left">设置指定 key 的值</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3545.html" target="_blank" rel="noopener">Redis Get 命令</a></td>
<td align="left">获取指定 key 的值。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3548.html" target="_blank" rel="noopener">Redis Getbit 命令</a></td>
<td align="left">对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3550.html" target="_blank" rel="noopener">Redis Setbit 命令</a></td>
<td align="left">对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3561.html" target="_blank" rel="noopener">Redis Decr 命令</a></td>
<td align="left">将 key 中储存的数字值减一。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3562.html" target="_blank" rel="noopener">Redis Decrby 命令</a></td>
<td align="left">key 所储存的值减去给定的减量值（decrement） 。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3554.html" target="_blank" rel="noopener">Redis Strlen 命令</a></td>
<td align="left">返回 key 所储存的字符串值的长度。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3556.html" target="_blank" rel="noopener">Redis Msetnx 命令</a></td>
<td align="left">同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3559.html" target="_blank" rel="noopener">Redis Incrby 命令</a></td>
<td align="left">将 key 所储存的值加上给定的增量值（increment） 。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3560.html" target="_blank" rel="noopener">Redis Incrbyfloat 命令</a></td>
<td align="left">将 key 所储存的值加上给定的浮点增量值（increment） 。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3553.html" target="_blank" rel="noopener">Redis Setrange 命令</a></td>
<td align="left">用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3557.html" target="_blank" rel="noopener">Redis Psetex 命令</a></td>
<td align="left">这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3563.html" target="_blank" rel="noopener">Redis Append 命令</a></td>
<td align="left">如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3547.html" target="_blank" rel="noopener">Redis Getset 命令</a></td>
<td align="left">将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3549.html" target="_blank" rel="noopener">Redis Mget 命令</a></td>
<td align="left">获取所有(一个或多个)给定 key 的值。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3558.html" target="_blank" rel="noopener">Redis Incr 命令</a></td>
<td align="left">将 key 中储存的数字值增一。</td>
</tr>
</tbody></table>
<h5 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h5><p><strong>Redis List</strong> 可存储列表，按照插入顺序排序。</p>
<p><strong>使用场景：微博 TimeLine、消息队列</strong> </p>
<p>常见命令如下：</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.redis.net.cn/order/3580.html" target="_blank" rel="noopener">Redis Lindex 命令</a></td>
<td align="left">通过索引获取列表中的元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3592.html" target="_blank" rel="noopener">Redis Rpush 命令</a></td>
<td align="left">在列表中添加一个或多个值</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3586.html" target="_blank" rel="noopener">Redis Lrange 命令</a></td>
<td align="left">获取列表指定范围内的元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3591.html" target="_blank" rel="noopener">Redis Rpoplpush 命令</a></td>
<td align="left">移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3577.html" target="_blank" rel="noopener">Redis Blpop 命令</a></td>
<td align="left">移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3578.html" target="_blank" rel="noopener">Redis Brpop 命令</a></td>
<td align="left">移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3579.html" target="_blank" rel="noopener">Redis Brpoplpush 命令</a></td>
<td align="left">从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3587.html" target="_blank" rel="noopener">Redis Lrem 命令</a></td>
<td align="left">移除列表元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3582.html" target="_blank" rel="noopener">Redis Llen 命令</a></td>
<td align="left">获取列表长度</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3589.html" target="_blank" rel="noopener">Redis Ltrim 命令</a></td>
<td align="left">对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3583.html" target="_blank" rel="noopener">Redis Lpop 命令</a></td>
<td align="left">移出并获取列表的第一个元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3585.html" target="_blank" rel="noopener">Redis Lpushx 命令</a></td>
<td align="left">将一个或多个值插入到已存在的列表头部</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3581.html" target="_blank" rel="noopener">Redis Linsert 命令</a></td>
<td align="left">在列表的元素前或者后插入元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3590.html" target="_blank" rel="noopener">Redis Rpop 命令</a></td>
<td align="left">移除并获取列表最后一个元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3588.html" target="_blank" rel="noopener">Redis Lset 命令</a></td>
<td align="left">通过索引设置列表元素的值</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3584.html" target="_blank" rel="noopener">Redis Lpush 命令</a></td>
<td align="left">将一个或多个值插入到列表头部</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3593.html" target="_blank" rel="noopener">Redis Rpushx 命令</a></td>
<td align="left">为已存在的列表添加值</td>
</tr>
</tbody></table>
<h5 id="散列表（Hash）"><a href="#散列表（Hash）" class="headerlink" title="散列表（Hash）"></a>散列表（Hash）</h5><p><strong>Redis Hash</strong>是键值对集合，特别适合存储对象。</p>
<p><strong>使用场景：</strong> <strong>存储、读取、修改用户属性</strong> </p>
<p>常见命令如下：</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.redis.net.cn/order/3573.html" target="_blank" rel="noopener">Redis Hmset 命令</a></td>
<td align="left">同时将多个 field-value (域-值)对设置到哈希表 key 中。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3572.html" target="_blank" rel="noopener">Redis Hmget 命令</a></td>
<td align="left">获取所有给定字段的值</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3574.html" target="_blank" rel="noopener">Redis Hset 命令</a></td>
<td align="left">将哈希表 key 中的字段 field 的值设为 value 。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3567.html" target="_blank" rel="noopener">Redis Hgetall 命令</a></td>
<td align="left">获取在哈希表中指定 key 的所有字段和值</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3566.html" target="_blank" rel="noopener">Redis Hget 命令</a></td>
<td align="left">获取存储在哈希表中指定字段的值/td&gt;</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3565.html" target="_blank" rel="noopener">Redis Hexists 命令</a></td>
<td align="left">查看哈希表 key 中，指定的字段是否存在。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3568.html" target="_blank" rel="noopener">Redis Hincrby 命令</a></td>
<td align="left">为哈希表 key 中的指定字段的整数值加上增量 increment 。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3571.html" target="_blank" rel="noopener">Redis Hlen 命令</a></td>
<td align="left">获取哈希表中字段的数量</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3564.html" target="_blank" rel="noopener">Redis Hdel 命令</a></td>
<td align="left">删除一个或多个哈希表字段</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3576.html" target="_blank" rel="noopener">Redis Hvals 命令</a></td>
<td align="left">获取哈希表中所有值</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3569.html" target="_blank" rel="noopener">Redis Hincrbyfloat 命令</a></td>
<td align="left">为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3570.html" target="_blank" rel="noopener">Redis Hkeys 命令</a></td>
<td align="left">获取所有哈希表中的字段</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3575.html" target="_blank" rel="noopener">Redis Hsetnx 命令</a></td>
<td align="left">只有在字段 field 不存在时，设置哈希表字段的值。</td>
</tr>
</tbody></table>
<h5 id="集合（Set）"><a href="#集合（Set）" class="headerlink" title="集合（Set）"></a>集合（Set）</h5><p><strong>Redis Set</strong> 可存储 string类型的无序集合，集合成员是唯一的，不能重复。</p>
<p><strong>使用场景：1.共同好友、二度好友 2.利用唯一性，可以统计访问网站的所有独立 IP 3.好友推荐的时候，根据 tag 求交集，大于某个 threshold 就可以推荐</strong></p>
<p>常见命令如下：</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.redis.net.cn/order/3606.html" target="_blank" rel="noopener">Redis Sunion 命令</a></td>
<td align="left">返回所有给定集合的并集</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3595.html" target="_blank" rel="noopener">Redis Scard 命令</a></td>
<td align="left">获取集合的成员数</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3604.html" target="_blank" rel="noopener">Redis Srandmember 命令</a></td>
<td align="left">返回集合中一个或多个随机数</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3601.html" target="_blank" rel="noopener">Redis Smembers 命令</a></td>
<td align="left">返回集合中的所有成员</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3598.html" target="_blank" rel="noopener">Redis Sinter 命令</a></td>
<td align="left">返回给定所有集合的交集</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3605.html" target="_blank" rel="noopener">Redis Srem 命令</a></td>
<td align="left">移除集合中一个或多个成员</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3602.html" target="_blank" rel="noopener">Redis Smove 命令</a></td>
<td align="left">将 member 元素从 source 集合移动到 destination 集合</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3594.html" target="_blank" rel="noopener">Redis Sadd 命令</a></td>
<td align="left">向集合添加一个或多个成员</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3600.html" target="_blank" rel="noopener">Redis Sismember 命令</a></td>
<td align="left">判断 member 元素是否是集合 key 的成员</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3597.html" target="_blank" rel="noopener">Redis Sdiffstore 命令</a></td>
<td align="left">返回给定所有集合的差集并存储在 destination 中</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3596.html" target="_blank" rel="noopener">Redis Sdiff 命令</a></td>
<td align="left">返回给定所有集合的差集</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3608.html" target="_blank" rel="noopener">Redis Sscan 命令</a></td>
<td align="left">迭代集合中的元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3599.html" target="_blank" rel="noopener">Redis Sinterstore 命令</a></td>
<td align="left">返回给定所有集合的交集并存储在 destination 中</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3607.html" target="_blank" rel="noopener">Redis Sunionstore 命令</a></td>
<td align="left">所有给定集合的并集存储在 destination 集合中</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3603.html" target="_blank" rel="noopener">Redis Spop 命令</a></td>
<td align="left">移除并返回集合中的一个随机元素</td>
</tr>
</tbody></table>
<h5 id="有序集合（-Sorted-Set）"><a href="#有序集合（-Sorted-Set）" class="headerlink" title="有序集合（ Sorted Set）"></a>有序集合（ Sorted Set）</h5><p><strong>使用场景：1.带有权重的元素，比如一个游戏的用户得分排行榜 2.比较复杂的数据结构，一般用到的场景不算太多</strong> </p>
<p>常见命令如下：</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.redis.net.cn/order/3625.html" target="_blank" rel="noopener">Redis Zrevrank 命令</a></td>
<td align="left">返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3614.html" target="_blank" rel="noopener">Redis Zlexcount 命令</a></td>
<td align="left">在有序集合中计算指定字典区间内成员数量</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3627.html" target="_blank" rel="noopener">Redis Zunionstore 命令</a></td>
<td align="left">计算给定的一个或多个有序集的并集，并存储在新的 key 中</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3621.html" target="_blank" rel="noopener">Redis Zremrangebyrank 命令</a></td>
<td align="left">移除有序集合中给定的排名区间的所有成员</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3610.html" target="_blank" rel="noopener">Redis Zcard 命令</a></td>
<td align="left">获取有序集合的成员数</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3619.html" target="_blank" rel="noopener">Redis Zrem 命令</a></td>
<td align="left">移除有序集合中的一个或多个成员</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3613.html" target="_blank" rel="noopener">Redis Zinterstore 命令</a></td>
<td align="left">计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3618.html" target="_blank" rel="noopener">Redis Zrank 命令</a></td>
<td align="left">返回有序集合中指定成员的索引</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3612.html" target="_blank" rel="noopener">Redis Zincrby 命令</a></td>
<td align="left">有序集合中对指定成员的分数加上增量 increment</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3617.html" target="_blank" rel="noopener">Redis Zrangebyscore 命令</a></td>
<td align="left">通过分数返回有序集合指定区间内的成员</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3616.html" target="_blank" rel="noopener">Redis Zrangebylex 命令</a></td>
<td align="left">通过字典区间返回有序集合的成员</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3626.html" target="_blank" rel="noopener">Redis Zscore 命令</a></td>
<td align="left">返回有序集中，成员的分数值</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3622.html" target="_blank" rel="noopener">Redis Zremrangebyscore 命令</a></td>
<td align="left">移除有序集合中给定的分数区间的所有成员</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3628.html" target="_blank" rel="noopener">Redis Zscan 命令</a></td>
<td align="left">迭代有序集合中的元素（包括元素成员和元素分值）</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3624.html" target="_blank" rel="noopener">Redis Zrevrangebyscore 命令</a></td>
<td align="left">返回有序集中指定分数区间内的成员，分数从高到低排序</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3620.html" target="_blank" rel="noopener">Redis Zremrangebylex 命令</a></td>
<td align="left">移除有序集合中给定的字典区间的所有成员</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3623.html" target="_blank" rel="noopener">Redis Zrevrange 命令</a></td>
<td align="left">返回有序集中指定区间内的成员，通过索引，分数从高到底</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3615.html" target="_blank" rel="noopener">Redis Zrange 命令</a></td>
<td align="left">通过索引区间返回有序集合成指定区间内的成员</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3611.html" target="_blank" rel="noopener">Redis Zcount 命令</a></td>
<td align="left">计算在有序集合中指定区间分数的成员数</td>
</tr>
<tr>
<td align="left"><a href="https://www.redis.net.cn/order/3609.html" target="_blank" rel="noopener">Redis Zadd 命令</a></td>
<td align="left">向有序集合添加一个或多个成员，或者更新已存在成员的分数</td>
</tr>
</tbody></table>
<h3 id="Redis-配置文件"><a href="#Redis-配置文件" class="headerlink" title="Redis 配置文件"></a>Redis 配置文件</h3><h3 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis 持久化"></a>Redis 持久化</h3><h3 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis 事务"></a>Redis 事务</h3><h3 id="Redis-发布订阅"><a href="#Redis-发布订阅" class="headerlink" title="Redis 发布订阅"></a>Redis 发布订阅</h3><h3 id="Redis-主从复制"><a href="#Redis-主从复制" class="headerlink" title="Redis 主从复制"></a>Redis 主从复制</h3><h3 id="Jedis-的使用"><a href="#Jedis-的使用" class="headerlink" title="Jedis 的使用"></a>Jedis 的使用</h3>]]></content>
      <categories>
        <category>Reids</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Jedis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 笔记之 缓存</title>
    <url>/2018/06/15/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20Boot%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring%20Boot%20%E7%AC%94%E8%AE%B0%E4%B9%8B%20%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

<h3 id="JSR107"><a href="#JSR107" class="headerlink" title="JSR107"></a>JSR107</h3><h3 id="Spring-缓存原理"><a href="#Spring-缓存原理" class="headerlink" title="Spring 缓存原理"></a>Spring 缓存原理</h3>]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>缓存</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringBoot】集成Redis</title>
    <url>/2018/06/15/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20Boot%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90SpringBoot%E3%80%91%E9%9B%86%E6%88%90Redis/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

]]></content>
      <categories>
        <category>Reids</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 笔记之 缓存</title>
    <url>/2018/06/15/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring%20Cloud%20%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD%20/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>缓存</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记</title>
    <url>/2018/06/15/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Spring%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>Spring 框架学习过程中，主要以 <strong>IOC *<em>与 *</em>AOP</strong> 为学习重点，并汇总解答相关的面试题。</p>
<p>官网地址：<a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/index.html" target="_blank" rel="noopener">https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/index.html</a></p>
<p>当前版本：<strong>5.2.6.RELEASE</strong></p>
<a id="more"></a>

<p>[Core](#Spring Core Technologies)                 IoC Container, Events, Resources, i18n, Validation, Data Binding, Type Conversion, SpEL, AOP.</p>
<p>[Data Access](#Spring Data Access)    Transactions, DAO Support, JDBC, O/R Mapping, XML Marshalling.</p>
<p><a href="#Testing">Testing</a>             Mock Objects, TestContext Framework, Spring MVC Test, WebTestClient.</p>
<p>[Web Servlet](#Web Servlet)    Spring MVC, WebSocket, SockJS, STOMP Messaging.</p>
<p>[Web Reactive](#Web Reactive)  Spring WebFlux, WebClient, WebSocket.</p>
<p><a href="#Integration">Integration</a>       Remoting, JMS, JCA, JMX, Email, Tasks, Scheduling, Caching.</p>
<p><a href="#Languages">Languages</a>        Kotlin, Groovy, Dynamic Languages.</p>
<h1 id="Spring框架概述"><a href="#Spring框架概述" class="headerlink" title="Spring框架概述"></a>Spring框架概述</h1><p><strong>Spring框架是分层的Java SE/EE 应用 full-stack 轻量级开源框架。</strong></p>
<p>Spring框架核心特性：<strong>IOC(Inverse Of Control)</strong> 和 <strong>AOP(Aspect Oriented Programming)</strong>。</p>
<blockquote>
<p> <strong>JEE – Java Enterprise Edition / Java企业版</strong><br> 主要用于开发企业软件的Java版本。企业软件例子：会计软件、帐单管理、业务流程管理、CMS、CRM、ERP等。 </p>
</blockquote>
<p>Spring框架的优势：</p>
<ul>
<li>方便解耦，简化开发 （高内聚低耦合） </li>
<li>AOP编程的支持</li>
<li>声明式事务的支持</li>
<li>方便程序的测试</li>
<li>方便集成各种优秀框架</li>
<li>降低JavaEE API的使用难度</li>
</ul>
<p>Spring框架大概由20个模块组成，可分为几个大的层次：核心容器、数据访问、集成、Web、AOP（面向切面编程）、工具和测试等，如下图所示。 </p>
<p><img src="/images/spring-overview.png" alt="Spring5 overview"></p>
<h1 id="Spring-核心技术"><a href="#Spring-核心技术" class="headerlink" title="Spring 核心技术"></a>Spring 核心技术</h1><h2 id="IoC-容器"><a href="#IoC-容器" class="headerlink" title="IoC 容器"></a>IoC 容器</h2><p> <img src="/images/5ab6e3c3c7c024947945a20841bd20ea_498x296.png" alt="The Spring IoC container"></p>
<p>IOC容器通过读取配置元数据（XML配置、Java代码或注解配置）创建、装配、管理Java bean，Spring提供了两种类型的IOC容器实现：</p>
<ul>
<li><code>BeanFactory</code>：IOC容器的基本实现,是Spring框架的基础设施，面向Spring本身。</li>
<li><code>ApplicationContext</code>:提供了更多的高级特性，是<code>BeanFactory</code>的子接口.面向使用Spring框架的开发者，几乎所有场合都直接使用<code>ApplicationContext</code>而非<code>BeanFactory</code>。</li>
</ul>
<p><code>ApplicationContext</code>初始化时实例化所有的Bean，主要实现类如下</p>
<p><img src="/images/1545965390369.png" alt="1545965390369"></p>
<ul>
<li><code>ClassPathXmlApplicationContext</code>从类路径下加载配置文件。</li>
<li><code>FileSystemXmlApplicationContext</code>从文件系统中加载配置文件。</li>
</ul>
<p><code>ConfigurableApplicationContext</code> extends <code>ApplicationContext</code>，主要新增了refresh()和close()方法，让ApplicationContext具有启动、刷新和关闭上下文的能力。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 ApplicationContext</span></span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line"><span class="comment">//获取bean对象</span></span><br><span class="line">HelloWorld obj = (HelloWorld) context.getBean(<span class="string">"helloWorld"</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>什么是Java Bean？</strong></p>
<p>Bean是Java中基本的代码重用单位，是遵守一定约定的Java类。</p>
<ul>
<li>必须是个公有(public)类</li>
<li>有无参构造函数</li>
<li>用公共方法暴露内部成员属性(getter,setter)</li>
</ul>
<p>在Spring中，Bean就是普通的Java类，由Spring IoC容器实例化、组装、管理。</p>
</blockquote>
<h3 id="Bean的配置"><a href="#Bean的配置" class="headerlink" title="Bean的配置"></a>Bean的配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="bean的实例化"><a href="#bean的实例化" class="headerlink" title="bean的实例化"></a>bean的实例化</h4><ul>
<li>通过构造器实例化</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--无参构造器 实例化--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student1"</span> <span class="attr">class</span>=<span class="string">"com.wusuiwei.spring.core.bean.Student"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student2"</span> <span class="attr">class</span>=<span class="string">"com.wusuiwei.spring.core.bean.Student"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过setter方法指定参数值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"a"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--无参构造器 实例化--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student3"</span> <span class="attr">class</span>=<span class="string">"com.wusuiwei.spring.core.bean.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"a"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"man"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wusuiwei.spring.core.bean;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, Integer age, String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", gender='"</span> + gender + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过静态工厂方法实例化</li>
<li>通过实例通常方法实例化</li>
</ul>
<h4 id="bean的命名"><a href="#bean的命名" class="headerlink" title="bean的命名"></a>bean的命名</h4><h4 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h4><h4 id="bean之间的依赖"><a href="#bean之间的依赖" class="headerlink" title="bean之间的依赖"></a>bean之间的依赖</h4><h4 id="bean之间的继承"><a href="#bean之间的继承" class="headerlink" title="bean之间的继承"></a>bean之间的继承</h4><h4 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h4><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><h2 id="Validation"><a href="#Validation" class="headerlink" title="Validation"></a>Validation</h2><h2 id="Data-Binding"><a href="#Data-Binding" class="headerlink" title="Data Binding"></a>Data Binding</h2><h2 id="Type-Conversion"><a href="#Type-Conversion" class="headerlink" title="Type Conversion"></a>Type Conversion</h2><h2 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h2><h1 id="Spring-Data-Access"><a href="#Spring-Data-Access" class="headerlink" title="Spring Data Access"></a>Spring Data Access</h1>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>理解微服务架构</title>
    <url>/2018/06/15/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/%E7%90%86%E8%A7%A3%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

]]></content>
      <categories>
        <category>Reids</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>【微服务】网关</title>
    <url>/2018/05/13/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/%E3%80%90%E5%BE%AE%E6%9C%8D%E5%8A%A1%E3%80%91%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>网关</tag>
      </tags>
  </entry>
  <entry>
    <title>【微服务】配置中心</title>
    <url>/2018/05/13/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/%E3%80%90%E5%BE%AE%E6%9C%8D%E5%8A%A1%E3%80%91%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>配置中心</tag>
      </tags>
  </entry>
  <entry>
    <title>【UI自动化测试】PageObject模式</title>
    <url>/2018/05/11/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E3%80%90UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E3%80%91PageObject%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>UI自动化测试</tag>
        <tag>PageObject</tag>
      </tags>
  </entry>
  <entry>
    <title>【微服务】注册与发现</title>
    <url>/2018/05/11/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/%E3%80%90%E5%BE%AE%E6%9C%8D%E5%8A%A1%E3%80%91%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>为了实现服务间的调用，如果硬编码服务提供者的地址，则会有不少问题，比如：</p>
<ul>
<li>适用场景有限（如果提供者的网络地址发生变化，将会影响服务消费者）</li>
<li>无法动态伸缩（生产环境一般需要运行多个实例，从而实现容灾和负载均衡，硬编码服务满足这种需求）</li>
</ul>
<p>因此，要解决这些问题，则需要<strong>微服务注册与发现机制</strong>。</p>
<a id="more"></a>

<h3 id="注册中心原理"><a href="#注册中心原理" class="headerlink" title="注册中心原理"></a>注册中心原理</h3><p><strong>注册中心</strong>主要涉及三种角色，他们之间的关系如下图：</p>
<ul>
<li><strong>服务提供者（RPC Server）</strong></li>
<li><strong>服务消费者（RPC Client）</strong></li>
<li><strong>服务注册中心（Registry）</strong></li>
</ul>
<p><img src="/images/2019062410270551.png" alt="注册中心原理图"></p>
<p>RPC Server 提供服务，在启动时，根据服务发布文件 server.xml 中的配置的信息，向 Registry 注册自身服务，并向 Registry 定期发送心跳汇报存活状态。</p>
<p>RPC Client 调用服务，在启动时，根据服务引用文件 client.xml 中配置的信息，向 Registry 订阅服务，把 Registry 返回的服务节点列表缓存在本地内存中，并与 RPC Sever 建立连接。</p>
<p>当 RPC Server 节点发生变更时，Registry 会同步变更，RPC Client 感知后会刷新本地内存中缓存的服务节点列表。</p>
<p>RPC Client 从本地缓存的服务节点列表中，基于负载均衡算法选择一台 RPC Sever 发起调用。</p>
<h3 id="注册中心实现方式"><a href="#注册中心实现方式" class="headerlink" title="注册中心实现方式"></a>注册中心实现方式</h3><h4 id="注册中心API"><a href="#注册中心API" class="headerlink" title="注册中心API"></a>注册中心API</h4><p>根据<a href="#注册中心原理">注册中心原理</a>描述，注册中心必须提供以下API，例如：</p>
<ul>
<li>服务注册接口：服务提供者通过调用服务注册接口来完成服务注册。</li>
<li>服务反注册接口：服务提供者通过调用服务反注册接口来完成服务注销。</li>
<li>心跳汇报接口：服务提供者通过调用心跳汇报接口完成节点存活状态上报。</li>
<li>服务订阅接口：服务消费者通过调用服务订阅接口完成服务订阅，获取可用的服务提供者节点列表。</li>
<li>服务变更查询接口：服务消费者通过调用服务变更查询接口，获取最新的可用服务节点列表。</li>
</ul>
<p>还应该提供后台管理的API，例如：</p>
<ul>
<li>服务查询接口：查询注册中心当前注册了哪些服务信息。</li>
<li>服务修改接口：修改注册中心中某一服务的信息。</li>
</ul>
<h4 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h4><p><strong>注册中心作为服务提供者和服务消费者的桥梁，非常重要。所以注册中心一般采用集群的方式保证高可用性，并通过分布式一致性协议来确保集群中不同节点之间的数据保持一致。(集群如何保证一致性在zookeeper资料中详细讲解)</strong></p>
<p>以开源注册中心 ZooKeeper 为例，ZooKeeper 集群中包含多个节点，服务提供者和服务消费者可以同任意一个节点通信，因为它们的数据一定是相同的，这是为什么呢？这就要从 ZooKeeper 的工作原理说起：</p>
<p>每个 Server 在内存中存储了一份数据，Client 的读请求可以请求任意一个 Server。</p>
<p>ZooKeeper 启动时，将从实例中选举一个 leader（Paxos 协议）。</p>
<p>Leader 负责处理数据更新等操作（ZAB 协议）。</p>
<p>一个更新操作成功，当且仅当大多数 Server 在内存中成功修改 。</p>
<p>通过上面这种方式，ZooKeeper 保证了高可用性以及数据一致性。</p>
<h4 id="目录存储"><a href="#目录存储" class="headerlink" title="目录存储"></a>目录存储</h4><p><strong>注册中心存储服务信息一般采用层次化的目录结构。</strong></p>
<p>每个目录在 ZooKeeper 中叫作 znode，并且其有一个唯一的路径标识。</p>
<p>znode 可以包含数据和子 znode。</p>
<p>znode 中的数据可以有多个版本，比如某一个 znode 下存有多个数据版本，那么查询这个路径下的数据需带上版本信息。</p>
<h4 id="健康状态检查"><a href="#健康状态检查" class="headerlink" title="健康状态检查"></a>健康状态检查</h4><p><strong>注册中心除了要支持最基本的服务注册和服务订阅功能以外，还必须具备对服务提供者节点的健康状态检测功能，这样才能保证注册中心里保存的服务节点都是可用的。</strong></p>
<p>以 ZooKeeper 为例，它是基于 ZooKeeper 客户端和服务端的长连接和会话超时控制机制，来实现服务健康状态检测的。</p>
<p>在 ZooKeeper 中，客户端和服务端建立连接后，会话也随之建立，并生成一个全局唯一的 Session ID。服务端和客户端维持的是一个长连接，在 SESSION_TIMEOUT 周期内，服务端会检测与客户端的链路是否正常，具体方式是通过客户端定时向服务端发送心跳消息（ping 消息），服务器重置下次 SESSION_TIMEOUT 时间。如果超过 SESSION_TIMEOUT 后服务端都没有收到客户端的心跳消息，则服务端认为这个 Session 就已经结束了，ZooKeeper 就会认为这个服务节点已经不可用，将会从注册中心中删除其信息。</p>
<h4 id="服务状态变更通知"><a href="#服务状态变更通知" class="headerlink" title="服务状态变更通知"></a>服务状态变更通知</h4><p><strong>一旦注册中心探测到有服务提供者节点新加入或者被剔除，就必须立刻通知所有订阅该服务的服务消费者，刷新本地缓存的服务节点信息，确保服务调用不会请求不可用的服务提供者节点。</strong></p>
<p>继续以 ZooKeeper 为例，基于 ZooKeeper 的 Watcher 机制，来实现服务状态变更通知给服务消费者的。服务消费者在调用 ZooKeeper 的 getData 方法订阅服务时，还可以通过监听器 Watcher 的 process 方法获取服务的变更，然后调用 getData 方法来获取变更后的数据，刷新本地缓存的服务节点信息。</p>
<h4 id="白名单机制"><a href="#白名单机制" class="headerlink" title="白名单机制"></a>白名单机制</h4><p>在实际的微服务测试和部署时，通常包含多套环境，比如生产环境一套、测试环境一套。开发在进行业务自测、测试在进行回归测试时，一般都是用测试环境，部署的 RPC Server 节点注册到测试的注册中心集群。但经常会出现开发或者测试在部署时，错误的把测试环境下的服务节点注册到了线上注册中心集群，这样的话线上流量就会调用到测试环境下的 RPC Server 节点，可能会造成意想不到的后果。</p>
<p>为了防止这种情况发生，注册中心需要提供一个保护机制，你可以把注册中心想象成一个带有门禁的房间，只有拥有门禁卡的 RPC Server 才能进入。在实际应用中，注册中心可以提供一个白名单机制，只有添加到注册中心白名单内的 RPC Server，才能够调用注册中心的注册接口，这样的话可以避免测试环境中的节点意外跑到线上环境中去。</p>
<hr>
<h3 id="疑难问题总结"><a href="#疑难问题总结" class="headerlink" title="疑难问题总结"></a>疑难问题总结</h3><p><strong>疑问：注册中心与传统DNS实现服务发现有什么不同？</strong></p>
<ul>
<li><p>注册中心的服务注册和发现都是基于API的，可以自动化注册与发现，dns则是人工注册。这样也导致前者实时性、容错性好于后者。</p>
</li>
<li><p>注册中心可以注册http、rpc等各种服务，dns只能注册http服务</p>
</li>
<li><p>注册中心对已注册的服务会有主动的、自动化的健康检查机制，dns没有。</p>
</li>
<li><p>注册中心一般是一级分布式的，dns则是多级架构，例如根域名服务器、权威域名服务器等</p>
</li>
<li><p>注册中心的安全机制相对dns弱一些，毕竟是内部使用。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>注册中心</tag>
      </tags>
  </entry>
  <entry>
    <title>【MySQL】优化篇</title>
    <url>/2018/05/10/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/MySQL%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90MySQL%E3%80%91%E4%BC%98%E5%8C%96%E7%AF%87/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>





]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>SQL优化</tag>
      </tags>
  </entry>
  <entry>
    <title>gmall项目环境搭建</title>
    <url>/2018/05/10/04_%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%B0%B7%E7%B2%92%E5%AD%A6%E9%99%A2/%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>gmall 项目 后台运行环境及框架构建过程持续更新。。。</p>
<a id="more"></a>

<p> 本项目是基于SpringBoot+Mybatis+Duboo的微服务架构实战项目，后台运行环境及框架构建会在该文档更新。。。</p>
<h4 id="Docker安装（CentOS7）"><a href="#Docker安装（CentOS7）" class="headerlink" title="Docker安装（CentOS7）"></a>Docker安装（CentOS7）</h4><p>官方地址： <a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/</a> </p>
<ul>
<li>卸载已安装的Docker</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看已安装的docker</span></span><br><span class="line">yum list installed | grep docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载已安装的docker</span></span><br><span class="line">yum remove docker \</span><br><span class="line">           docker-client \</span><br><span class="line">           docker-client-latest \</span><br><span class="line">           docker-common \</span><br><span class="line">           docker-latest \</span><br><span class="line">           docker-latest-logrotate \</span><br><span class="line">           docker-logrotate \</span><br><span class="line">           docker-engine</span><br><span class="line">           </span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除已安装过的镜像、容器等</span></span><br><span class="line">rm -rf /var/lib/docker/</span><br></pre></td></tr></table></figure>

<ul>
<li>安装Docker</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装依赖包</span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line"></span><br><span class="line"># 设置稳定的仓库</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line"># 查看docker版本</span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"></span><br><span class="line"># 安装docker-ce（The Docker Engine - Community package）</span><br><span class="line"># 指定版本：sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"># 启动docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<ul>
<li><p>配置docker镜像加速</p>
<ul>
<li>创建daemon配置文件<code>/etc/docker/daemon.json</code>:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;:[&quot;https://tnxkcso1.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>重新读取daemon文件：<code>sudo systemctl daemon-reload</code></li>
<li>重启docker：<code>sudo systemctl restart docker</code></li>
</ul>
</li>
</ul>
<h4 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h4><ol>
<li><p>下载zookeeper镜像</p>
<blockquote>
<p><code>docker pull zookeeper</code></p>
</blockquote>
</li>
<li><p>运行zookeeper镜像</p>
<blockquote>
<p><code>docker run  -p 2181:2181 --privileged=true  --name zookeeper  -d  zookeeper</code></p>
</blockquote>
</li>
<li><p>安装IDEA的Zookeeper插件</p>
</li>
</ol>
<p><img src="/../images/image-20200330192455037.png" alt="image-20200330192455037"></p>
<p><img src="/../images/image-20200331131638951.png" alt="image-20200331131638951"></p>
<h4 id="Dubbo控制台"><a href="#Dubbo控制台" class="headerlink" title="Dubbo控制台"></a>Dubbo控制台</h4><p>github地址： <a href="https://github.com/apache/dubbo-admin" target="_blank" rel="noopener">https://github.com/apache/dubbo-admin</a> </p>
<h5 id="生产环境配置"><a href="#生产环境配置" class="headerlink" title="生产环境配置"></a>生产环境配置</h5><ol>
<li><p>下载代码: <code>git clone https://github.com/apache/dubbo-admin.git</code> </p>
</li>
<li><p>在 <code>dubbo-admin-server/src/main/resources/application.properties</code>中指定注册中心地址</p>
<blockquote>
<p><code>application.properties</code>文件配置说明:  <a href="https://github.com/apache/dubbo-admin/wiki/Dubbo-Admin配置说明" target="_blank" rel="noopener">配置说明</a></p>
</blockquote>
<p><img src="/../images/image-20200331131845159.png" alt="image-20200331131845159"></p>
</li>
<li><p>构建</p>
<blockquote>
<p><code>mvn clean package</code></p>
</blockquote>
</li>
<li><p>启动</p>
<ul>
<li><code>mvn --projects dubbo-admin-server spring-boot:run</code><br>或者</li>
<li><code>cd dubbo-admin-distribution/target; java -jar dubbo-admin-0.1.jar</code></li>
</ul>
</li>
<li><p>访问 <code>http://localhost:8080</code></p>
</li>
</ol>
<p><img src="/../images/image-20200331151147439.png" alt="image-20200331151147439"></p>
<h5 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h5><ul>
<li>运行<code>dubbo admin server</code> <code>dubbo admin server</code>是一个标准的spring boot项目, 可以在任何java IDE中运行它</li>
<li>运行<code>dubbo admin ui</code> <code>dubbo admin ui</code>由npm管理和构建，在开发环境中，可以单独运行: <code>npm run dev</code></li>
<li>页面访问 访问 <code>http://localhost:8081</code>, 由于前后端分开部署，前端支持热加载，任何页面的修改都可以实时反馈，不需要重启应用。</li>
<li>跨域问题 为了方便开发，我们提供了这种前后端分离的部署模式，主要的好处是支持前端热部署，在这种模式下，前端会通过8080端口访问后端的restful api接口，获取数据, 这将导致跨域访问的问题。因此我们在<code>dubbo-admin-ui/config/index.js</code>添加了支持跨域访问的配置,当前端通过<code>npm run dev</code>单独启动时，这些配置将被激活，允许跨域访问</li>
</ul>
]]></content>
      <categories>
        <category>项目笔记</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>IDEA</tag>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>MySQL</tag>
        <tag>SpringBoot</tag>
        <tag>gmall</tag>
        <tag>GitHub</tag>
        <tag>Zookeeper</tag>
        <tag>Mybatis-Plus</tag>
        <tag>ElasticSearch</tag>
        <tag>Logstash</tag>
        <tag>Kibana</tag>
        <tag>Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>【面试题】JavaSE面试总结</title>
    <url>/2018/05/07/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Docker%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Docker%E3%80%91%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>当下微服务架构盛行，随之而来的还有虚拟化技术Docker的普及，日常工作中经常需要使用docker，所以对docker需要进行简单的了解，本文主要描述docker的基本架构、基本使用、Dockerfile的编写及项目中docker的使用。</p>
<a id="more"></a>

<h3 id="Docker-简介"><a href="#Docker-简介" class="headerlink" title="Docker 简介"></a>Docker 简介</h3><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化，容器是完全使用沙箱机制，相互之间不会有任何接口。</p>
<h4 id="Docker-架构"><a href="#Docker-架构" class="headerlink" title="Docker 架构"></a>Docker 架构</h4><p>Docker使用了C/S体系架构，Docker客户端与Docker守护进程通信，Docker守护进程负责构建，运行和分发Docker容器。Docker客户端和守护进程可以在同一个系统上运行，也可以将Docker客户端连接到远程Docker守护进程。Docker客户端和守护进程使用REST API通过UNIX套接字或网络接口进行通信。<br><img src="/images/image-20200331165743372.png" alt="image-20200331165743372"></p>
<h4 id="Docker-基本组成"><a href="#Docker-基本组成" class="headerlink" title="Docker 基本组成"></a>Docker 基本组成</h4><h5 id="Docker-镜像（Docker-Images）"><a href="#Docker-镜像（Docker-Images）" class="headerlink" title="Docker 镜像（Docker Images）"></a>Docker 镜像（Docker Images）</h5><p> <strong>Docker 镜像（Image）</strong>，就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">检索镜像（从 https://hub.docker.com 检索）</span></span><br><span class="line">docker search mysql #OFFICIAL表示官方发行版本</span><br><span class="line"><span class="meta">#</span><span class="bash">拉取镜像:dockerpull 镜像名:tag</span></span><br><span class="line">docker pull mysql #拉取latest的mysql镜像</span><br><span class="line"><span class="meta">#</span><span class="bash">查看本地镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta">#</span><span class="bash">删除镜像:docker rmi image-id</span></span><br><span class="line">docker rmi 29e0a</span><br></pre></td></tr></table></figure>

<h5 id="Docker-容器（Docker-Containers）"><a href="#Docker-容器（Docker-Containers）" class="headerlink" title="Docker 容器（Docker Containers）"></a>Docker 容器（Docker Containers）</h5><p> <strong>镜像（Image）</strong>和<strong>容器（Container）</strong>的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行容器：docker run --name container-name:tag -d image-name -p 8080:8090</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-d:表示后台运行容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-p:端口映射，docker容器默认与外界是隔绝的，需要进行端口映射才能访问</span></span><br><span class="line">docker run --name myTomcat -d tomcat:8.5.32 -p 8090:8080</span><br><span class="line"><span class="meta">#</span><span class="bash">查看容器</span></span><br><span class="line">docker ps #查看所有运行中的容器</span><br><span class="line">docker ps -a #查看所有容器</span><br><span class="line"><span class="meta">#</span><span class="bash">停止运行容器:docker stop container-id</span></span><br><span class="line">docker stop 1cbabce49b84</span><br><span class="line"><span class="meta">#</span><span class="bash">启动容器</span></span><br><span class="line">docker start 1cbabce49b84</span><br><span class="line"><span class="meta">#</span><span class="bash">删除容器</span></span><br><span class="line">docker rm 1cbabce49b84</span><br><span class="line"><span class="meta">#</span><span class="bash">容器日志：docker logs container-name/container-id</span></span><br><span class="line">docker logs myTtomcat1</span><br></pre></td></tr></table></figure>

<h5 id="Docker-仓库（Docker-Repository）"><a href="#Docker-仓库（Docker-Repository）" class="headerlink" title="Docker 仓库（Docker Repository）"></a>Docker 仓库（Docker Repository）</h5><p> <strong>仓库（Repository）</strong>可看着一个代码控制中心，用来保存镜像。 可以分为公有仓库和私有仓库。</p>
<h4 id="Docker安装（CentOS7）"><a href="#Docker安装（CentOS7）" class="headerlink" title="Docker安装（CentOS7）"></a>Docker安装（CentOS7）</h4><p>官方地址： <a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/</a> </p>
<h5 id="卸载已安装的Docker"><a href="#卸载已安装的Docker" class="headerlink" title="卸载已安装的Docker"></a><strong>卸载已安装的Docker</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看已安装的docker</span></span><br><span class="line">yum list installed | grep docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载已安装的docker</span></span><br><span class="line">yum remove docker \</span><br><span class="line">           docker-client \</span><br><span class="line">           docker-client-latest \</span><br><span class="line">           docker-common \</span><br><span class="line">           docker-latest \</span><br><span class="line">           docker-latest-logrotate \</span><br><span class="line">           docker-logrotate \</span><br><span class="line">           docker-engine</span><br><span class="line">           </span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除已安装过的镜像、容器等</span></span><br><span class="line">rm -rf /var/lib/docker/</span><br></pre></td></tr></table></figure>

<h5 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装依赖包</span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line"></span><br><span class="line"># 设置稳定的仓库</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line"># 查看docker版本</span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"></span><br><span class="line"># 安装docker-ce（The Docker Engine - Community package）</span><br><span class="line"># 指定版本：sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"># 启动docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h5 id="配置docker镜像加速"><a href="#配置docker镜像加速" class="headerlink" title="配置docker镜像加速"></a>配置docker镜像加速</h5><ul>
<li>创建daemon配置文件<code>/etc/docker/daemon.json</code>:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;:[&quot;https://tnxkcso1.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>重新读取daemon文件：<code>sudo systemctl daemon-reload</code></li>
<li>重启docker：<code>sudo systemctl restart docker</code></li>
</ul>
<h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><h4 id="DockerFile的指令详解"><a href="#DockerFile的指令详解" class="headerlink" title="DockerFile的指令详解"></a>DockerFile的指令详解</h4><p><code>FROM</code>：基础镜像</p>
<p><code>MAINTAINER</code>：</p>
<p><code>RUN</code>：</p>
<p><code>EXPOSE</code>：</p>
<p><code>WORKDIR</code>:</p>
<p><code>ENV</code>：</p>
<p><code>ADD</code>：</p>
<p><code>COPY</code>：</p>
<p><code>VOLUME</code>：</p>
<p><code>CMD</code>：</p>
<p><code>ENTRYPOINT</code>：</p>
<p><code>ONBUILD</code>：</p>
<h4 id="DockerFile编写实例"><a href="#DockerFile编写实例" class="headerlink" title="DockerFile编写实例"></a>DockerFile编写实例</h4><p>需求：</p>
<p>Dockerfile：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="常用镜像"><a href="#常用镜像" class="headerlink" title="常用镜像"></a>常用镜像</h3><h4 id="Docker安装MySQL"><a href="#Docker安装MySQL" class="headerlink" title="Docker安装MySQL"></a>Docker安装MySQL</h4><h4 id="Docker安装Redis"><a href="#Docker安装Redis" class="headerlink" title="Docker安装Redis"></a>Docker安装Redis</h4><h4 id="Docker安装Zookeeper"><a href="#Docker安装Zookeeper" class="headerlink" title="Docker安装Zookeeper"></a>Docker安装Zookeeper</h4><h3 id="IDEA下Docker部署SpringBoot项目"><a href="#IDEA下Docker部署SpringBoot项目" class="headerlink" title="IDEA下Docker部署SpringBoot项目"></a>IDEA下Docker部署SpringBoot项目</h3><h4 id="开启Docker远程连接端口"><a href="#开启Docker远程连接端口" class="headerlink" title="开启Docker远程连接端口"></a>开启Docker远程连接端口</h4><ol>
<li>修改<code>/lib/systemd/system/docker.service</code>文件中<code>ExecStart</code>开头的行：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd   -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</span><br></pre></td></tr></table></figure>

<ol>
<li>重新加载并启动docker</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reloadsystemctl start docker</span><br></pre></td></tr></table></figure>

<ol>
<li>添加端口到服务器，并重启防火墙</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo  firewall-cmd --zone=public --add-port=2375/tcp --permanent</span><br><span class="line">#--zone #作用域</span><br><span class="line">#--add-port=2375/tcp  #添加端口，格式为：端口/通讯协议</span><br><span class="line">#--permanent  #永久生效，没有此参数重启后失效</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<ol>
<li>校验结果：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http://localhost:2375/version# 本地虚拟机地址：curl http://192.168.159.128:2375/version</span><br></pre></td></tr></table></figure>

<h4 id="IDEA连接Docker"><a href="#IDEA连接Docker" class="headerlink" title="IDEA连接Docker"></a>IDEA连接Docker</h4><p><img src="/images/image-20200331175746687.png" alt="image-20200331175746687"></p>
<h4 id="一键部署SpringBoot项目"><a href="#一键部署SpringBoot项目" class="headerlink" title="一键部署SpringBoot项目"></a>一键部署SpringBoot项目</h4>]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
        <tag>面试总结</tag>
      </tags>
  </entry>
  <entry>
    <title>【面试题】JavaSE面试总结</title>
    <url>/2018/05/07/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Java%20SE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E9%9D%A2%E8%AF%95%E9%A2%98%E3%80%91JavaSE%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>本篇文章将介绍JavaSE面试过程中的题目及相关知识点总结。</p>
<a id="more"></a>

<h3 id="自增变量"><a href="#自增变量" class="headerlink" title="自增变量"></a>自增变量</h3><p>面试题：写出如下代码段的运行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    i = i++;</span><br><span class="line">    <span class="keyword">int</span> j = i++;</span><br><span class="line">    <span class="keyword">int</span> k = i + ++i * i++;</span><br><span class="line">    System.out.println(<span class="string">"i="</span> + i);</span><br><span class="line">    System.out.println(<span class="string">"j="</span> + j);</span><br><span class="line">    System.out.println(<span class="string">"k="</span> + k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i=4</span><br><span class="line">j=1</span><br><span class="line">k=11</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
        <tag>面试总结</tag>
      </tags>
  </entry>
  <entry>
    <title>【MySQL】基础知识点总结</title>
    <url>/2018/05/07/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/MySQL%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90MySQL%E3%80%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>这篇文章主要介绍MySQL的一些基本用法与总结。</p>
<a id="more"></a>

<h3 id="MySQL-概要"><a href="#MySQL-概要" class="headerlink" title="MySQL 概要"></a>MySQL 概要</h3><p><strong>MySQL(<a href="https://www.mysql.com)：轻量级关系型数据库。" target="_blank" rel="noopener">https://www.mysql.com)：轻量级关系型数据库。</a></strong></p>
<p><strong>基于Docker安装：</strong></p>
<ul>
<li>拉取最新的 MySQL 镜像：<code>docker pull mysql</code></li>
<li>启动镜像，映射端口、指定root密码并挂载日志、配置文件及数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DB_HOME=/home/mysql</span><br><span class="line">DB_CONF_PATH=$DB_HOME/conf:/etc/mysql/conf.d</span><br><span class="line">DB_LOG_PATH=$DB_HOME/logs:/var/log/mysql</span><br><span class="line">DB_DATA_PATH=$DB_HOME/data:/var/lib/mysql</span><br><span class="line">docker run -p 3306:3306 --name mysql -v $DB_CONF_PATH -v $DB_LOG_PATH -v $DB_DATA_PATH -e MYSQL_ROOT_PASSWORD=toor -d mysql</span><br></pre></td></tr></table></figure>

<h3 id="MySQL-数据类型"><a href="#MySQL-数据类型" class="headerlink" title="MySQL 数据类型"></a>MySQL 数据类型</h3><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><p>MySQL支持所有标准SQL中的数值类型，包括严格数值类型(INTEGER、SMALLINT、DECIMAL、NUMBERIC)，以及近似数值数据类型（FLOAT、REAL和DOUBLE PRECISION），并在此基础上做了拓展。</p>
<p><strong>整型</strong></p>
<table>
<thead>
<tr>
<th>MySQL数据类型</th>
<th>含义（有符号）</th>
</tr>
</thead>
<tbody><tr>
<td>tinyint(m)</td>
<td>1个字节 范围(-128~127)</td>
</tr>
<tr>
<td>smallint(m)</td>
<td>2个字节 范围(-32768~32767)</td>
</tr>
<tr>
<td>mediumint(m)</td>
<td>3个字节 范围(-8388608~8388607)</td>
</tr>
<tr>
<td>int(m)</td>
<td>4个字节 范围(-2147483648~2147483647)</td>
</tr>
<tr>
<td>bigint(m)</td>
<td>8个字节 范围(+-9.22*10的18次方)</td>
</tr>
</tbody></table>
<p><strong>浮点型</strong></p>
<table>
<thead>
<tr>
<th>MySQL数据类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>float(m,d)</td>
<td>单精度浮点型  8位精度(4字节)   m总个数，d小数位</td>
</tr>
<tr>
<td>double(m,d)</td>
<td>双精度浮点型  16位精度(8字节)   m总个数，d小数位</td>
</tr>
</tbody></table>
<p><strong>定点型</strong></p>
<h4 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h4><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><h3 id="MySQL-运算符"><a href="#MySQL-运算符" class="headerlink" title="MySQL 运算符"></a>MySQL 运算符</h3><p>MySQL支持多种类型的运算符，包括算术运算符、比较运算符、逻辑运算符、位运算符。</p>
<h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><h3 id="MySQL-常用函数"><a href="#MySQL-常用函数" class="headerlink" title="MySQL 常用函数"></a>MySQL 常用函数</h3><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><h4 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h4><h4 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h4><h4 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h4><h4 id="其他常用函数"><a href="#其他常用函数" class="headerlink" title="其他常用函数"></a>其他常用函数</h4><h3 id="MySQL-SQL语句"><a href="#MySQL-SQL语句" class="headerlink" title="MySQL SQL语句"></a>MySQL SQL语句</h3><h4 id="DDL-Data-Definition-Languages"><a href="#DDL-Data-Definition-Languages" class="headerlink" title="DDL(Data Definition Languages)"></a>DDL(Data Definition Languages)</h4><p><strong>数据库操作</strong></p>
<ul>
<li><p>查看当前所有数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建数据库：CREATE DATABASE 数据库名;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">DATABASE</span> RUNOOB;</span><br></pre></td></tr></table></figure>
</li>
<li><p>选择数据库：use 数据库名;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> RUNOOB;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据库：drop database &lt;数据库名&gt;;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> RUNOOB;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>数据表操作</strong></p>
<ul>
<li><p>查看所有数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看单表创建语句</p>
<p>语法：<code>show create table 数据表名 ;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> emp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看单表结构</p>
<p>语法：<code>desc 数据库名;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">desc temp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建数据表</p>
<p>语法：<code>CREATE TABLE table_name (column_name column_type);</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`runoob_tbl`</span>(</span><br><span class="line">   <span class="string">`runoob_id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> AUTO_INCREMENT,</span><br><span class="line">   <span class="string">`runoob_title`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   <span class="string">`runoob_author`</span> <span class="built_in">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   <span class="string">`submission_date`</span> <span class="built_in">DATE</span>,</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> ( <span class="string">`runoob_id`</span> )</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据表</p>
<p>语法：<code>DROP TABLE table_name ;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> runoob_tbl;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改数据表名</p>
<p>语法：<code>ALTER TABLE table_name RENAME [TO] new_table_name;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">rename</span> emp1;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>数据表结构操作</strong></p>
<ul>
<li><p>增加表字段</p>
<p>语法：<code>ALTER TABLE table_name ADD [COLUMN] column_definition [FIRST | AFTER col_name];</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> <span class="keyword">column</span> age <span class="built_in">int</span>(<span class="number">11</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除表字段</p>
<p>语法：<code>ALTER TABLE table_name DROP [COLUMN] col_name;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">DROP</span>  <span class="keyword">column</span> age;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改表字段</p>
<p>说明：modify 和 change 都可以修改表结构定义，change 需要写两次列名，不方便，但可以修改列名，modify则不能</p>
<ul>
<li>修改表字段名</li>
</ul>
<p>语法：<code>ALTER TABLE table_name CHANGE [COLUMN] old_col_name column_definition  [FIRST | AFTER col_name];</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">CHANGE</span> age age1 <span class="built_in">int</span>(<span class="number">11</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>修改表字段属性</li>
</ul>
<p>语法：<code>ALTER TABLE table_name MODIFY [COLUMN] old_col_name column_definition  [FIRST | AFTER col_name];</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">MODIFY</span> age <span class="built_in">varchar</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>修改表字段排列顺序：ADD/CHANGE/MODIFY后</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> birth  <span class="built_in">date</span> <span class="keyword">after</span> age；</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">change</span> birth birth1 <span class="built_in">date</span> <span class="keyword">after</span> gender；</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">MODIFY</span> age <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">first</span>；</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="DML-Data-Manipulation-Languages"><a href="#DML-Data-Manipulation-Languages" class="headerlink" title="DML(Data Manipulation Languages)"></a>DML(Data Manipulation Languages)</h4><p><strong>插入记录</strong></p>
<p>语法：<code>INSERT INTO table_name[(field1,field2,...fieldn)] VALUES(value1,value2,...,valuen);</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">desc emp;<span class="comment">#ename,hiredate,sal,deptno</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span>(<span class="string">"lisa"</span>,<span class="string">"1993-06-04"</span>,<span class="string">"3000"</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p><strong>删除记录</strong></p>
<p>语法：<code>DELETE FROM table_name [WHERE CONDITION];</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename=<span class="string">"dony"</span>;</span><br></pre></td></tr></table></figure>

<p><strong>更新记录</strong></p>
<p>语法：<code>UPDATE table_name SET field1=value1,field2=value2,...,fieldn=valuen [WHERE CONDITION];</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> emp <span class="keyword">SET</span> sal = <span class="number">4000</span> <span class="keyword">WHERE</span> ename=<span class="string">"lisa"</span>;</span><br></pre></td></tr></table></figure>

<p><strong>查询记录</strong></p>
<p>语法：<code>SELETE * FROM table_name;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SELETE * FROM emp;</span><br><span class="line"><span class="keyword">SELECT</span> ename,hiredate,sal,deptno <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>

<ul>
<li>去重：<code>DISTINCT</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> ename <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>

<ul>
<li>条件:<code>WHERE</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>排序：<code>ORDER BY</code></p>
<p>语法：<code>SELECT * FROM table_name [WHERE CONDITION] [ORDER BY field1 [DESC/ASC],field2 [DESC/ASC]]</code>;</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>限制：<code>LIMIT</code></p>
<p>语法：<code>SELECT * FROM table_name LIMIT offset_start,row_count</code></p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">LIMIT</span> <span class="number">1</span>,<span class="number">20</span>;<span class="comment">#从1开始，20行</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>聚合</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [field1,field2,...,fieldn]fun_name</span><br><span class="line"><span class="keyword">FROM</span> table_name </span><br><span class="line">[<span class="keyword">WHERE</span> where_condition] </span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> field1,field2,...,fieldn] </span><br><span class="line">[<span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>] </span><br><span class="line">[<span class="keyword">HAVING</span> where_condition];</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>fun_name表示要做的聚合操作，常用的有：sum,count(*),max,min</li>
<li>GROUP BY 表示进行分类聚合的字段</li>
<li>WITH ROLLUP 是可选语法，表明是否对分类聚合后的结果进行再汇总</li>
<li>HAVING 表示对分类后的结果再进行条件的过滤</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">FROM</span> emp;<span class="comment">#查看总人数</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno,<span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno;<span class="comment">#统计各部门人数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(sal),<span class="keyword">max</span>(sal),<span class="keyword">min</span>(sal) <span class="keyword">FROM</span> emp;<span class="comment">#查询员工工资总额，最高和最低薪水</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>表连接</p>
<ul>
<li>内连接</li>
<li>外连接<ul>
<li>左连接</li>
<li>右连接</li>
</ul>
</li>
</ul>
</li>
<li><p>子查询</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>UNION联合查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#插入记录：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除记录：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更新记录：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询记录：</span></span><br><span class="line"><span class="comment"># 去重：DISTINCT</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 条件</span></span><br><span class="line"><span class="comment"># 排序:ORDER BY</span></span><br><span class="line"><span class="comment"># 限制：LIMIT</span></span><br><span class="line"><span class="comment"># 聚合:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接查询</span></span><br><span class="line"><span class="comment"># 子查询</span></span><br><span class="line"><span class="comment"># union联合查询</span></span><br></pre></td></tr></table></figure>



<h4 id="DCL-Data-Control-Languages"><a href="#DCL-Data-Control-Languages" class="headerlink" title="DCL(Data Control Languages)"></a>DCL(Data Control Languages)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="MySQL-视图"><a href="#MySQL-视图" class="headerlink" title="MySQL 视图"></a>MySQL 视图</h3><h3 id="MySQL-存储过程"><a href="#MySQL-存储过程" class="headerlink" title="MySQL 存储过程"></a>MySQL 存储过程</h3><h3 id="MySQL-触发器"><a href="#MySQL-触发器" class="headerlink" title="MySQL 触发器"></a>MySQL 触发器</h3><h3 id="MySQL-事务"><a href="#MySQL-事务" class="headerlink" title="MySQL 事务"></a>MySQL 事务</h3><h3 id="常见问题总结"><a href="#常见问题总结" class="headerlink" title="常见问题总结"></a>常见问题总结</h3><ol>
<li><p><strong>Navicat 连接 MySQL 数据库失败?</strong></p>
<p>原因分析：MySQL 8.0 +使用了<code>caching_sha2_password</code>加密方式，而navicat不支持。</p>
<p>解决方案：修改为原有的加密规则<code>mysql_native_password</code>.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> ‘root’@’localhost’ <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> ‘<span class="keyword">password</span>’ <span class="keyword">PASSWORD</span> <span class="keyword">EXPIRE</span> <span class="keyword">NEVER</span>; <span class="comment">#修改加密规则,如果远程需要连接，则'localhost'改为'%'</span></span><br><span class="line">4. <span class="keyword">ALTER</span> <span class="keyword">USER</span> ‘root’@’localhost’ <span class="keyword">IDENTIFIED</span> <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> ‘<span class="keyword">password</span>’; <span class="comment">#更新一下用户的密码,,如果远程需要连接，则'localhost'改为'%'</span></span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>; <span class="comment">#刷新权限</span></span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hydrogen】整体框架设计</title>
    <url>/2018/05/07/04_%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0/%E3%80%90Hydrogen%E3%80%91%E6%95%B4%E4%BD%93%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

<p>思考：</p>
<ul>
<li><p>Workspace（多个member）</p>
<ul>
<li>Environment(globals+custom(多个))</li>
<li>Suites(测试用例集)<ul>
<li>case<ul>
<li>pre_action</li>
<li>request</li>
<li>assertion</li>
<li>after_action</li>
</ul>
</li>
</ul>
</li>
<li>History(执行历史)</li>
<li>APIs</li>
<li>member 管理</li>
<li>database 管理</li>
</ul>
</li>
</ul>
<p>实现功能：</p>
<ol>
<li>导入swagger文档直接生成api</li>
</ol>
]]></content>
      <categories>
        <category>hydrogen</category>
      </categories>
      <tags>
        <tag>框架设计</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】Java核心技术</title>
    <url>/2018/03/05/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Java%20SE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%20SE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>本文主要是 Java SE 核心技术的复习与总结，内容比较长，耐心查看。</p>
<p><img src="/images/image-20191222205312777.png" alt="image-20191222205312777"></p>
<a id="more"></a>

<h2 id="Java-语言概述"><a href="#Java-语言概述" class="headerlink" title="Java 语言概述"></a>Java 语言概述</h2><h2 id="Java-基本语法"><a href="#Java-基本语法" class="headerlink" title="Java 基本语法"></a>Java 基本语法</h2><h3 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h3><p>关键字定义：<strong>被Java 语言赋予了特殊含义，用做专门用途的字符串（单词）</strong>。</p>
<p>官方地址： <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html</a></p>
<p>关键字：</p>
<table>
<thead>
<tr>
<th><code>abstract</code></th>
<th><code>continue</code></th>
<th><code>for</code></th>
<th><code>new</code></th>
<th><code>switch</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>assert</code>***</td>
<td><code>default</code></td>
<td><code>goto</code>*</td>
<td><code>package</code></td>
<td><code>synchronized</code></td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>do</code></td>
<td><code>if</code></td>
<td><code>private</code></td>
<td><code>this</code></td>
</tr>
<tr>
<td><code>break</code></td>
<td><code>double</code></td>
<td><code>implements</code></td>
<td><code>protected</code></td>
<td><code>throw</code></td>
</tr>
<tr>
<td><code>byte</code></td>
<td><code>else</code></td>
<td><code>import</code></td>
<td><code>public</code></td>
<td><code>throws</code></td>
</tr>
<tr>
<td><code>case</code></td>
<td><code>enum</code>****</td>
<td><code>instanceof</code></td>
<td><code>return</code></td>
<td><code>transient</code></td>
</tr>
<tr>
<td><code>catch</code></td>
<td><code>extends</code></td>
<td><code>int</code></td>
<td><code>short</code></td>
<td><code>try</code></td>
</tr>
<tr>
<td><code>char</code></td>
<td><code>final</code></td>
<td><code>interface</code></td>
<td><code>static</code></td>
<td><code>void</code></td>
</tr>
<tr>
<td><code>class</code></td>
<td><code>finally</code></td>
<td><code>long</code></td>
<td><code>strictfp</code>**</td>
<td><code>volatile</code></td>
</tr>
<tr>
<td><code>const</code>*</td>
<td><code>float</code></td>
<td><code>native</code></td>
<td><code>super</code></td>
<td><code>while</code></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注：</span><br><span class="line">*	 		not used</span><br><span class="line">**	 		added in 1.2</span><br><span class="line">***	 		added in 1.4</span><br><span class="line">****	 	added in 5.0</span><br></pre></td></tr></table></figure>

<p>保留字定义：现有Java版本尚未使用，但以后版本可能会作为关键字使用。（goto、 const ）</p>
<h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><p>定义：<strong>Java 对各种 变量、 方法和 类等要素命名时使用的字符序列称为标识符</strong>。</p>
<p>定义规则：</p>
<ul>
<li>由 由26 个英文字母大小写，0-9 ，_或 或 $ 组成</li>
<li>数字不可以开头。</li>
<li>不可以使用关键字和保留字，但能包含关键字和保留字。</li>
<li>Java 中严格区分大小写，长度无限制。</li>
</ul>
<p>Java中的命名规范：</p>
<ul>
<li>包名：多单词组成时所有字母都小写：xxxyyyzzz</li>
<li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz</li>
<li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个<br>单词首字母大写：xxxYyyZzz</li>
<li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li>
</ul>
<p>注：更多细节可以参考书籍<strong>《代码整洁之道》</strong>。</p>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>定义：</p>
<ul>
<li>内存中的一个存储区域</li>
<li>该区域的数据可以在同一类型范围内不断变化</li>
<li>变量是程序中最基本的存储单元。包含变量类型、变量名和存储的值</li>
</ul>
<p>变量的分类：</p>
<img src="/images/image-20191223003651243.png" alt="image-20191223003651243" style="zoom:50%;" />

<h5 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h5><p><strong>整数类型</strong>：byte、short、int、long</p>
<ul>
<li>Java常量默认int类型，声明long常量通常需要以“L”或”l”结尾</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>占用存储空间</th>
<th>表数范围</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>1字节=8bit位</td>
<td>-128~127</td>
</tr>
<tr>
<td>short</td>
<td>2字节</td>
<td>-2^15~2^15-1</td>
</tr>
<tr>
<td>int</td>
<td>4字节</td>
<td>-2^31~2^31-1(约21亿)</td>
</tr>
<tr>
<td>long</td>
<td>8字节</td>
<td>-2^63~2^63-1</td>
</tr>
</tbody></table>
<p><strong>浮点类型</strong>：float、double</p>
<ul>
<li>Java 的浮点型常量默认为double型，声明float 型常量，须后加‘f’ 或‘F’ </li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>占用存储空间</th>
<th>表数范围</th>
</tr>
</thead>
<tbody><tr>
<td>单精度float</td>
<td>4字节</td>
<td>-3.403E38 ~ 3.403E38</td>
</tr>
<tr>
<td>双精度double</td>
<td>8字节</td>
<td>-1.798E308 ~ 1.798E308</td>
</tr>
</tbody></table>
<p><strong>字符型</strong>：char</p>
<ul>
<li>声明字符型时，使用单引号，如<code>&#39;a&#39;</code>.</li>
<li>Java中的所有字符都使用Unicode编码，一个字符可以存储一个汉字、字母、其他书面语的一个字符。</li>
</ul>
<p><strong>布尔型</strong>：boolean</p>
<ul>
<li>boolean类型数据只允许取值true或false，无null</li>
</ul>
<h5 id="基本数据类型变量间转换"><a href="#基本数据类型变量间转换" class="headerlink" title="基本数据类型变量间转换"></a>基本数据类型变量间转换</h5><p><strong>自动类型转换</strong>：容量小的类型自动转换为容量大的数据类型。</p>
<p><img src="/images/image-20191223010045620.png" alt="image-20191223010045620"></p>
<ul>
<li>byte,short,char之间不会相互转换，他们三者在计算时首先转换为int类型。</li>
<li>boolean类型不能与其它数据类型运算。</li>
<li>当把任何基本数据类型的值和字符串(String)进行连接运算时(+)，基本数据类<br>型的值将自动转化为字符串(String)类型。</li>
</ul>
<p><strong>强制类型转换</strong>：容量大的类型强制转换为容量小的数据类型。</p>
<ul>
<li>使用<code>()</code>强制转换符：<code>double i=12.5; int j=(int)i;</code></li>
</ul>
<h5 id="基本数据类型与String间转换"><a href="#基本数据类型与String间转换" class="headerlink" title="基本数据类型与String间转换"></a>基本数据类型与String间转换</h5><p>基本数据类型转String：</p>
<ul>
<li>使用基本类型的封装类的toString()方法</li>
<li>String类的valueOf()方法,<code>int a=12;String s=String.valueOf(a);</code></li>
<li>加一个<code>&quot;&quot;</code>类实现自动类型转换，<code>int i=1; String s=&quot;&quot;+i;</code></li>
</ul>
<p>String转基本数据类型：使用包装类的方法转换。如：<code>String a=43; int i= Integer.parseInt(a);</code></p>
<h5 id="进制与进制间的转换（基本概念，不用细解）"><a href="#进制与进制间的转换（基本概念，不用细解）" class="headerlink" title="进制与进制间的转换（基本概念，不用细解）"></a>进制与进制间的转换（基本概念，不用细解）</h5><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><table>
<thead>
<tr>
<th align="center">算术运算符</th>
<th align="center">+</th>
<th align="center">-</th>
<th align="center">*</th>
<th align="center">/</th>
<th align="center">%</th>
<th align="center">++</th>
<th align="center">–</th>
<th align="center"></th>
<th align="center"></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="center">关系运算符</td>
<td align="center">==</td>
<td align="center">!=</td>
<td align="center">&gt;</td>
<td align="center">&lt;</td>
<td align="center">&gt;=</td>
<td align="center">&lt;=</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">位运算符</td>
<td align="center">＆</td>
<td align="center">|</td>
<td align="center">$</td>
<td align="center">〜</td>
<td align="center">&lt;&lt;</td>
<td align="center">&gt;&gt;</td>
<td align="center">&gt;&gt;&gt;</td>
<td align="center"></td>
<td align="center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">逻辑运算符</td>
<td align="center">&amp;&amp;</td>
<td align="center">||</td>
<td align="center">!</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">赋值运算符</td>
<td align="center">=</td>
<td align="center">+ =</td>
<td align="center">-=</td>
<td align="center">* =</td>
<td align="center">/=</td>
<td align="center">（％）=</td>
<td align="center">&lt;&lt; =</td>
<td align="center">&gt;&gt; =</td>
<td align="center">＆=</td>
<td>|=</td>
<td>^ =</td>
</tr>
<tr>
<td align="center">其他运算符</td>
<td align="center">三元运算符((a == 1) ? 20 : 30)</td>
<td align="center">instanceof</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="程序流程控制"><a href="#程序流程控制" class="headerlink" title="程序流程控制"></a>程序流程控制</h3><ul>
<li>循环结构<ul>
<li><strong>while</strong> 循环</li>
<li><strong>do…while</strong> 循环</li>
<li><strong>for</strong> 循环</li>
</ul>
</li>
<li>条件语句：if…else</li>
<li>swith case</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="comment">//你可以有任意数量的case语句</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">//可选</span></span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：</p>
<ul>
<li><code>break</code>只能用于switch语句和循环语句中，跳出当前语句块</li>
<li><code>continue</code>只能用于循环语句中，用于跳过本次循环，进行下一次循环</li>
<li><code>return</code>用于结束方法</li>
</ul>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>描述：数组是多个相同类型数据的组合，实现对这些数据的统一管理</p>
<p><strong>一维数组</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//动态初始化</span><br><span class="line">int[] arr = new int[3];</span><br><span class="line"></span><br><span class="line">//静态初始化</span><br><span class="line">int a[] = new int[]&#123; 3, 9, 8&#125;;</span><br><span class="line">int[] a = &#123;3,9,8&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>多维数组</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态初始化</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态初始化</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">7</span>&#125;,&#123;<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>数组工具类</strong>：java.util.Arrays</p>
<ul>
<li>equals()：比较两个array是否相等。array拥有相同元素个数，且所有对应元素两两相等。</li>
<li>fill()：将值填入array中。 </li>
<li>sort()：用来对array进行排序。 </li>
<li>binarySearch()：在排好序的array中寻找元素。 </li>
<li>另：System.arraycopy()：array的复制。</li>
</ul>
<h2 id="Java-面向对象编程"><a href="#Java-面向对象编程" class="headerlink" title="Java 面向对象编程"></a>Java 面向对象编程</h2><p>面向对象程序设计：Object Oriented Programming（简称OOP)，对 Java 语言而言，一切皆对象，通过对现实世界中的事物进行理解和抽象，将对象与实体一一对应。</p>
<p>优缺点：</p>
<ul>
<li>软件工程中，工程模块化，实现更低的耦合和更高的内聚；</li>
<li>可重用性高，易扩展</li>
<li>稳定性好</li>
</ul>
<p>Java面向对象的三大特性：<strong>继承</strong>、<strong>封装</strong>、<strong>多态</strong></p>
<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>概念：可以理解为，在一个现有类的基础之上，增加新的方法或<strong>重写</strong>已有方法，从而产生一个新类。</p>
<p>目的：实现代码重用，提高开发效率，实现增量开发，规避对原有代码修改的风险。</p>
<blockquote>
<p> 所有的Java类都继承与一个类：<code>java.lang.Object</code></p>
</blockquote>
<p>权限：</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">private</th>
<th align="center">无修饰</th>
<th align="center">protected</th>
<th align="center">public</th>
</tr>
</thead>
<tbody><tr>
<td align="center">同一类</td>
<td align="center">可访问</td>
<td align="center">可访问</td>
<td align="center">可访问</td>
<td align="center">可访问</td>
</tr>
<tr>
<td align="center">同一包中的子类</td>
<td align="center">不可访问</td>
<td align="center">可访问</td>
<td align="center">可访问</td>
<td align="center">可访问</td>
</tr>
<tr>
<td align="center">同一包中的非子类</td>
<td align="center">不可访问</td>
<td align="center">可访问</td>
<td align="center">可访问</td>
<td align="center">可访问</td>
</tr>
<tr>
<td align="center">不同包中的子类</td>
<td align="center">不可访问</td>
<td align="center">不可访问</td>
<td align="center">可访问</td>
<td align="center">可访问</td>
</tr>
<tr>
<td align="center">不同包中的非子类</td>
<td align="center">不可访问</td>
<td align="center">不可访问</td>
<td align="center">不可访问</td>
<td align="center">可访问</td>
</tr>
</tbody></table>
<p>Java类的划分：</p>
<ul>
<li>普通类：使用<code>class</code>定义且不含抽象方法的类。</li>
<li>抽象类：使用<code>abstract class</code>定义的类，可以含有或不含有抽象方法。</li>
<li>接口：使用<code>interface</code>定义的类。</li>
</ul>
<p>Java类之间继承的规律：</p>
<ul>
<li>普通类可以继承（<code>extends</code>）普通类、抽象类，可以实现（<code>implements</code>）接口；</li>
<li>抽象类可以继承（<code>extends</code>）普通类，抽象类，可以实现（<code>implements</code>）接口；</li>
<li>接口只能继承（<code>extends</code>）接口；</li>
</ul>
<blockquote>
<p>实现从概念上也是一种继承。</p>
</blockquote>
<p>规则：</p>
<ul>
<li>单继承（一个普通类或一个抽象类，要么继承<strong>一个</strong>普通类，要么继承<strong>一个</strong>抽象类）；</li>
<li>一个普通类或一个抽象类或一个接口，可以继承<strong>任意多个</strong>接口。</li>
<li>一个普通类继承一个抽象类后，必须实现这个抽象类中定义的所有抽象（<code>abstract</code>）方法，否则就只能被定义为抽象类。</li>
<li>一个普通类继承一个接口后，必须实现这个接口中定义的所有方法，否则就只能被定义为抽象类。</li>
<li>抽象类继承抽象类，或者实现接口时，可以部分、全部或者完全<strong>不实现</strong>父类抽象类的抽象（<code>abstract</code>）方法或父类接口中定义的方法。</li>
</ul>
<hr>
<h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>概念：隐藏对象的属性和实现细节，仅对外公开访问方法，控制在程序中属性的读和写的访问级别。</p>
<p>目的：增强安全性和简化编程，使用者不必了解具体的实现细节，而只要通过对外公开的访问方法，来使用类的成员。</p>
<p>规则：</p>
<ol>
<li>把所有的属性私有化。</li>
<li>对每个属性提供 <code>getter</code> 和 <code>setter</code> 方法。</li>
<li>如果有一个带参的构造函数的话，那一定要写一个不带参的构造函数。</li>
<li>建议重写 <code>toString</code> 方法，但这不是必须的。</li>
</ol>
<hr>
<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>概念：相同的事物，调用其相同的方法，参数也相同时，但表现的行为却不同。</p>
<blockquote>
<p>继承是实现多态的基础，通过继承并重写方法，将子类向上转型，调用父类的方法实现多态。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汽车接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 汽车名称</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 获得汽车售价</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 宝马</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMW</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"BMW"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">300000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 奔驰</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BENZ</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"BENZ"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">400000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 汽车出售店</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarShop</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 售车收入</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 卖出一部车</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sellCar</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"车型："</span> + car.getName() + <span class="string">"  单价："</span> + car.getPrice());</span><br><span class="line">        <span class="comment">// 增加卖出车售价的收入</span></span><br><span class="line">        money += car.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 售车总收入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CarShop carShop = <span class="keyword">new</span> CarShop();</span><br><span class="line">        <span class="comment">// 卖出一辆宝马</span></span><br><span class="line">        carShop.sellCar(<span class="keyword">new</span> BMW());</span><br><span class="line">        <span class="comment">// 卖出一辆奔驰</span></span><br><span class="line">        carShop.sellCar(<span class="keyword">new</span> BENZ());</span><br><span class="line">        System.out.println(<span class="string">"总收入："</span> + carShop.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">车型：BMW  单价：300000</span><br><span class="line">车型：BENZ  单价：400000</span><br><span class="line">总收入：700000</span><br></pre></td></tr></table></figure>

<p>实现方式：</p>
<ul>
<li>基于接口实现：在接口的多态中，指向接口的引用必须是指定这实现了该接口的一个类的实例，在运行时，根据对象引用的实际类型来执行对应的方法。</li>
<li>基于继承的实现：主要表现在父类和继承该父类的一个或多个子类对某些方法的重写，多个子类对同一方法的重写可以表现出不同的行为。</li>
</ul>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="异常的概念"><a href="#异常的概念" class="headerlink" title="异常的概念"></a>异常的概念</h3><p>异常：将程序执行中发生的不正常情况称为“异常”。(开发过程中的语法错误和逻辑错误不是异常)</p>
<ul>
<li><h3 id="Java异常体系结构"><a href="#Java异常体系结构" class="headerlink" title="Java异常体系结构"></a>Java异常体系结构</h3></li>
</ul>
<p>Java中将异常作为对象来处理，并定义一个基类<code>java.lang.Throwable</code>作为所有异常的超类。下图为Java异常层次结构图：</p>
<p><img src="/images/1569502805826.png" alt="1569502805826"></p>
<p>异常情况分类：</p>
<ul>
<li><strong>Error</strong>:Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。一般不编写针对性的代码进行处理</li>
<li><strong>Exception</strong>:其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。例如：空指针异常，读取不存在的文件，网络中断。</li>
</ul>
<p>异常的处理方法：一是遇到错误就终止程序的运行，二是由程序员编写程序时，考虑错误的检测、错误信息的提示，以及错误的处理。</p>
<p>捕捉错误最理想是在编译期间，但有的错误只能在运行时才会发生。比如：除数为0，数组下标越界等。</p>
<p>异常(Eexception)分类：</p>
<p>运行时异常：</p>
<ul>
<li>编译器不要求强制处理的异常，一般是指编程时的逻辑错误，是程序员应该积极避免出现的异常。<code>java.lang.RuntimeException</code>类及其子类都是运行时异常。</li>
<li>对于这种异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响</li>
</ul>
<p>编译时异常：</p>
<ul>
<li>编译器要求必须处置的异常。即程序在运行时由于外界因素造成的一般性异常。编译器要求java程序必须捕获或声明所有编译时异常。</li>
<li>对于这类异常，如果程序不处理，可能会带来意想不到的结果。</li>
</ul>
<h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h2 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h2><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p><strong>程序(program)</strong>是为完成特定任务、用某种语言编写的一组指令集合，即一段静态代码，静态对象。</p>
<p><strong>进程(progress)</strong>是程序的一次执行过程，或是正在进行的一个程序，是一个动态的过程，有它自身的产生、存在和消亡的过程。—生命周期</p>
<blockquote>
<p>程序是静态的，进程是动态的</p>
</blockquote>
<blockquote>
<p>进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域</p>
</blockquote>
<p><strong>线程(thread)</strong>，进程可进一步细化为线程，是一个程序内部的一条执行路径。</p>
<blockquote>
<p>若一个进程同一时间并行执行多个线程，就是执行多线程的</p>
</blockquote>
<blockquote>
<p>线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器（pc),线程切换的开销小</p>
</blockquote>
<blockquote>
<p>一个进程中的多个线程共享相同的内存单元/内存地址空间-&gt;他们从同一个堆中分配对象，可以访问相同的变量和对象。这使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来安全的隐患</p>
</blockquote>
<p>线程的分类：守护线程/用户线程</p>
<ul>
<li>守护线程：在调用start()方法前调用Thread.setDaemon(true)</li>
<li>用户线程即main线程</li>
</ul>
<p><strong>使用多线程的优缺点及使用场景</strong></p>
<p><strong>优点：</strong></p>
<ul>
<li>提高应用程序的响应，对图形化界面更有意义，可增强用户体验</li>
<li>提高计算机系统cpu的利用率</li>
<li>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改</li>
</ul>
<p><strong>缺点：</strong>：单核CPU下，单线程运行快于多线程。</p>
<p><strong>使用场景：</strong></p>
<ul>
<li>程序需要同时执行两个或多个任务</li>
<li>程序需要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索等</li>
<li>需要一些后台运行的程序</li>
</ul>
<hr>
<h4 id="线程的创建与使用"><a href="#线程的创建与使用" class="headerlink" title="线程的创建与使用"></a>线程的创建与使用</h4><p>方式一：继承Thread类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多线程的创建，方式一：继承于Thread类</span></span><br><span class="line"><span class="comment"> * 1.创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="comment"> * 2.重写Thread类的run()</span></span><br><span class="line"><span class="comment"> * 3.创建Thread类的子类的对象</span></span><br><span class="line"><span class="comment"> * 4.通过此对象调用start()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wusuiwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/7/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.创建Thread类的子类的对象</span></span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//4.通过此对象调用start()</span></span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2.重写Thread类的run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方式二：实现Runnable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多线程的创建，方式二：实现Runnable接口</span></span><br><span class="line"><span class="comment"> * 1.创建一个Runnable接口的实现类</span></span><br><span class="line"><span class="comment"> * 2.实现Runnbale接口的run()</span></span><br><span class="line"><span class="comment"> * 3.创建实现类的对象</span></span><br><span class="line"><span class="comment"> * 4.调用Thread的构造器创建线程对象</span></span><br><span class="line"><span class="comment"> * 5.通过此对象调用start()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wusuiwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/7/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.创建实现类的对象</span></span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//4.调用Thread的构造器创建线程对象</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        <span class="comment">//5.通过此对象调用start()</span></span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="comment">//再次打印</span></span><br><span class="line">        Thread thread1= <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        thread1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建一个Runnable接口的实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.实现Runnbale接口的run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">               	System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两种方式比较：<strong>开发中，优先选择实现Runnable接口的方式</strong></p>
<p>原因：</p>
<ul>
<li>实现的方式没有类的单继承的局限性</li>
<li>实现的方式更适合来处理多个线程有共享数据的情况</li>
</ul>
<hr>
<h4 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h4><p>线程的生命周期状态定义在<code>Thread.State</code>枚举类：</p>
<ul>
<li>New(初始化状态)</li>
<li>Runnable(可运行/运行状态)</li>
<li>Blocked(阻塞状态)</li>
<li>Waiting(无时间限制的等待状态)</li>
<li>Timed_Waiting(有时间限制的等待状态)</li>
<li>Terminated(终止状态)</li>
</ul>
<p><img src="/images/232002051747387-1564456411723.jpg" alt="线程的生命周期"></p>
<hr>
<h4 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h4><p>方式一：同步代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>方式二：同步方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>方法三：锁（Lock）–JDK5.0新增</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h4><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><h3 id="字符串相关的类"><a href="#字符串相关的类" class="headerlink" title="字符串相关的类"></a>字符串相关的类</h3><h4 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h4><p><strong>String 的特性</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Cache the hash code for the string */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>String声明为final，不可被继承</li>
<li>String实现了<code>java.io.Serializable</code>接口：表示字符串是支持序列化的</li>
<li>String实现了 <code>Comparable&lt;String&gt;</code>接口，表示String可以比较大小</li>
<li>String代表不可变的字符序列，简称不可变性</li>
<li>字符串常量池不会存储相同内容的字符串的</li>
</ul>
<p><strong>String的创建</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1=<span class="string">"hello"</span>;<span class="comment">//常量池中（处于方法区）</span></span><br><span class="line">String s2=<span class="keyword">new</span> String(<span class="string">"hello"</span>);<span class="comment">//堆内存中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串拼接</span></span><br><span class="line">String s3= s1+<span class="string">" world!"</span>;<span class="comment">//存于堆内存中</span></span><br><span class="line"><span class="keyword">final</span> String s4=<span class="string">"hello"</span>;</span><br><span class="line">String s5=s4+<span class="string">" world!"</span>;<span class="comment">//存于常量池中</span></span><br></pre></td></tr></table></figure>

<p><strong>String常用方法</strong>：</p>
<ul>
<li><code>int length()</code>：返回字符串的长度： return value.length</li>
<li><code>char charAt(int index)</code>： 返回某索引处的字符return value[index]</li>
<li><code>boolean isEmpty()</code>：判断是否是空字符串：return value.length == 0</li>
<li><code>String toLowerCase()</code>：使用默认语言环境，将 String 中的所有字符转换为小写</li>
<li><code>String toUpperCase()</code>：使用默认语言环境，将 String 中的所有字符转换为大写</li>
<li><code>String trim()</code>： ：返回字符串的副本，忽略前导空白和尾部空白</li>
<li><code>boolean equals(Object obj)</code>：比较字符串的内容是否相同</li>
<li><code>boolean equalsIgnoreCase(String anotherString)</code>：与equals方法类似，忽略大小写</li>
<li><code>String concat(String str)</code>：将指定字符串连接到此字符串的结尾。 等价于用“+”</li>
<li><code>int compareTo(String anotherString)</code>：比较两个字符串的大小</li>
<li><code>String substring(int beginIndex)</code>： ：返回一个新的字符串，它是此字符串的从<br>beginIndex开始截取到最后的一个子字符串。</li>
<li><code>String substring(int beginIndex, int endIndex)</code>：返回一个新字符串，它是此字<br>符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</li>
<li><code>boolean endsWith(String suffix)</code>： ：测试此字符串是否以指定的后缀结束</li>
<li><code>boolean startsWith(String prefix)</code>： ：测试此字符串是否以指定的前缀开始</li>
<li><code>boolean startsWith(String prefix, int toffset)</code>： ：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</li>
<li><code>boolean contains(CharSequence s)</code> ：当且仅当此字符串包含指定的 char 值序列<br>时，返回 true</li>
<li><code>int indexOf(String str)</code>：返回指定子字符串在此字符串中第一次出现处的索引</li>
<li><code>int indexOf(String str, int fromIndex)</code>：返回指定子字符串在此字符串中第一次出<br>现处的索引，从指定的索引开始</li>
<li><code>int lastIndexOf(String str)</code>：返回指定子字符串在此字符串中最右边出现处的索引</li>
<li><code>int lastIndexOf(String str, int fromIndex)</code>： 返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索<br>注：<strong>indexOf和lastIndexOf方法如果未找到都是返回-1</strong></li>
<li><code>String replace(char oldChar, char newChar)</code>： 返回一个新的字符串，它是<br>通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</li>
<li><code>String replace(CharSequence target, CharSequence replacement)</code>：使<br>用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</li>
<li><code>String replaceAll(String regex, String replacement)</code>： 使 用 给 定 的<br>replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</li>
<li><code>String replaceFirst(String regex, String replacement)</code>： 使 用 给 定 的<br>replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</li>
<li><code>boolean matches(String regex)</code>：告知此字符串是否匹配给定的正则表达式。</li>
<li><code>String[] split(String regex)</code>： 根据给定正则表达式的匹配拆分此字符串。</li>
<li><code>String[] split(String regex, int limit)</code>：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中</li>
</ul>
<h4 id="StringBuffer-类"><a href="#StringBuffer-类" class="headerlink" title="StringBuffer 类"></a>StringBuffer 类</h4><p>StringBuffer 类：可变的字符序列，线程安全的，效率低；底层使用char[]存储。</p>
<ul>
<li>默认创建一个16字符的数组，<code>StringBuffer.length()</code>返回的是实际字符串长度。</li>
<li>扩容方式：默认情况下扩容为原来容量的2倍+2，同时将原有数组的元素复制到新的数组中。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> StringBuffer(<span class="number">20</span>);<span class="comment">//建议指定初始的容量</span></span><br></pre></td></tr></table></figure>

<h4 id="StringBuilder-类"><a href="#StringBuilder-类" class="headerlink" title="StringBuilder 类"></a>StringBuilder 类</h4><p>StringBuilder 类：可变的字符序列，线程不安全的，效率高；底层使用char[]存储。</p>
<ul>
<li>默认创建一个16字符的数组，<code>StringBuilder.length()</code>返回的是实际字符串长度。</li>
<li>扩容方式：默认情况下扩容为原来容量的2倍+2，同时将原有数组的元素复制到新的数组中。</li>
</ul>
<p><strong>String、StringBuffer、StringBuilder效率对比：</strong>StringBuilder &gt; StringBuffer &gt; String</p>
<h3 id="JDK-8之前的日期时间API"><a href="#JDK-8之前的日期时间API" class="headerlink" title="JDK 8之前的日期时间API"></a>JDK 8之前的日期时间API</h3><p><img src="/images/image-20191223231544974.png" alt="image-20191223231544974"></p>
<h3 id="JDK-8之后的日期时间API"><a href="#JDK-8之后的日期时间API" class="headerlink" title="JDK 8之后的日期时间API"></a>JDK 8之后的日期时间API</h3><p>JDK 8中日期时间API吸取了Joda-Time的精华，在<code>java.time</code>包中包含了本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）、时区（ZonedDateTime）和持续时间（Duration）的类.</p>
<ul>
<li>java.time – 包含值对象的基础包</li>
<li>java.time.chrono – 提供对不同的日历系统的访问</li>
<li>java.time.format – 格式化和解析时间和日期</li>
<li>java.time.temporal – 包括底层框架和扩展特性</li>
<li>java.time.zone – 包含时区支持的类</li>
</ul>
<p>以下将介绍一些常用类及操作：</p>
<p> <strong>LocalDate、LocalTime、LocalDateTime、Instant</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取当前时间</span></span><br><span class="line"><span class="comment">// 当前日期 ：2019-03-31</span></span><br><span class="line">LocalDate localDate = LocalDate.now(); <span class="comment">//2019-03-31</span></span><br><span class="line"><span class="comment">// 当前时间：10:12:30</span></span><br><span class="line">LocalTime localTime = LocalTime.now();<span class="comment">//10:14:53.576</span></span><br><span class="line"><span class="comment">// 当前日期和时间</span></span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.now();<span class="comment">//2019-03-31T10:14:53.576</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//月份的第一天和最后一天</span></span><br><span class="line">LocalDate localDate = LocalDate.now();</span><br><span class="line"><span class="comment">// 本月的第一天</span></span><br><span class="line">LocalDate with = localDate.with(TemporalAdjusters.firstDayOfMonth());<span class="comment">//2019-03-01</span></span><br><span class="line"><span class="comment">// 本月最后一天</span></span><br><span class="line">LocalDate lastDay = localDate.with(TemporalAdjusters.lastDayOfMonth());<span class="comment">//2019-03-31</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下一月的第一天和下一年的第一天</span></span><br><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line"><span class="comment">// 下一个月的第一天：2019-04-01</span></span><br><span class="line">LocalDate with2 = now.with(TemporalAdjusters.firstDayOfNextMonth());</span><br><span class="line"><span class="comment">// 下一年的第一天：2020-01-01</span></span><br><span class="line">LocalDate with3 = now.with(TemporalAdjusters.firstDayOfNextYear());</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前年第一个周一的日期</span></span><br><span class="line">LocalDate localDate = LocalDate.now();</span><br><span class="line"><span class="comment">// 获取当年的第一天</span></span><br><span class="line">LocalDate firstDayOfYear = localDate.with(TemporalAdjusters.firstDayOfYear());<span class="comment">//2019-01-01</span></span><br><span class="line"><span class="comment">// 获取当前年的第一个周一所在的日期</span></span><br><span class="line">LocalDate with = LocalDate.parse(firstDayOfYear.toString()).with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY));<span class="comment">//2019-01-07</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前年第一个周一的日期</span></span><br><span class="line">LocalDate localDate = LocalDate.now();</span><br><span class="line"><span class="comment">// 获取当年的第一天</span></span><br><span class="line">LocalDate firstDayOfYear = localDate.with(TemporalAdjusters.firstDayOfYear());<span class="comment">//2019-01-01</span></span><br><span class="line"><span class="comment">// 获取当前年的第一个周一所在的日期</span></span><br><span class="line">LocalDate with = LocalDate.parse(firstDayOfYear.toString()).with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY));<span class="comment">//2019-01-07</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指定时间的后几天日期</span></span><br><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line"><span class="comment">// 当前时间的后两天： 2019-03-18</span></span><br><span class="line">LocalDate date1 = now.plusDays(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 当前时间的后两月：2019-05-16</span></span><br><span class="line">LocalDate date2 = now.plusMonths(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算两个日期相距</span></span><br><span class="line">LocalDate of = LocalDate.of(<span class="number">2014</span>, <span class="number">11</span>, <span class="number">07</span>);</span><br><span class="line"><span class="comment">// 相距多少年</span></span><br><span class="line"><span class="keyword">long</span> until = now.until(of, ChronoUnit.YEARS);</span><br><span class="line"><span class="comment">// 相距多少月</span></span><br><span class="line"><span class="keyword">long</span> until2 = now.until(of, ChronoUnit.MONTHS);</span><br><span class="line"><span class="comment">// 相距多少天</span></span><br><span class="line"><span class="keyword">long</span> until3 = now.until(of, ChronoUnit.DAYS);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断年月的周期性</span></span><br><span class="line">LocalDate nowDate = LocalDate.of(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">17</span>);</span><br><span class="line">LocalDate birthDayTime = LocalDate.of(<span class="number">1995</span>, <span class="number">03</span>, <span class="number">16</span>);</span><br><span class="line">MonthDay birthday = MonthDay.of(birthDayTime.getMonth(), birthDayTime.getDayOfMonth());</span><br><span class="line">MonthDay today = MonthDay.from(nowDate);</span><br><span class="line"><span class="keyword">if</span>(birthday.equals(today))&#123;</span><br><span class="line">    System.out.println(<span class="string">"今天是我的生日"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"今天不是我的生日"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一周后的日期</span></span><br><span class="line">LocalDate today = LocalDate.now();  </span><br><span class="line">LocalDate nextWeek = today.plus(<span class="number">1</span>, ChronoUnit.WEEKS); </span><br><span class="line"></span><br><span class="line"><span class="comment">//一年前或一年后的日期</span></span><br><span class="line">LocalDate today = LocalDate.now();  </span><br><span class="line">LocalDate preYear = today.minus(<span class="number">1</span>, ChronoUnit.YEARS);  </span><br><span class="line">LocalDate nextYear = today.plus(<span class="number">1</span>, ChronoUnit.YEARS);</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查闰年</span></span><br><span class="line">LocalDate today = LocalDate.now();  </span><br><span class="line"><span class="keyword">if</span> (today.isLeapYear()) &#123;  </span><br><span class="line">    System.out.println(<span class="string">"今年是闰年！"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"今年不是闰年！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//信用卡到期</span></span><br><span class="line">YearMonth currentYearMonth = YearMonth.now();</span><br><span class="line"><span class="comment">// 月份有多少天</span></span><br><span class="line">currentYearMonth.lengthOfMonth();</span><br><span class="line"><span class="comment">// 信用卡到期日期</span></span><br><span class="line">YearMonth creditCardExpiry = YearMonth.of(<span class="number">2018</span>, Month.FEBRUARY); </span><br><span class="line"></span><br><span class="line"><span class="comment">//date转为LocalTime</span></span><br><span class="line"><span class="comment">// date转为LocalTime</span></span><br><span class="line">Date from = Date.from(instant);</span><br><span class="line">Instant instant2 = from.toInstant();</span><br><span class="line">instant2.atZone(zone).toLocalTime();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将LocalDateTime转为date</span></span><br><span class="line"><span class="comment">// 将LocalDateTime转为date</span></span><br><span class="line">ZoneId zone = ZoneId.systemDefault();</span><br><span class="line">Instant instant = now.atZone(zone).toInstant();</span><br><span class="line">Date from = Date.from(instant);</span><br></pre></td></tr></table></figure>

<p><strong>java.time.format.DateTimeFormatter</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认输出格式：DateTimeFormatter.ISO_DATE_TIME等</span></span><br><span class="line">DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ISO_DATE_TIME;</span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">String strDate = dateTimeFormatter.format(localDateTime);</span><br><span class="line">System.out.println(strDate);</span><br><span class="line"><span class="comment">// 输出 : 2019-06-20T17:32:12.506</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义输出格式</span></span><br><span class="line">DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="string">"yyyyddMM"</span>);</span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">String strDate = dateTimeFormatter.format(localDateTime);</span><br><span class="line">System.out.println(strDate);</span><br><span class="line"><span class="comment">// 输出 : 20192006</span></span><br></pre></td></tr></table></figure>

<p>JDK提供了众多API，将不再一一介绍。</p>
<h3 id="Java比较器"><a href="#Java比较器" class="headerlink" title="Java比较器"></a>Java比较器</h3><h4 id="Comparable接口"><a href="#Comparable接口" class="headerlink" title="Comparable接口"></a>Comparable接口</h4><h4 id="Comparator接口"><a href="#Comparator接口" class="headerlink" title="Comparator接口"></a>Comparator接口</h4><h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><h3 id="BigInteger与BigDecimal"><a href="#BigInteger与BigDecimal" class="headerlink" title="BigInteger与BigDecimal"></a>BigInteger与BigDecimal</h3><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h2 id="Java-8-新特性"><a href="#Java-8-新特性" class="headerlink" title="Java 8 新特性"></a>Java 8 新特性</h2><h4 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h4><h4 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h4><h2 id="Java-9-11新特性"><a href="#Java-9-11新特性" class="headerlink" title="Java 9~11新特性"></a>Java 9~11新特性</h2><h1 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h1>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java SE</tag>
        <tag>Java 8</tag>
        <tag>Java 9~11</tag>
        <tag>面向对象</tag>
        <tag>IO</tag>
        <tag>集合</tag>
        <tag>多线程</tag>
        <tag>常用API</tag>
        <tag>枚举</tag>
        <tag>注解</tag>
        <tag>泛型</tag>
        <tag>网络编程</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习总结</title>
    <url>/2018/03/05/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/MySQL%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>本文主要是 MySQL 学习及使用过程中的总结，内容将随理解的不断加深优化。</p>
<a id="more"></a>

<h2 id="MySQL-概要"><a href="#MySQL-概要" class="headerlink" title="MySQL 概要"></a>MySQL 概要</h2><p><strong>MySQL(<a href="https://www.mysql.com)：开源的轻量级关系型数据库。" target="_blank" rel="noopener">https://www.mysql.com)：开源的轻量级关系型数据库。</a></strong></p>
<h3 id="基于Docker安装MySQL"><a href="#基于Docker安装MySQL" class="headerlink" title="基于Docker安装MySQL"></a>基于Docker安装MySQL</h3><ul>
<li>拉取最新的 MySQL 镜像：<code>docker pull mysql</code></li>
<li>启动镜像，映射端口、指定root密码并挂载日志、配置文件及数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DB_HOME=/home/mysql</span><br><span class="line">DB_CONF_PATH=$DB_HOME/conf:/etc/mysql/conf.d</span><br><span class="line">DB_LOG_PATH=$DB_HOME/logs:/var/log/mysql</span><br><span class="line">DB_DATA_PATH=$DB_HOME/data:/var/lib/mysql</span><br><span class="line">docker run -p 3306:3306 --name mysql -v $DB_CONF_PATH -v $DB_LOG_PATH -v $DB_DATA_PATH -e MYSQL_ROOT_PASSWORD=toor -d mysql</span><br></pre></td></tr></table></figure>

<h3 id="MySQL-Server逻辑架构介绍"><a href="#MySQL-Server逻辑架构介绍" class="headerlink" title="MySQL Server逻辑架构介绍"></a>MySQL Server逻辑架构介绍</h3><p>MySQL虽然经历了多个版本的迭代，但都是基于MySQL基础架构的。MySQL的基础架构大致包括以下几个模块组件：</p>
<p><img src="/images/vwjjm1jgjc.png" alt="img"></p>
<ul>
<li><p><strong>连接层</strong>：提供向外的交互接口（Connectors)，如Java、python等语言可以通过该组件操作MySQL，实现与MySQL的交互</p>
</li>
<li><p><strong>服务层</strong>：</p>
<ul>
<li>管理服务组件和工具组件(Management Service &amp; Utilities) ：  提供对MySQL的集成管理，如备份(Backup),恢复(Recovery),安全管理(Security)等</li>
<li>连接池组件(Connection Pool) ：负责监听对客户端向MySQL Server端的各种请求，接收请求，转发请求到目标模块</li>
<li>SQL接口组件(SQL Interface) ：  接收用户SQL命令</li>
<li>查询分析器组件(Parser) ：解析SQL命令</li>
<li>优化器组件（Optimizer）：对SQL命令按照标准流程进行优化分析</li>
<li>缓存主件（Caches &amp; Buffers） ： 缓存和缓冲组件 </li>
</ul>
</li>
<li><p><strong>引擎层</strong>： 插件式存储引擎（Pluggable Storage Engines）</p>
</li>
<li><p><strong>存储层</strong>： 物理文件（File System） 和日志文件存储</p>
</li>
</ul>
<h3 id="MySQL-存储引擎"><a href="#MySQL-存储引擎" class="headerlink" title="MySQL 存储引擎"></a>MySQL 存储引擎</h3><h3 id="索引-Index"><a href="#索引-Index" class="headerlink" title="索引(Index)"></a>索引(Index)</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><strong>MySQL官方对索引的定义：索引(Index)是帮助MySQL高效获取数据的数据结构。</strong></p>
<p>可以简单理解为：<strong>排好序的快速查找数据结构</strong>。</p>
<p>我们平时所说的索引，如果没有特别说明，都是指<strong>B树（多路搜索树）</strong>数据结构的索引，除了B+树索引外，当然也有<strong>哈希索引</strong>等。</p>
<h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul>
<li>提高数据检索效率，降低数据库iO成本</li>
<li>降低数据排序成本，降低CPU的消耗</li>
</ul>
<h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><ul>
<li>建立索引后，查询速度变快，但更新（insert、update、delete）数据变慢。</li>
<li>性能下降的原因很可能是索引失效导致。</li>
<li>索引创建的原则，经常查询的字段适合创建索引，频繁需要更新的数据不适合创建索引。 </li>
<li>索引字段频繁更新，或者表数据物理删除容易造成索引失效。 </li>
</ul>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul>
<li><p><strong>单值索引</strong>：一个索引只包含单列，一个表可以有多个单值索引</p>
</li>
<li><p><strong>唯一索引</strong>：索引列的值必须唯一，但允许有空值</p>
</li>
<li><p><strong>复合索引</strong>：一个索引包含多列</p>
</li>
</ul>
<h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> mytable(column_name(<span class="keyword">length</span>));</span><br><span class="line"><span class="keyword">ALTER</span> mytable <span class="keyword">ADD</span>  [<span class="keyword">UNIQUE</span>] <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> mytable(column_name(<span class="keyword">length</span>));</span><br><span class="line">	<span class="comment">#主键</span></span><br><span class="line">	<span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span> (column_list);</span><br><span class="line">	<span class="comment">#唯一索引</span></span><br><span class="line">	<span class="keyword">ALTER</span> mytable <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name (column_list);</span><br><span class="line">	<span class="comment">#普通索引</span></span><br><span class="line">	<span class="keyword">ALTER</span> mytable <span class="keyword">ADD</span> <span class="keyword">INDEX</span> index_name (column_list);</span><br><span class="line">	<span class="comment">#全文索引</span></span><br><span class="line">	<span class="keyword">ALTER</span> mytable <span class="keyword">ADD</span> FULLTEXT index_name (column_list);</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除索引</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> [indexname] <span class="keyword">ON</span> mytable;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看索引</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> table_name</span><br></pre></td></tr></table></figure>

<h4 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h4><ul>
<li><p><strong>BTree索引</strong></p>
</li>
<li><p>Hash索引</p>
</li>
<li><p>full-text全文索引</p>
</li>
<li><p>R-Tree索引</p>
</li>
</ul>
<h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><h4 id="EXPALIN"><a href="#EXPALIN" class="headerlink" title="EXPALIN"></a>EXPALIN</h4><ol>
<li>定义：</li>
<li>作用：<ul>
<li>表的读取顺序</li>
<li>数据读取的操作类型</li>
<li>那些索引可以使用</li>
<li>那些索引被实际使用</li>
<li>表之间的引用</li>
<li>每张表有含多少行被优化器查询</li>
</ul>
</li>
</ol>
<p><strong>EXPLAIN</strong> 信息有10列，分别为：id、select_type、table、type、possible_keys、key、 key_len、ref、rows、Extra。</p>
<p><img src="/images/image-20200223111307335.png" alt="image-20200223111307335"></p>
<p>列名解释：</p>
<p><strong>id：</strong>select 查询的序列号，包括一个数字，表示查询中执行select子句或操作表的顺序，值有三种：</p>
<ul>
<li>id相同，执行顺序由上至下；</li>
<li>id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</li>
<li>id相同不同，同时存在</li>
</ul>
<p><strong>select_type:</strong>查询的类型，用于区别普通查询，联合查询，子查询的复杂查询；</p>
<p>取值有：SIMPLE、PRIMARY、SUBQUERY、 DERIVED、UNION、UNION RESULT。</p>
<ul>
<li><strong>SIMPLE</strong>：简单的查询，查询中不包括子查询或UNION</li>
<li><strong>PRIMARY</strong>：查询中若包含任何复杂查询，最外层查询标记为<strong>PRIMARY</strong></li>
<li><strong>SUBQUERY</strong>：在SELECT 或 WHERE 中包括子查询</li>
<li><strong>DERIVED</strong>：在FROM 列表中包含的子查询被标记为衍生表（DERIVED)，MySQL会递归执行这些查询，把结果放到临时表里。</li>
<li><strong>UNION</strong>：若第二个查询出现在UNION之后，则被标记为UNION</li>
<li><strong>UNION RESULT</strong>：从UNION表获取结果的select</li>
</ul>
<p><strong>table</strong>：操作的数据表名</p>
<p><strong>type</strong>：显示查询使用了哪种类型。</p>
<p>从最好到最差依次是：<strong>system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;ALL</strong></p>
<h3 id="查询截取分析"><a href="#查询截取分析" class="headerlink" title="查询截取分析"></a>查询截取分析</h3><h3 id="MySQL-锁机制"><a href="#MySQL-锁机制" class="headerlink" title="MySQL 锁机制"></a>MySQL 锁机制</h3><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下安装maven</title>
    <url>/2018/03/03/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Mybatis%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

<h3 id="Mybatis概要"><a href="#Mybatis概要" class="headerlink" title="Mybatis概要"></a>Mybatis概要</h3><p><strong>Mybatis</strong> 是 Apache的一个Java开源项目，是一个支持动态Sql语句的轻量级持久层框架。</p>
<p><strong>官网</strong>： <a href="https://blog.mybatis.org/" target="_blank" rel="noopener">https://blog.mybatis.org/</a> </p>
<p><strong>maven 依赖：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql数据库连接jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Mybatis 整体架构</strong></p>
<p> <img src="/images/20180701220233514.png" alt="Mybatis整体架构"> </p>
<h3 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a><a href="https://mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="noopener">全局配置文件</a></h3><p>配置文档的顶层结构如下： </p>
<ul>
<li>configuration（配置）<ul>
<li>properties（属性）</li>
<li>settings（设置）</li>
<li>typeAliases（类型别名）</li>
<li>typeHandlers（类型处理器）</li>
<li>objectFactory（对象工厂）</li>
<li>plugins（插件）</li>
<li>environments（环境配置）<ul>
<li>environment（环境变量）<ul>
<li>transactionManager（事务管理器）</li>
<li>dataSource（数据源）</li>
</ul>
</li>
</ul>
</li>
<li>databaseIdProvider（数据库厂商标识）</li>
<li>mappers（映射器）</li>
</ul>
</li>
</ul>
<h4 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h4><p>properties配置的属性可以动态配置且动态转换的，既可以在Java属性文件中配置，亦可以通过properties元素的子元素来传递。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/example/config.properties"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"dev_user"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"F2Fa3!33TYyg"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后就可以在整个配置文件中动态替换需要动态配置的属性值。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Mybatis对属性的加载顺序如下：</p>
<ol>
<li>在 properties 元素体内指定的属性首先被读取。 </li>
<li>然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。 </li>
<li>最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。 </li>
</ol>
<p>因此， 通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的是 properties 属性中指定的属性。 </p>
<h4 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h4><p>所有可配置项见官方文档： <a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/configuration.html#settings</a> </p>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启驼峰命名规则映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>未开启时：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Employee(id=1, lastName=null, gender=女, email=jack@gmail.com)</span><br></pre></td></tr></table></figure>

<p>开启后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Employee(id=1, lastName=jack, gender=女, email=jack@gmail.com)</span><br></pre></td></tr></table></figure>

<h4 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h4><p>typeAliases 是为Java 类型命名一个短的名字。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--type:实体类的全路径。alias:别名，通常首字母大写--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;typeAlias type="com.wusuiwei.mybatis.Employee" alias="Employee"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.wusuiwei.mybatis"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以使用<code>@Alias</code>注解为某个类型指定特定的别名。</p>
<p>Mybatis为常用的Java类型内置了别名，不区分大小写。如下：</p>
<p><img src="../../images/image-20200301175830855.png" alt="image-20200301175830855"></p>
<h4 id="environments"><a href="#environments" class="headerlink" title="environments"></a>environments</h4><p> MyBatis 可以配置成适应多种环境，例如，开发、测试和生产环境需要有不同的配置； </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="databaseIdProvider"><a href="#databaseIdProvider" class="headerlink" title="databaseIdProvider"></a>databaseIdProvider</h4><h4 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h4><p>mappers 将sql映射注册到全局配置中。可以使用类路径、 完全限定资源定位符（包括 file:/// 的 URL） 、 类名和包名 等。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/PostMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/PostMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名</span></span><br><span class="line"><span class="comment">	有sql映射文件并与类在同一目录下。 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.AuthorMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.BlogMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.PostMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"org.mybatis.builder"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h3><p>SQL映射文件只有几个顶级元素：</p>
<ul>
<li><code>cache</code> – 对给定命名空间的缓存配置。</li>
<li><code>cache-ref</code> – 对其他命名空间缓存配置的引用。</li>
<li><code>resultMap</code> – 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。</li>
<li><code>parameterMap</code> – 已被废弃！老式风格的参数映射。更好的办法是使用内联参数，此元素可能在将来被移除。文档中不会介绍此元素。</li>
<li><code>sql</code> – 可被其他语句引用的可重用语句块。</li>
<li><code>insert</code> – 映射插入语句</li>
<li><code>update</code> – 映射更新语句</li>
<li><code>delete</code> – 映射删除语句</li>
<li><code>select</code> – 映射查询语句</li>
</ul>
<h4 id="insert、update、delete"><a href="#insert、update、delete" class="headerlink" title="insert、update、delete"></a>insert、update、delete</h4><p><img src="../../images/image-20200301185357978.png" alt="inset、update、delete元素的属性"></p>
<p> 下面就是 insert，update 和 delete 语句的示例： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertAuthor"</span>&gt;</span></span><br><span class="line">  insert into Author (id,username,password,email,bio)</span><br><span class="line">  values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;bio&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateAuthor"</span>&gt;</span></span><br><span class="line">  update Author set</span><br><span class="line">    username = #&#123;username&#125;,</span><br><span class="line">    password = #&#123;password&#125;,</span><br><span class="line">    email = #&#123;email&#125;,</span><br><span class="line">    bio = #&#123;bio&#125;</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteAuthor"</span>&gt;</span></span><br><span class="line">  delete from Author where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Mybatis允许增删改直接定义以下数据类型的返回值：Integer、Long、Boolean、void。</p>
<p>其他注意事项：</p>
<ul>
<li>自增主键： 以设置 useGeneratedKeys=”true”，然后再把 keyProperty 设置到目标属性 </li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertAuthor"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">  insert into Author (username,password,email,bio)</span><br><span class="line">  values (#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;bio&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>序列作为主键：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertAuthor"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span> <span class="attr">statementType</span>=<span class="string">"PREPARED"</span>&gt;</span></span><br><span class="line">      select Author_SEQ.nextval from dual</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">  insert into Author (username,password,email,bio)</span><br><span class="line">  values (#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;bio&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="参数处理之传值"><a href="#参数处理之传值" class="headerlink" title="参数处理之传值"></a>参数处理之传值</h4><h4 id="参数处理之取值"><a href="#参数处理之取值" class="headerlink" title="参数处理之取值"></a>参数处理之取值</h4><h4 id="返回值映射"><a href="#返回值映射" class="headerlink" title="返回值映射"></a>返回值映射</h4><h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><p> mybatis提供了OGNL表达式动态生成SQL的功能(条件判断使用<a href="http://commons.apache.org/proper/commons-ognl/language-guide.html" target="_blank" rel="noopener">OGNL表达式</a>)，动态SQL有：</p>
<ul>
<li><strong>if</strong></li>
<li><strong>choose (when, otherwise)</strong></li>
<li><strong>trim (where, set)</strong></li>
<li><strong>foreach</strong></li>
<li><strong>script</strong></li>
<li><strong>bind</strong></li>
<li>内置元素(_parameter,_databaseId)</li>
<li><strong>sql(include)</strong></li>
</ul>
<h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p>满足一定的条件，则拼接上响应的sql。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionIf"</span> <span class="attr">resultType</span>=<span class="string">"com.wusuiwei.mybatis.Employee"</span>&gt;</span></span><br><span class="line">    select * from tbl_employee where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span>id = #&#123;id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName.trim()!=&amp;quot;&amp;quot;"</span>&gt;</span>and last_name=#&#123;lastName&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h4><p>根据不同的条件，拼接上不同的SQL语句，相当于Java中的 switch … break 语句。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionChoose"</span> <span class="attr">resultType</span>=<span class="string">"com.wusuiwei.mybatis.Employee"</span>&gt;</span></span><br><span class="line">    select * from tbl_employee where</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"id!=0"</span>&gt;</span></span><br><span class="line">            id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"lastName!=null"</span>&gt;</span></span><br><span class="line">            last_name=#&#123;lastName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            1=1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where, set)"></a>trim (where, set)</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">where 用法比较简单，主要用于动态拼接where子句，根据where子句自动加上"where"和自动去除子句前的"and"</span></span><br><span class="line"><span class="comment">trim 有prefix、suffix、prefixOverrides、suffixOverrides属性，分别提供自定义前缀、后缀及前后缀的去除</span></span><br><span class="line"><span class="comment">set 用法同where，主要用于动态拼接set子句，根据set子句自动加上"set"和自动去除子句后的","</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionWhere"</span> <span class="attr">resultType</span>=<span class="string">"com.wusuiwei.mybatis.Employee"</span>&gt;</span></span><br><span class="line">    select * from tbl_employee</span><br><span class="line">    <span class="comment">&lt;!-- where 1=1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName.trim()!=&amp;quot;&amp;quot;"</span>&gt;</span></span><br><span class="line">            and last_name=#&#123;lastName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionTrim"</span> <span class="attr">resultType</span>=<span class="string">"com.wusuiwei.mybatis.Employee"</span>&gt;</span></span><br><span class="line">    select * from tbl_employee</span><br><span class="line">    <span class="comment">&lt;!-- where 1=1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">""</span> <span class="attr">suffixOverrides</span>=<span class="string">"and"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=0"</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName.trim()!=&amp;quot;&amp;quot;"</span>&gt;</span></span><br><span class="line">            last_name=#&#123;lastName&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateEmp"</span>&gt;</span></span><br><span class="line">    update tbl_employee</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName.trim()!=&amp;quot;&amp;quot;"</span>&gt;</span></span><br><span class="line">            last_name=#&#123;lastName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and email.trim()!=&amp;quot;&amp;quot;"</span>&gt;</span></span><br><span class="line">            email=#&#123;email&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>遍历集合，取出集合元素。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">foreach 属性的作用如下：</span></span><br><span class="line"><span class="comment">collection 	指定操作的集合</span></span><br><span class="line"><span class="comment">item		命名元素名称</span></span><br><span class="line"><span class="comment">separator	指定foreach子句之间的分隔符</span></span><br><span class="line"><span class="comment">index		指定键或索引的名称</span></span><br><span class="line"><span class="comment">close		指定foreach子句结束的字符</span></span><br><span class="line"><span class="comment">open		指定foreach子句开始的字符</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertEmps"</span>&gt;</span></span><br><span class="line">    insert into tbl_employee(<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"insertColumn"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>)</span><br><span class="line">    values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span> <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        (#&#123;emp.id&#125;,#&#123;emp.lastName&#125;,#&#123;emp.gender&#125;,#&#123;emp.email&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p> <code>bind</code> 元素可以从 OGNL 表达式中创建一个变量并将其绑定到上下文。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlogsLike"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"'%' + _parameter.getTitle() + '%'"</span> /&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE title LIKE #&#123;pattern&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="sql-include"><a href="#sql-include" class="headerlink" title="sql(include)"></a>sql(include)</h4><p><code>sql</code>、<code>include</code>主要用于提供sql，及应用提取的sql。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"insertColumn"</span>&gt;</span></span><br><span class="line">    id,last_name,gender,email</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertEmps"</span>&gt;</span></span><br><span class="line">    insert into tbl_employee(<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"insertColumn"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>)</span><br><span class="line">    values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span>  <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">index</span>=<span class="string">""</span> <span class="attr">close</span>=<span class="string">""</span> <span class="attr">open</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        (#&#123;emp.id&#125;,#&#123;emp.lastName&#125;,#&#123;emp.gender&#125;,#&#123;emp.email&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="内置参数"><a href="#内置参数" class="headerlink" title="内置参数"></a>内置参数</h4><p>Mybatis提供了<code>_parameter</code>、<code>_databaseId</code> 2个内置参数。</p>
<p><code>_databaseId</code>  表示所使用数据库的别名</p>
<p><code>_parameter</code> 表示当前方法的参数，如果为一个参数，则为该参数，如果为多个参数，则为参数处理后的map.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;insert id=&quot;insert&quot;&gt;</span><br><span class="line">  &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;int&quot; order=&quot;BEFORE&quot;&gt;</span><br><span class="line">    &lt;if test=&quot;_databaseId == &apos;oracle&apos;&quot;&gt;</span><br><span class="line">      select seq_users.nextval from dual</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;_databaseId == &apos;db2&apos;&quot;&gt;</span><br><span class="line">      select nextval for seq_users from sysibm.sysdummy1&quot;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">  &lt;/selectKey&gt;</span><br><span class="line">  insert into users values (#&#123;id&#125;, #&#123;name&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure>

<h4 id="script"><a href="#script" class="headerlink" title="script"></a>script</h4><p> 要在带注解的映射器接口类中使用动态 SQL，可以使用 <em>script</em> 元素。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update</span>(&#123;<span class="string">"&lt;script&gt;"</span>,</span><br><span class="line">         <span class="string">"update Author"</span>,</span><br><span class="line">         <span class="string">"  &lt;set&gt;"</span>,</span><br><span class="line">         <span class="string">"    &lt;if test='username != null'&gt;username=#&#123;username&#125;,&lt;/if&gt;"</span>,</span><br><span class="line">         <span class="string">"    &lt;if test='password != null'&gt;password=#&#123;password&#125;,&lt;/if&gt;"</span>,</span><br><span class="line">         <span class="string">"    &lt;if test='email != null'&gt;email=#&#123;email&#125;,&lt;/if&gt;"</span>,</span><br><span class="line">         <span class="string">"    &lt;if test='bio != null'&gt;bio=#&#123;bio&#125;&lt;/if&gt;"</span>,</span><br><span class="line">         <span class="string">"  &lt;/set&gt;"</span>,</span><br><span class="line">         <span class="string">"where id=#&#123;id&#125;"</span>,</span><br><span class="line">         <span class="string">"&lt;/script&gt;"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateAuthorValues</span><span class="params">(Author author)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>mybatis提供了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong>。</p>
<p>一级缓存作用域为sqlsession，mybatis默认开启一级缓存。</p>
<p>二级缓存作用域为namespace。</p>
<h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h4><p>一级缓存效果测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">this</span>.getSqlSessionFactory();</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        EmployeeMapper mapper = sqlSession.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Employee employee = mapper.selectOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">		<span class="comment">//命中缓存，不会查询数据库</span></span><br><span class="line">		Employee employee1 = mapper.selectOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee1);</span><br><span class="line">	&#125;finnaly&#123;</span><br><span class="line">		sqlSession.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一级缓存失效情况：</p>
<ul>
<li>SqlSession不同</li>
<li>SqlSession相同，查询条件不同</li>
<li>SqlSession相同，2次查询之间，做了增删改操作</li>
<li>SqlSession相同，清除缓存</li>
</ul>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">this</span>.getSqlSessionFactory();</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        EmployeeMapper mapper = sqlSession.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Employee employee = mapper.selectOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一级缓存失效情况</span></span><br><span class="line">        <span class="comment">//1.SqlSession不同</span></span><br><span class="line">        SqlSession sqlSession1 = sqlSessionFactory.openSession();</span><br><span class="line">        EmployeeMapper mapper1 = sqlSession1.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//Employee selectOne(int id);</span></span><br><span class="line">        Employee employee1 = mapper1.selectOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee1);</span><br><span class="line">        sqlSession1.close();</span><br><span class="line">        <span class="comment">//2.SqlSession相同，查询条件不同</span></span><br><span class="line">        Employee employee2 = mapper.selectOne(<span class="number">2</span>);</span><br><span class="line">        System.out.println(employee2);</span><br><span class="line">        <span class="comment">//3.SqlSession相同，2次查询之间，做了增删改操作</span></span><br><span class="line">        <span class="comment">//void update(Employee employee);</span></span><br><span class="line">        mapper.update(<span class="keyword">new</span> Employee(<span class="number">1</span>,<span class="string">"jackson"</span>,<span class="keyword">null</span>,<span class="keyword">null</span>));</span><br><span class="line">        Employee employee3 = mapper.selectOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee3);</span><br><span class="line">        <span class="comment">//4.SqlSession相同，清除缓存</span></span><br><span class="line">        sqlSession.clearCache();</span><br><span class="line">        Employee employee4 = mapper.selectOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee4);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h4><p>工作原理：sqlsession关闭后，将一级缓存保存到二级缓存中，当有新的sqlsession查询相同数据时，即可命中二级缓存。</p>
<p>使用方法：</p>
<ol>
<li>缓存POJO类必须<strong>实现序列化接口</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3330851033429007657L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在<code>mybatis-config.xml</code>文件中申明开启二级缓存(默认是开启的，非必须，但利于养成开发习惯)：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启驼峰匹配--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启二级缓存,全局总开关，默认开启，这里关闭，mapper中开启了也没用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在namespace中开启二级缓存(<code>&lt;cache&gt;&lt;/cache&gt;</code>或<cache-ref namespace="com.someone.application.data.SomeMapper"/>)。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wusuiwei.mybatis.EmployeeMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;cache&gt;&lt;/cache&gt;</code>标签有以下参数：</p>
<p>type                             指定cache接口实现类            </p>
<p>eviction                       收回策略，默认LUR</p>
<blockquote>
<p>LRU （最近最少使用的）:  移除最长时间不被使用的对象，这是默认值 。<br>FIFO （先进先出〉 ： 按对象进入缓存的顺序来移除它们 。<br>SOFT （软引用） ： 移除基于垃圾回收器状态和软引用规则的对象 。<br>WEAK （弱引用） ： 更积极地移除基于垃圾收集器状态和弱引用规则的对象</p>
</blockquote>
<p>flushInterval               刷新间隔，默认不设置，仅在调用语句时刷新，以毫秒计。</p>
<p>readOnly                     默认false，只读的缓存会给所有调用的实例其引用地址（相同的实例）。</p>
<p>size                               引用数目，默认1024， ，要记住缓存的对象数目和运行环境的可用内存资源数目。</p>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testSelectOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">this</span>.getSqlSessionFactory();</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        EmployeeMapper mapper = sqlSession.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Employee employee = mapper.selectOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">		* 二级缓存：namespace级别的缓存，sqlsession关闭后将缓存移交到二级缓存中。</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession1 = sqlSessionFactory.openSession();</span><br><span class="line">        EmployeeMapper mapper1 = sqlSession1.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Employee employee1 = mapper1.selectOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee1);</span><br><span class="line">        <span class="comment">//如果sqlsession未在其他sqlsession查询之前关闭，则不会将一级缓存保存到二级缓存，</span></span><br><span class="line">        <span class="comment">//其他sqlsession如果要查询相同的数据，仍需要查询数据库</span></span><br><span class="line">        <span class="comment">//sqlSession.close();</span></span><br><span class="line">        sqlSession1.close();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="集成第三方缓存框架"><a href="#集成第三方缓存框架" class="headerlink" title="集成第三方缓存框架"></a>集成第三方缓存框架</h4><p>当前分布式系统成为主流，为了实现分布式的缓存，需要我们集成第三方缓存框架，如redis、ehcache、memcached等。</p>
<p>mybatis提供了<code>org.apache.ibatis.cache.Cache</code>接口，便于我们集成第三方框架。</p>
<p>此处，以ehcache集成为例，官方提供了实现（ <a href="https://github.com/mybatis/ehcache-cache" target="_blank" rel="noopener">https://github.com/mybatis/ehcache-cache</a> ），具体集成步骤如下：</p>
<ul>
<li>添加maven依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在全局配置<code>mybatis-configuration.xml</code>中开启缓存</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启二级缓存  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>xxxMapper.xml</code>文件中整合ehcache 缓存 </li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wusuiwei.mybatis.EmployeeMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启ehcache缓存--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.ehcache.EhcacheCache"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>缓存框架的配置文件(在类路径下新增  <strong>ehcache.xml</strong>  ，并添加以下内容)</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"../config/ehcache.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"F:\develop\ehcache"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsOnDisk</span>=<span class="string">"10000000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">persistence</span> <span class="attr">strategy</span>=<span class="string">"localTempSwap"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】CentOS 8 下安装maven</title>
    <url>/2018/03/03/01_%E8%BD%AF%E4%BB%B6/Linux%20%E8%BD%AF%E4%BB%B6/%E3%80%90Linux%E3%80%91CentOS%208%E5%AE%89%E8%A3%85Maven/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>最近项目中使用到了maven，需要在服务器端安装一个maven。</p>
<a id="more"></a>

<p>maven官网： <a href="http://maven.apache.org" target="_blank" rel="noopener">http://maven.apache.org</a></p>
<p>下载地址：<a href="https://downloads.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz" target="_blank" rel="noopener">https://downloads.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</a></p>
<p>安装步骤：</p>
<ol>
<li>下载</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://downloads.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>解压</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar zxvf apache-maven-3.6.1-bin.tar.gz -C /opt/</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>环境变量配置</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>在文件后面添加一下信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export M2_HOME=/opt/apache-maven-3.6.1</span><br><span class="line">export PATH=$PATH:$M2_HOME/bin</span><br></pre></td></tr></table></figure>

<p>让配置文件生效：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>验证</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn -version</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>配置文件详解</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 存放本地仓库的地方 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/opt/apache-maven-3.6.3/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">  	</span><br><span class="line">	<span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云中央仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云apache仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/apache<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">&lt;!-- 一些自定义配置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>myProfile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 激活这个配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">&lt;!-- 全局属性配置，让所有 maven 项目新建时默认都是 java8、UTF-8 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk.version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>【Tool】IDEA 常用快捷键</title>
    <url>/2018/02/12/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/IDEA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Tool%E3%80%91IDEA%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<p>这里存一张 IDEA 的快捷键映射表，方便以后查询。</p>
<a id="more"></a>

<p><img src="/images/IDEA_%E5%BF%AB%E6%8D%B7%E9%94%AE_zh.jpg" alt="IDEA 快捷键_zh"></p>
]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java SE】Java 反射</title>
    <url>/2016/07/16/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Java%20SE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Java%20SE%E3%80%91Java%20%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java SE】Java 注解</title>
    <url>/2016/07/16/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Java%20SE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Java%20SE%E3%80%91Java%20IO%E6%B5%81/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java SE】Java 多线程</title>
    <url>/2016/07/16/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Java%20SE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Java%20SE%E3%80%91Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java SE】Java 注解</title>
    <url>/2016/07/16/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Java%20SE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Java%20SE%E3%80%91Java%20%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java SE】Java 注解</title>
    <url>/2016/07/16/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Java%20SE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Java%20SE%E3%80%91Java%20%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java SE】Java 枚举类</title>
    <url>/2016/07/14/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Java%20SE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Java%20SE%E3%80%91Java%20%E6%9E%9A%E4%B8%BE%E7%B1%BB/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java SE】Java 异常处理</title>
    <url>/2016/07/12/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Java%20SE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Java%20SE%E3%80%91Java%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java SE】Java 面向对象</title>
    <url>/2016/07/02/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Java%20SE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Java%20SE%E3%80%91Java%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java SE】Java 基本语法</title>
    <url>/2016/06/30/02_%E5%85%A8%E6%A0%88%E7%AC%94%E8%AE%B0/Java%20SE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90Java%20SE%E3%80%91Java%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>全栈笔记</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>RBAC权限模型</title>
    <url>/2016/05/07/03_%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/RBAC%E6%9D%83%E9%99%90%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>RBAC权限模型</tag>
      </tags>
  </entry>
  <entry>
    <title>【众筹-后台】环境搭建</title>
    <url>/2016/05/07/04_%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E4%BC%97%E7%AD%B9%E9%A1%B9%E7%9B%AE/%E3%80%90%E4%BC%97%E7%AD%B9-%E5%90%8E%E5%8F%B0%E3%80%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>project</category>
      </categories>
      <tags>
        <tag>众筹</tag>
      </tags>
  </entry>
  <entry>
    <title>【众筹-后台】数据库设计</title>
    <url>/2016/05/07/04_%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E4%BC%97%E7%AD%B9%E9%A1%B9%E7%9B%AE/%E3%80%90%E4%BC%97%E7%AD%B9-%E5%90%8E%E5%8F%B0%E3%80%91%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

<h3 id="权限管理数据库设计"><a href="#权限管理数据库设计" class="headerlink" title="权限管理数据库设计"></a>权限管理数据库设计</h3><p>根据 <strong>RBAC权限模型</strong> 设计该模块数据库数据表，采用 <strong>RBAC0模型</strong> 。</p>
]]></content>
      <categories>
        <category>project</category>
      </categories>
      <tags>
        <tag>众筹</tag>
      </tags>
  </entry>
  <entry>
    <title>vue环境搭建</title>
    <url>/2016/05/07/04_%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0/vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<a id="more"></a>

<h2 id="安装-node-环境"><a href="#安装-node-环境" class="headerlink" title="安装 node 环境"></a>安装 node 环境</h2><ol>
<li>下载地址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></li>
</ol>
<ul>
<li>校验是否安装成功：<code>node -v</code></li>
</ul>
<p><img src="/images/image-20200820181810541.png" alt="image-20200820181810541"></p>
<ol start="2">
<li>安装国内npm镜像：</li>
</ol>
<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<ul>
<li>校验是否安装成功：<code>cnpm -v</code></li>
</ul>
<p><img src="/images/image-20200820182034693.png" alt="image-20200820182034693"></p>
<h2 id="搭建-vue-项目环境"><a href="#搭建-vue-项目环境" class="headerlink" title="搭建 vue 项目环境"></a>搭建 vue 项目环境</h2><ul>
<li>cnpm 全局安装 vue-cli ：<code>cnpm intall --global vue-cli</code></li>
<li>校验 vue-cli 是否安装成功</li>
</ul>
<p><img src="/images/image-20200820182735520.png" alt="image-20200820182735520"></p>
<h2 id="vue-项目搭建"><a href="#vue-项目搭建" class="headerlink" title="vue 项目搭建"></a>vue 项目搭建</h2><ul>
<li>创建 vue 项目：<code>vue init webpack [dirName]</code> </li>
</ul>
<p>如：<code>vue init webpack hydrogen-vue</code></p>
<p>需要设置以下内容：</p>
<p>Project name hydrogen-vue  　　　　　　　　　 // 你的项目名称<br>Project description A Vue.js project 　　          // 你的项目描述<br>Author wusuiwei　　　　　　　　　　　　　　 // 作者的名称<br>Vue build standalone 　　　　　　　　　　   // 打包方式，默认，直接回车<br>Install vue-router? No 　　　　　　　　　      // 是否安装 vue-router，路由，选(Y)<br>Use ESLint to lint your code? No 　　　// 是否安装 eslint管理代码，不推荐，不然你还会想办法关掉它，选(N)<br>Setup unit tests with Karma + Mocha? No　　// 是否安装Karma + Mocha 单元测试工具，选（N）<br>Setup e2e tests with Nightwatch? No　　　　// 是否安装e2e端到端测试工具，选（N）</p>
<ul>
<li>项目初始化：<code>npm install</code></li>
<li>项目启动：<code>npm run dev</code></li>
</ul>
<h2 id="项目结构详解"><a href="#项目结构详解" class="headerlink" title="项目结构详解"></a>项目结构详解</h2><p><img src="/images/image-20200820184108762.png" alt="image-20200820184108762"></p>
<p>　　1、build：构建脚本目录</p>
<p>　　　　1）build.js  ==&gt; 生产环境构建脚本；``</p>
<p>　　　　2）check-versions.js  ==&gt; 检查npm，node.js版本；</p>
<p>　　　　3）utils.js  ==&gt; 构建相关工具方法；</p>
<p>　　　　4）vue-loader.conf.js  ==&gt; 配置了css加载器以及编译css之后自动添加前缀；</p>
<p>　　　　5）webpack.base.conf.js  ==&gt; webpack基本配置；</p>
<p>　　　　6）webpack.dev.conf.js  ==&gt; webpack开发环境配置；</p>
<p>　　　　7）webpack.prod.conf.js  ==&gt; webpack生产环境配置；</p>
<p>　　2、config：项目配置</p>
<p>　　　　1）dev.env.js  ==&gt; 开发环境变量；</p>
<p>　　　　2）index.js  ==&gt; 项目配置文件；</p>
<p>　　　　3）prod.env.js  ==&gt; 生产环境变量；</p>
<p>　　3、node_modules：npm 加载的项目依赖模块（依赖包都在这里）</p>
<p>　　4、src：这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：</p>
<p>　　　　1）assets：资源目录，放置一些图片或者公共js、公共css。这里的资源会被webpack构建；</p>
<p>　　　　2）components：组件目录，我们写的组件就放在这个目录里面；</p>
<p>　　　　3）router：前端路由，我们需要配置的路由路径写在index.js里面；</p>
<p>　　　　4）App.vue：根组件；</p>
<p>　　　　5）main.js：入口js文件；</p>
<p>　　5、static：静态资源目录，如图片、字体等。不会被webpack构建</p>
<p>　　6、index.html：首页入口文件，可以添加一些 meta 信息等</p>
<p>　　7、package.json：npm包配置文件，定义了项目的npm脚本，依赖包等信息``</p>
<p>　　8、README.md：项目的说明文档，markdown 格式</p>
<p>　　9、.xxxx文件：这些是一些配置文件，包括语法配置，git配置等</p>
]]></content>
      <categories>
        <category>project</category>
      </categories>
      <tags>
        <tag>自动化测试平台</tag>
      </tags>
  </entry>
</search>
