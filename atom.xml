<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wusuiwei</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wusuiwei.github.io/"/>
  <updated>2020-02-19T15:54:05.347Z</updated>
  <id>http://wusuiwei.github.io/</id>
  
  <author>
    <name>wusuiwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java笔记/Untitled 1</title>
    <link href="http://wusuiwei.github.io/2020/02/19/Java%E7%AC%94%E8%AE%B0/Untitled%201/"/>
    <id>http://wusuiwei.github.io/2020/02/19/Java笔记/Untitled 1/</id>
    <published>2020-02-19T15:54:05.347Z</published>
    <updated>2020-02-19T15:54:05.347Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java笔记/Spring Cloud 笔记之 Feign</title>
    <link href="http://wusuiwei.github.io/2020/01/17/Java%E7%AC%94%E8%AE%B0/Spring%20Cloud%20%E7%AC%94%E8%AE%B0%E4%B9%8B%20Feign/"/>
    <id>http://wusuiwei.github.io/2020/01/17/Java笔记/Spring Cloud 笔记之 Feign/</id>
    <published>2020-01-17T08:35:25.505Z</published>
    <updated>2020-01-17T08:37:26.007Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java笔记/Spring Cloud 笔记之 Ribbon</title>
    <link href="http://wusuiwei.github.io/2020/01/17/Java%E7%AC%94%E8%AE%B0/Spring%20Cloud%20%E7%AC%94%E8%AE%B0%E4%B9%8B%20Ribbon/"/>
    <id>http://wusuiwei.github.io/2020/01/17/Java笔记/Spring Cloud 笔记之 Ribbon/</id>
    <published>2020-01-17T08:35:25.505Z</published>
    <updated>2020-01-17T08:38:00.621Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java笔记/【SpringCloud】Eureka</title>
    <link href="http://wusuiwei.github.io/2020/01/17/Java%E7%AC%94%E8%AE%B0/%E3%80%90SpringCloud%E3%80%91Eureka/"/>
    <id>http://wusuiwei.github.io/2020/01/17/Java笔记/【SpringCloud】Eureka/</id>
    <published>2020-01-17T08:35:25.505Z</published>
    <updated>2020-01-17T08:35:25.505Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java笔记/【Docker】常用操作总结</title>
    <link href="http://wusuiwei.github.io/2020/01/07/Java%E7%AC%94%E8%AE%B0/%E3%80%90Docker%E3%80%91%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://wusuiwei.github.io/2020/01/07/Java笔记/【Docker】常用操作总结/</id>
    <published>2020-01-07T08:22:55.247Z</published>
    <updated>2020-01-10T07:10:19.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-概要"><a href="#Docker-概要" class="headerlink" title="Docker 概要"></a>Docker 概要</h2><p>官网： <a href="https://www.docker.com/" target="_blank" rel="noopener">https://www.docker.com/</a> </p><p>官方中文文档： <a href="https://docker-doc.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">https://docker-doc.readthedocs.io/zh_CN/latest/index.html</a> </p><h3 id="理念"><a href="#理念" class="headerlink" title="理念"></a>理念</h3><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>这里以CentOS 7安装过程为例，其他系统安装过程可参考官方文档。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 移除旧版本</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装一些docker安装必备的工具</span></span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加软件源信息（阿里云）</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装docker</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动 docker 后台服务</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">卸载docker-ce</span></span><br><span class="line"><span class="meta">#</span><span class="bash">卸载docker软件包（不会删除镜像、容器、卷及其他配置文件）</span></span><br><span class="line">sudo yum remove docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash">删除镜像、容器、卷及其他配置文件</span></span><br><span class="line">sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h2 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 镜像操作相关</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检索镜像（从 https://hub.docker.com 检索）</span></span><br><span class="line">docker search mysql #OFFICIAL表示官方发行版本</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像:dockerpull 镜像名:tag</span></span><br><span class="line">docker pull mysql #拉取latest的mysql镜像</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看本地镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除镜像:docker rmi image-id</span></span><br><span class="line">docker rmi 29e0a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器操作相关</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行容器：docker run --name container-name:tag -d image-name -p 8080:8090</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d:表示后台运行容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p:端口映射，docker容器默认与外界是隔绝的，需要进行端口映射才能访问</span></span><br><span class="line">docker run --name myTomcat -d tomcat:8.5.32 -p 8090:8080</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器</span></span><br><span class="line">docker ps #查看所有运行中的容器</span><br><span class="line">docker ps -a #查看所有容器</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止运行容器:docker stop container-id</span></span><br><span class="line">docker stop 1cbabce49b84</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动容器</span></span><br><span class="line">docker start 1cbabce49b84</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除容器</span></span><br><span class="line">docker rm 1cbabce49b84</span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器日志：docker logs container-name/container-id</span></span><br><span class="line">docker logs myTtomcat1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 仓库操作相关</span></span><br></pre></td></tr></table></figure><h2 id="Docker-数据管理"><a href="#Docker-数据管理" class="headerlink" title="Docker 数据管理"></a>Docker 数据管理</h2><p> <img src="../../images/types-of-mounts.png" alt="img"> </p><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><h3 id="DockerFile的指令详解"><a href="#DockerFile的指令详解" class="headerlink" title="DockerFile的指令详解"></a>DockerFile的指令详解</h3><p><code>FROM</code>：基础镜像</p><p><code>MAINTAINER</code>：</p><p><code>RUN</code>：</p><p><code>EXPOSE</code>：</p><p><code>WORKDIR</code>:</p><p><code>ENV</code>：</p><p><code>ADD</code>：</p><p><code>COPY</code>：</p><p><code>VOLUME</code>：</p><p><code>CMD</code>：</p><p><code>ENTRYPOINT</code>：</p><p><code>ONBUILD</code>：</p><h2 id="常用镜像"><a href="#常用镜像" class="headerlink" title="常用镜像"></a>常用镜像</h2><h3 id="Docker安装MySQL"><a href="#Docker安装MySQL" class="headerlink" title="Docker安装MySQL"></a>Docker安装MySQL</h3><h3 id="Docker安装Redis"><a href="#Docker安装Redis" class="headerlink" title="Docker安装Redis"></a>Docker安装Redis</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker-概要&quot;&gt;&lt;a href=&quot;#Docker-概要&quot; class=&quot;headerlink&quot; title=&quot;Docker 概要&quot;&gt;&lt;/a&gt;Docker 概要&lt;/h2&gt;&lt;p&gt;官网： &lt;a href=&quot;https://www.docker.com/&quot; targ
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>项目笔记/hydrogen-master/【Hydrogen】团队维护</title>
    <link href="http://wusuiwei.github.io/2020/01/06/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/hydrogen-master/%E3%80%90Hydrogen%E3%80%91%E5%9B%A2%E9%98%9F%E7%BB%B4%E6%8A%A4/"/>
    <id>http://wusuiwei.github.io/2020/01/06/项目笔记/hydrogen-master/【Hydrogen】团队维护/</id>
    <published>2020-01-06T05:30:55.744Z</published>
    <updated>2020-01-06T08:58:16.179Z</updated>
    
    <content type="html"><![CDATA[<p>整个界面采用简单的人员管理界面，提供<strong>人员名称</strong>、<strong>邮箱</strong>模糊搜索功能，分页功能，邀请加入功能，移除功能；</p><p>表设计：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整个界面采用简单的人员管理界面，提供&lt;strong&gt;人员名称&lt;/strong&gt;、&lt;strong&gt;邮箱&lt;/strong&gt;模糊搜索功能，分页功能，邀请加入功能，移除功能；&lt;/p&gt;
&lt;p&gt;表设计：&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【Linux】虚拟化技术</title>
    <link href="http://wusuiwei.github.io/2019/12/23/Java%E7%AC%94%E8%AE%B0/%E3%80%90Linux%E3%80%91%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    <id>http://wusuiwei.github.io/2019/12/23/Java笔记/【Linux】虚拟化技术/</id>
    <published>2019-12-23T02:06:04.000Z</published>
    <updated>2020-01-08T01:39:24.060Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里；不积小流，无以成江海。</p></blockquote><a id="more"></a><h2 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h2><p><strong>定义</strong>： 通过<strong>虚拟化</strong>技术将一台计算机<strong>虚拟</strong>为多台逻辑计算机。 在一台计算机上同时运行多个逻辑计算机，每个逻辑计算机可运行不同的操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。 </p><p><strong>优势</strong>：</p><p><strong>劣势</strong>：</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://wusuiwei.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://wusuiwei.github.io/tags/Linux/"/>
    
      <category term="虚拟化技术" scheme="http://wusuiwei.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Docker" scheme="http://wusuiwei.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【NoSql】NoSql入门和概述</title>
    <link href="http://wusuiwei.github.io/2019/12/23/Java%E7%AC%94%E8%AE%B0/%E3%80%90NoSql%E3%80%91NoSql%E5%85%A5%E9%97%A8%E5%92%8C%E6%A6%82%E8%BF%B0/"/>
    <id>http://wusuiwei.github.io/2019/12/23/Java笔记/【NoSql】NoSql入门和概述/</id>
    <published>2019-12-23T02:06:04.000Z</published>
    <updated>2019-12-23T16:10:47.501Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里；不积小流，无以成江海。</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="NoSQL" scheme="http://wusuiwei.github.io/categories/NoSQL/"/>
    
    
      <category term="NoSql" scheme="http://wusuiwei.github.io/tags/NoSql/"/>
    
  </entry>
  
  <entry>
    <title>前端知识/Vue知识框架</title>
    <link href="http://wusuiwei.github.io/2019/12/07/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/Vue%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6/"/>
    <id>http://wusuiwei.github.io/2019/12/07/前端知识/Vue知识框架/</id>
    <published>2019-12-06T17:14:23.800Z</published>
    <updated>2019-12-06T17:14:23.800Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>项目笔记/hydrogen-master/【Hydrogen】项目环境搭建</title>
    <link href="http://wusuiwei.github.io/2019/11/29/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/hydrogen-master/%E3%80%90Hydrogen%E3%80%91%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://wusuiwei.github.io/2019/11/29/项目笔记/hydrogen-master/【Hydrogen】项目环境搭建/</id>
    <published>2019-11-29T11:19:01.308Z</published>
    <updated>2019-12-05T11:37:21.595Z</updated>
    
    <content type="html"><![CDATA[<p>登录页：</p><ul><li>登录（自动注册）</li><li>忘记密码</li></ul><p>账号信息</p><p>项目组管理：</p><ul><li>项目列表</li><li>邀请加入项目组</li><li>移交管理员</li><li>删除成员</li><li>退出项目组/解散项目组（仅自己一个人时可解散）</li></ul><p>测试数据库管理：</p><ul><li>mysql</li></ul><p>用例管理：</p><ul><li>新增用例</li><li>修改用例</li><li>删除用例</li><li>运行用例</li><li>复制用例</li></ul><p>测试用例集管理：</p><ul><li>新增用例集</li></ul><p>参数化环境管理</p><ul><li>查询</li><li>新增</li><li>修改</li><li>删除</li><li>参数值管理<ul><li>查询</li><li>新增</li><li>修改</li><li>删除</li></ul></li></ul><p>测试报告</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;登录页：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登录（自动注册）&lt;/li&gt;
&lt;li&gt;忘记密码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;账号信息&lt;/p&gt;
&lt;p&gt;项目组管理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目列表&lt;/li&gt;
&lt;li&gt;邀请加入项目组&lt;/li&gt;
&lt;li&gt;移交管理员&lt;/li&gt;
&lt;li&gt;删除成员
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【Spring Boot】异常处理机制</title>
    <link href="http://wusuiwei.github.io/2019/11/29/Java%E7%AC%94%E8%AE%B0/%E3%80%90Spring%20Boot%E3%80%91%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://wusuiwei.github.io/2019/11/29/Java笔记/【Spring Boot】异常处理机制/</id>
    <published>2019-11-29T03:08:09.000Z</published>
    <updated>2019-11-30T16:08:46.161Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里；不积小流，无以成江海。</p></blockquote><p>今天，刚好用到了Spring Boot的统一异常处理，复习并总结一下。主要内容如下：</p><ul><li>Spring Boot 提供的默认异常处理机制</li><li>如何自定义异常</li><li>项目中如何使用统一异常处理</li></ul><a id="more"></a><h3 id="默认异常处理"><a href="#默认异常处理" class="headerlink" title="默认异常处理"></a>默认异常处理</h3><p>默认情况下，Spring Boot 分情况提供了两种处理方式：</p><ul><li>浏览器访问（ Accept: text/html ）：返回一个 error 页面</li></ul><p><img src="/images/image-20191130232129074.png" alt="image-20191130232129074"></p><ul><li>其他客户端访问（如Postman，Accept: */*）：返回一个json数据</li></ul><p><img src="/images/image-20191130232326570.png" alt="image-20191130232326570"></p><p>原理：</p><p>异常处理的自动配置类：<code>org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration</code> </p><p>向 Spring 容器中添加了以下组件：</p><ul><li>DefaultErrorAttributes</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>BasicErrorController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//产生html类型的数据</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(produces = MediaType.TEXT_HTML_VALUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        HttpStatus status = getStatus(request);</span><br><span class="line">        Map&lt;String, Object&gt; model = Collections</span><br><span class="line">            .unmodifiableMap(getErrorAttributes(request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">        response.setStatus(status.value());</span><br><span class="line">        <span class="comment">//去哪个页面作为错误页面，包含页面地址和页面内容</span></span><br><span class="line">        ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">        <span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//产生json数据</span></span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">        HttpStatus status = getStatus(request);</span><br><span class="line">        <span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(status);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; body = getErrorAttributes(request, isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(body, status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ErrorPageCustomizer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;error.path:/error&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String path = <span class="string">"/error"</span>;<span class="comment">//系统错误之后来到error请求来进行处理；</span></span><br></pre></td></tr></table></figure><ul><li>DefaultErrorViewResolver</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    ModelAndView modelAndView = resolve(String.valueOf(status.value()), model);</span><br><span class="line">    <span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">        modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认Spring Boot可以去找到一个页面：/error/404.html</span></span><br><span class="line">    String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//模板引擎可以解析这个页面地址就用模板引擎解析</span></span><br><span class="line">    TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName,</span><br><span class="line">                                                                                           <span class="keyword">this</span>.applicationContext);</span><br><span class="line">    <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果模板引擎可用的情况下返回到errorViewName指定的视图地址</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的界面 error/404.html</span></span><br><span class="line">    <span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常处理步骤：</p><p>一旦系统出现4xx或5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/erroe请求，就会被BasicErrorController处理：</p><p>1) 响应页面，去哪个页面由DefaultErrorViewResolver解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">        ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">        <span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> modelAndView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）如何定制错误响应：</p><ul><li><p>如何定制错误的页面：</p><ul><li>在有模板引擎情况下，将错误页面命名为<code>404.html</code>，放在模板引擎文件夹下的error文件夹下<ul><li>也可以使用4xx或5xx作为错误页面的文件名来匹配错误，优先精确匹配404.html</li><li>页面可以获取到的信息：<ul><li>timestamp:时间戳</li><li>status：状态码</li><li>error：错误提示</li><li>exception：异常</li><li>message：异常消息</li><li>errors：JSR303数据校验的错误</li></ul></li></ul></li><li>没有模板引擎，静态资源文件夹下error文件中404.html页面</li><li>以上位置都未配置错误页面，则默认来到springboot默认错误页面</li></ul></li></ul><ul><li><p>如何定制错误的JSON数据：</p><ul><li></li></ul></li></ul><h3 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h3><p><strong>定制错误页面</strong></p><p><strong>定制错误JSON数据</strong></p><h3 id="统一异常处理实践"><a href="#统一异常处理实践" class="headerlink" title="统一异常处理实践"></a>统一异常处理实践</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天，刚好用到了Spring Boot的统一异常处理，复习并总结一下。主要内容如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Boot 提供的默认异常处理机制&lt;/li&gt;
&lt;li&gt;如何自定义异常&lt;/li&gt;
&lt;li&gt;项目中如何使用统一异常处理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://wusuiwei.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://wusuiwei.github.io/tags/SpringBoot/"/>
    
      <category term="异常处理" scheme="http://wusuiwei.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【SpringBoot】拦截器</title>
    <link href="http://wusuiwei.github.io/2019/11/29/Java%E7%AC%94%E8%AE%B0/%E3%80%90SpringBoot%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://wusuiwei.github.io/2019/11/29/Java笔记/【SpringBoot】自定义拦截器/</id>
    <published>2019-11-29T03:08:09.000Z</published>
    <updated>2019-11-30T15:15:19.331Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里；不积小流，无以成江海。</p></blockquote><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><blockquote><p>实现java web token的拦截</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;应用实例&quot;&gt;&lt;a href=&quot;#应用实例&quot; class=&quot;headerlink&quot; title=&quot;应用实例&quot;&gt;&lt;/a&gt;应用实例&lt;/h3&gt;&lt;blockqu
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://wusuiwei.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://wusuiwei.github.io/tags/SpringBoot/"/>
    
      <category term="拦截器" scheme="http://wusuiwei.github.io/tags/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>【接口自动化测试框架（Java版）】基本环境搭建</title>
    <link href="http://wusuiwei.github.io/2019/11/27/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E3%80%90%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%EF%BC%88Java%E7%89%88%EF%BC%89%E3%80%91%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://wusuiwei.github.io/2019/11/27/自动化测试/【接口自动化测试框架（Java版）】基本环境搭建/</id>
    <published>2019-11-27T07:23:49.000Z</published>
    <updated>2019-11-27T16:09:13.520Z</updated>
    
    <content type="html"><![CDATA[<p>从本文起，将详细介绍 Java 自动化框架的搭建及相关知识学习，我也是边写边学，不一定完全正确，如果有异常情况，请在评论区留言。</p><p>本文主要介绍JDK安装配置、IDEA安装配置、SpringBoot项目创建。</p><a id="more"></a><p>应用技术：SpringBoot、HttpClient、Spring Data JPA、TestNG、ReportNG、Jenkins、Vue等技术</p><h4 id="JDK-环境搭建"><a href="#JDK-环境搭建" class="headerlink" title="JDK 环境搭建"></a>JDK 环境搭建</h4><p>想要运行java项目，必须有jdk环境，我使用的是JDK8.</p><p>下载地址： <a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a> </p><p>选择自己系统的相应版本并下载安装即可。</p><p>jdk需要配置环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">变量名：JAVA_HOME</span><br><span class="line">变量值：C:\Program Files (x86)\Java\jdk1.8.0_91        // 要根据自己的实际路径配置</span><br><span class="line">变量名：CLASSPATH</span><br><span class="line">变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;         //记得前面有个&quot;.&quot;</span><br><span class="line">变量名：Path</span><br><span class="line">变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br></pre></td></tr></table></figure><p>检查是否安装成功：</p><p>运行CMD，执行命令：<code>java -version</code></p><p><img src="/images/image-20191127195442440.png" alt="image-20191127195442440"></p><h4 id="IDEA-环境搭建"><a href="#IDEA-环境搭建" class="headerlink" title="IDEA 环境搭建"></a>IDEA 环境搭建</h4><p>搭建过程非常简单，仅需要下载安装并输入注册码即可。</p><p>下载地址： <a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener">https://www.jetbrains.com/idea/download/</a> ( <strong>Ultimate</strong> 版本)</p><p>注册码（亲测可用，建议官方购买)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CATF44LT7C-eyJsaWNlbnNlSWQiOiJDQVRGNDRMVDdDIiwibGljZW5zZWVOYW1lIjoiVmxhZGlzbGF2IEtvdmFsZW5rbyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiJGb3IgZWR1Y2F0aW9uYWwgdXNlIG9ubHkiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJQUyIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiUkQiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJQQyIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IkRDIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In1dLCJoYXNoIjoiMTE1MzA4ODUvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-BZLL+H88k449OQC56NsqU0fwb6wMAX1Di+CK5HS46DuOD1E68HPiTqREdn8DzrLVAoMkJReaH30RaIDLwUI8GEFifDcCYE5RbpE5ApNJ8mcUJr8oA1nrjY9IzZCgrSBFr4GAOLqSfXH+1UJ3K8UPqGh8nThomnKW9Jvv9pA7HIH/KrNm2RLV/aNMHWO8Q44A8ToXm7g5FS2lW903URPQ0KFgxT11w/KL81UkHm6yUXC7/LTAygIBArI8j+XUk3rlz4rpi2wrJclYXukrKQqH/V6CTbnVV3d6XAdtCqjryQ2Ga7bP/XTLjwAGwPEB3Q1W7LHNQ7CsyvZG/oTSOgD2YQ==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</span><br></pre></td></tr></table></figure><h4 id="SpringBoot-项目创建"><a href="#SpringBoot-项目创建" class="headerlink" title="SpringBoot 项目创建"></a>SpringBoot 项目创建</h4><p>从IDEA搭建项目过程非常简单，下面将简要介绍一下</p><p><img src="/images/image-20191127194915867.png" alt="image-20191127194915867"></p><p>首先，选择”Spring Initalizr”,下一步：</p><p><img src="/images/image-20191127195614517.png" alt="image-20191127195614517"></p><p>输入Group、Artifact，下一步:</p><p><img src="/images/image-20191127195953736.png" alt="image-20191127195953736"></p><p>然后选择依赖，这里我们暂时先不选择任何依赖，下一步：</p><p><img src="/images/image-20191127200110798.png" alt="image-20191127200110798"></p><p>输入项目名及项目本次存储地址，”Finish”即可创建一个SpringBoot项目。</p><p><img src="/images/image-20191127200144375.png" alt="image-20191127200144375"></p><p>好了，至此，SpringBoot项目基本搭建完成，开心~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从本文起，将详细介绍 Java 自动化框架的搭建及相关知识学习，我也是边写边学，不一定完全正确，如果有异常情况，请在评论区留言。&lt;/p&gt;
&lt;p&gt;本文主要介绍JDK安装配置、IDEA安装配置、SpringBoot项目创建。&lt;/p&gt;
    
    </summary>
    
    
      <category term="接口自动化" scheme="http://wusuiwei.github.io/categories/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
      <category term="自动化测试" scheme="http://wusuiwei.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="接口自动化" scheme="http://wusuiwei.github.io/tags/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>【接口自动化测试框架（Java版）】集成HttpClient</title>
    <link href="http://wusuiwei.github.io/2019/11/27/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E3%80%90%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%EF%BC%88Java%E7%89%88%EF%BC%89%E3%80%91%E9%9B%86%E6%88%90HttpClient/"/>
    <id>http://wusuiwei.github.io/2019/11/27/自动化测试/【接口自动化测试框架（Java版）】集成HttpClient/</id>
    <published>2019-11-27T07:23:49.000Z</published>
    <updated>2019-11-27T13:07:58.271Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍HttpClient的用法及与SpringBoot的集成。</p><a id="more"></a><h4 id="HttpClient-介绍"><a href="#HttpClient-介绍" class="headerlink" title="HttpClient 介绍"></a>HttpClient 介绍</h4><p> <a href="http://hc.apache.org/index.html" target="_blank" rel="noopener">HttpClient</a>是Apache Jakarta Common下的子项目，用来提供高效的、最新的、功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。 </p><p>HttpClient相比传统JDK自带的URLConnection，增加了易用性和灵活性，它不仅使客户端发送Http请求变得容易，而且也方便开发人员测试接口（基于Http协议的），提高了开发的效率，也方便提高代码的健壮性。因此熟练掌握HttpClient是很重要的必修内容，掌握HttpClient后，相信对于Http协议的了解会更加深入。</p><p><strong>org.apache.commons.httpclient.HttpClient与org.apache.http.client.HttpClient的区别</strong></p><p>Commons的HttpClient项目现在是生命的尽头，不再被开发,  已被Apache HttpComponents项目HttpClient和HttpCore  模组取代，提供更好的性能和更大的灵活性。  </p><p><strong>HttpClient 特性</strong></p><ul><li>实现了所有 HTTP 的方法（GET,POST,PUT,DELETE 等）</li><li>支持自动转向</li><li>支持 HTTPS 协议</li><li>支持代理服务器等</li></ul><p>引用HttpClient非常简单，仅需要在maven中添加相关依赖即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 集成 httpclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="原生HttpClient使用"><a href="#原生HttpClient使用" class="headerlink" title="原生HttpClient使用"></a>原生HttpClient使用</h4><h5 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//打开浏览器</span></span><br><span class="line">    CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">    <span class="comment">//申明Get请求</span></span><br><span class="line">    HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    CloseableHttpResponse response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.判断状态码</span></span><br><span class="line">    <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">//从响应中取出实体</span></span><br><span class="line">        HttpEntity entity = response.getEntity();</span><br><span class="line">        <span class="comment">//使用工具类EntityUtils将实体并转换成字符串</span></span><br><span class="line">        String s = EntityUtils.toString(entity);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    response.close();</span><br><span class="line">    httpClient.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPost</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//打开浏览器</span></span><br><span class="line">    CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">    <span class="comment">//声明Post请求</span></span><br><span class="line">    HttpPost httpPost = <span class="keyword">new</span> HttpPost(<span class="string">"https://www.oschina.net/"</span>);</span><br><span class="line">    <span class="comment">//3.开源中国为了安全，防止恶意攻击，在post请求中都限制了浏览器才能访问</span></span><br><span class="line">    httpPost.addHeader(<span class="string">"User-Agent"</span>,<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span>);</span><br><span class="line">    ArrayList&lt;NameValuePair&gt; params = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"scope"</span>, <span class="string">"project"</span>));</span><br><span class="line">    params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"q"</span>, <span class="string">"java"</span>));</span><br><span class="line">    UrlEncodedFormEntity formEntity = <span class="keyword">new</span> UrlEncodedFormEntity(params, Charset.forName(<span class="string">"utf-8"</span>));</span><br><span class="line">    httpPost.setEntity(formEntity);</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    CloseableHttpResponse response = httpClient.execute(httpPost);</span><br><span class="line">    <span class="comment">//判断状态码</span></span><br><span class="line">    <span class="keyword">if</span>(response.getStatusLine().getStatusCode()==<span class="number">200</span>)&#123;</span><br><span class="line">        HttpEntity entity = response.getEntity();</span><br><span class="line">        String string = EntityUtils.toString(entity, <span class="string">"utf-8"</span>);</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.关闭资源</span></span><br><span class="line">    response.close();</span><br><span class="line">    httpClient.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SpringBoot集成HttpClient"><a href="#SpringBoot集成HttpClient" class="headerlink" title="SpringBoot集成HttpClient"></a>SpringBoot集成HttpClient</h4><p>引入Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 集成 httpclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍HttpClient的用法及与SpringBoot的集成。&lt;/p&gt;
    
    </summary>
    
    
      <category term="接口自动化" scheme="http://wusuiwei.github.io/categories/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
      <category term="自动化测试" scheme="http://wusuiwei.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="接口自动化" scheme="http://wusuiwei.github.io/tags/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>自动化测试/自动化测试模式介绍</title>
    <link href="http://wusuiwei.github.io/2019/11/21/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D/"/>
    <id>http://wusuiwei.github.io/2019/11/21/自动化测试/自动化测试模式介绍/</id>
    <published>2019-11-21T13:39:20.440Z</published>
    <updated>2019-11-21T13:39:20.440Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>自动化测试/Web自动化测试之PageObject思想</title>
    <link href="http://wusuiwei.github.io/2019/11/21/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%B9%8BPageObject%E6%80%9D%E6%83%B3/"/>
    <id>http://wusuiwei.github.io/2019/11/21/自动化测试/Web自动化测试之PageObject思想/</id>
    <published>2019-11-21T13:36:27.439Z</published>
    <updated>2019-11-21T13:36:27.439Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>自动化测试/Web自动化测试之Selenium Webdriver入门</title>
    <link href="http://wusuiwei.github.io/2019/11/21/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%B9%8BSelenium%20Webdriver%E5%85%A5%E9%97%A8/"/>
    <id>http://wusuiwei.github.io/2019/11/21/自动化测试/Web自动化测试之Selenium Webdriver入门/</id>
    <published>2019-11-21T13:33:34.179Z</published>
    <updated>2019-11-29T11:19:01.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="元素定位方法"><a href="#元素定位方法" class="headerlink" title="元素定位方法"></a>元素定位方法</h2><p><code>id</code>定位</p><p><code>class</code>定位</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;元素定位方法&quot;&gt;&lt;a href=&quot;#元素定位方法&quot; class=&quot;headerlink&quot; title=&quot;元素定位方法&quot;&gt;&lt;/a&gt;元素定位方法&lt;/h2&gt;&lt;p&gt;&lt;code&gt;id&lt;/code&gt;定位&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class&lt;/code&gt;定位&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【设计模式】装饰者模式</title>
    <link href="http://wusuiwei.github.io/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://wusuiwei.github.io/2019/11/21/设计模式/【设计模式】装饰者模式/</id>
    <published>2019-11-21T05:45:49.000Z</published>
    <updated>2019-11-22T13:02:32.114Z</updated>
    
    <content type="html"><![CDATA[<p><strong>“装饰者模式”</strong>动态的将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;“装饰者模式”&lt;/strong&gt;动态的将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://wusuiwei.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Design Pattern" scheme="http://wusuiwei.github.io/tags/Design-Pattern/"/>
    
      <category term="Decorator Pattern" scheme="http://wusuiwei.github.io/tags/Decorator-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>【设计模式】观察者模式</title>
    <link href="http://wusuiwei.github.io/2019/11/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://wusuiwei.github.io/2019/11/18/设计模式/【设计模式】观察者模式/</id>
    <published>2019-11-18T13:45:49.000Z</published>
    <updated>2019-11-22T13:02:32.114Z</updated>
    
    <content type="html"><![CDATA[<p><strong>观察者模式</strong>（又被称为发布-订阅（Publish/Subscribe）模式，属于行为型模式的一种，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。</p><a id="more"></a><hr><h3 id="功能需求–天气预报项目"><a href="#功能需求–天气预报项目" class="headerlink" title="功能需求–天气预报项目"></a>功能需求–天气预报项目</h3><blockquote><ul><li>气象站可以将每天测量到的温度、湿度、气压等数据以公告的方式发布出去（比如发布到自己的网站或第三方）</li><li>需要设计开放型API，便于其他第三方也能接入气象站获取数据</li><li>提供温度、气压和湿度的接口</li><li>测量数据更新时，要能实时通知第三方</li></ul></blockquote><hr><h3 id="传统的设计方案"><a href="#传统的设计方案" class="headerlink" title="传统的设计方案"></a>传统的设计方案</h3><h4 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h4><p>此系统的三部分为气象站（通过物理设备获取气象信息）、WeatherData对象（追踪气象数据并更新布告板）、布告板（显示气象信息）。</p><p><img src="/images/15741511334251.png" alt="1574151133425"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WeatherData 气象数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wusuiwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/11/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> CurrentConditionsDisplay currentConditionsDisplay;</span><br><span class="line">    <span class="keyword">private</span> StatisticsDisPlay statisticsDisPlay;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentConditionsDisplay = <span class="keyword">new</span> CurrentConditionsDisplay();</span><br><span class="line">        <span class="keyword">this</span>.statisticsDisPlay = <span class="keyword">new</span> StatisticsDisPlay();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dataChange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        currentConditionsDisplay.update(temperature,pressure,humidity);</span><br><span class="line">        statisticsDisPlay.update(temperature,pressure,humidity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pressure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> humidity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> pressure, <span class="keyword">float</span> humidity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        dataChange();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * “目前状况”布告板，用于显示气象信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wusuiwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/11/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature,<span class="keyword">float</span> pressure,<span class="keyword">float</span> humidity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.humidity=humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"***Today mTemperature: "</span>+ temperature+<span class="string">"***"</span>);</span><br><span class="line">        System.out.println(<span class="string">"***Today mPressure: "</span>+ pressure+<span class="string">"***"</span>);</span><br><span class="line">        System.out.println(<span class="string">"***Today mHumidity: "</span>+ humidity+<span class="string">"***"</span>);</span><br><span class="line">        System.out.println(<span class="string">"===================================================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * “气象统计”布告板，用于显示气象统计信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wusuiwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/11/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatisticsDisPlay</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature,<span class="keyword">float</span> pressure,<span class="keyword">float</span> humidity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.humidity=humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (temperature &gt;= <span class="number">32</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            System.out.println(<span class="string">"***High Temperature's Day In Summer: "</span>+ i+<span class="string">"***"</span>);</span><br><span class="line">            System.out.println(<span class="string">"===================================================="</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终端，用于收集气象信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wusuiwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/11/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 WeatherData</span></span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line">        <span class="comment">//更新天气情况</span></span><br><span class="line">        weatherData.setData(<span class="number">32</span>, <span class="number">150</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="comment">//天气变化</span></span><br><span class="line">        weatherData.setData(<span class="number">31</span>, <span class="number">160</span>, <span class="number">20</span>);</span><br><span class="line">        weatherData.setData(<span class="number">31</span>, <span class="number">158</span>, <span class="number">19</span>);</span><br><span class="line">        weatherData.setData(<span class="number">32</span>, <span class="number">160</span>, <span class="number">21</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><ul><li>无法在运行时动态添加/删除布告板</li><li>添加新的布告板需要修改代码</li><li>面向实现编程，而非面向接口编程</li><li>未封装改变的部分</li></ul><h3 id="观察者模式的原理"><a href="#观察者模式的原理" class="headerlink" title="观察者模式的原理"></a>观察者模式的原理</h3><h4 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h4><p><strong>观察者模式</strong>定义了对象之间一对多依赖，这样一来，当一个对象改变状态时，他的所有依赖者都会收到通知并自动更新。</p><h4 id="模式图解"><a href="#模式图解" class="headerlink" title="模式图解"></a>模式图解</h4><p><img src="/images/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.gif" alt="12"></p><ul><li>Subject: 目标</li><li>ConcreteSubject: 具体目标</li><li>Observer: 观察者</li><li>ConcreteObserver: 具体观察者</li></ul><h3 id="观察者模式的设计方案"><a href="#观察者模式的设计方案" class="headerlink" title="观察者模式的设计方案"></a>观察者模式的设计方案</h3><h4 id="方案设计-1"><a href="#方案设计-1" class="headerlink" title="方案设计"></a>方案设计</h4><p><img src="/images/15742121602391.png" alt="1574212160239"></p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><h4 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h4><h3 id="观察者模式的应用场景"><a href="#观察者模式的应用场景" class="headerlink" title="观察者模式的应用场景"></a>观察者模式的应用场景</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;观察者模式&lt;/strong&gt;（又被称为发布-订阅（Publish/Subscribe）模式，属于行为型模式的一种，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://wusuiwei.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Design Pattern" scheme="http://wusuiwei.github.io/tags/Design-Pattern/"/>
    
      <category term="Observer Pattern" scheme="http://wusuiwei.github.io/tags/Observer-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>【设计模式】策略模式</title>
    <link href="http://wusuiwei.github.io/2019/11/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://wusuiwei.github.io/2019/11/15/设计模式/【设计模式】策略模式/</id>
    <published>2019-11-15T11:44:57.000Z</published>
    <updated>2019-11-15T13:57:55.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>策略模式：</strong>定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。策略模式的结构如下：</p><p> <img src="/images/3-1Q116103K1205.gif" alt="Strategy Pattern"> </p><a id="more"></a><hr><h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p><strong>策略模式：</strong>定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p>策略模式的角色如下：</p><ul><li>抽象策略(Strategy)类：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口, 环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。</li><li>具体策略(Concrete Strategy)类：实现抽象策略定义的接口，提供具体的算法实现。</li><li>环境(Context)类：持有一个策略类的引用，最终给客户端调用。</li></ul><p>其结构图如下图：</p><p> <img src="/images/3-1Q116103K1205-1573820059937.gif" alt="Strategy Pattern"> </p><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><p>【例】游戏设定：游戏中有多种角色：国王(King)、皇后(Queen)、骑士(Knight)、妖怪(Troll)等，武器种类有匕首(King)、斧头(King)、宝剑(King)、弓箭(King)等，每个角色一次只能使用一种武器，而且游戏过程中可以换用其他武器。请分析并实现这个业务。</p><p>分析：每个角色游戏过程中可以换用不同的武器，即可以使用不同的武器。</p><p>首先，定义一个使用武器的抽象策略类（WeaponBahavior)，里面包括一个使用武器的抽象方法<code>useWeapon()</code>，然后定义使用匕首(King)、斧头(King)、宝剑(King)、弓箭(King)等武器的具体策略类，他们实现了抽象策略类的抽象方法。</p><p>其次，定义一个角色环境类（Character），分别定义国王(King)、皇后(Queen)、骑士(Knight)、妖怪(Troll)等角色类并继承于（Character），在环境类中使用抽象策略类的<code>useWeapon()</code>方法，可以使用面向对象基础的多态的用法，实现根据不同的角色调用不同的武器。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义环境类</span></span><br><span class="line"><span class="keyword">import</span> behavior.WeaponBehavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Charater</span> </span>&#123;</span><br><span class="line">    WeaponBehavior weaponBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performUseWeapon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        weaponBehavior.useWepon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeapon</span><span class="params">(WeaponBehavior weaponBehavior)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weaponBehavior = weaponBehavior;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承环境类，实现不同的角色</span></span><br><span class="line"><span class="keyword">import</span> behavior.impl.BowAndArrowBahavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">King</span> <span class="keyword">extends</span> <span class="title">Charater</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">King</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        weaponBehavior = <span class="keyword">new</span> BowAndArrowBahavior();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> behavior.impl.KnifeBehavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Knight</span> <span class="keyword">extends</span> <span class="title">Charater</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Knight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        weaponBehavior = <span class="keyword">new</span> KnifeBehavior();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> behavior.impl.AxeBehavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queen</span> <span class="keyword">extends</span> <span class="title">Charater</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Queen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        weaponBehavior = <span class="keyword">new</span> AxeBehavior();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> behavior.impl.BowAndArrowBahavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Troll</span> <span class="keyword">extends</span> <span class="title">Charater</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Troll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        weaponBehavior = <span class="keyword">new</span> BowAndArrowBahavior();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义抽象策略类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeaponBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">useWepon</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现抽象策略类，提供不同的具体策略</span></span><br><span class="line"><span class="keyword">import</span> behavior.WeaponBehavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AxeBehavior</span> <span class="keyword">implements</span> <span class="title">WeaponBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useWepon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用斧头"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> behavior.WeaponBehavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BowAndArrowBahavior</span> <span class="keyword">implements</span> <span class="title">WeaponBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useWepon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用弓箭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> behavior.WeaponBehavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KnifeBehavior</span> <span class="keyword">implements</span> <span class="title">WeaponBehavior</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useWepon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用匕首"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> behavior.WeaponBehavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwordBehavior</span> <span class="keyword">implements</span> <span class="title">WeaponBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useWepon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用宝剑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">import</span> behavior.impl.KnifeBehavior;</span><br><span class="line"><span class="keyword">import</span> character.Charater;</span><br><span class="line"><span class="keyword">import</span> character.King;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Charater charater = <span class="keyword">new</span> King();</span><br><span class="line">        charater.setWeapon(<span class="keyword">new</span> SwordBehavior());</span><br><span class="line">        charater.performUseWeapon();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试结果：使用宝剑</span></span><br></pre></td></tr></table></figure><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>主要优点：</p><ul><li>策略模式提供了对“开闭原则”的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。 </li><li>策略模式提供了管理相关的算法族的办法。 </li><li>策略模式提供了可以替换继承关系的办法。 </li><li>使用策略模式可以避免使用多重条件转移语句。 </li></ul><p>主要缺点：</p><ul><li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。 </li><li>策略模式将造成产生很多策略类。</li><li>无法同时在客户端使用多个策略类，</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>在以下情况下可以使用策略模式：</p><ul><li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。</li><li>一个系统需要动态地在几种算法中选择一种。</li><li>如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</li><li>不希望客户端知道复杂的、与算法相关的数据结构，在具体策略类中封装算法和相关的数据结构，提高算法的保密性与安全性。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;策略模式：&lt;/strong&gt;定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。策略模式的结构如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/images/3-1Q116103K1205.gif&quot; alt=&quot;Strategy Pattern&quot;&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://wusuiwei.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Design Pattern" scheme="http://wusuiwei.github.io/tags/Design-Pattern/"/>
    
      <category term="Strategy Pattern" scheme="http://wusuiwei.github.io/tags/Strategy-Pattern/"/>
    
  </entry>
  
</feed>
