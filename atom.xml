<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wusuiwei</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wusuiwei.github.io/"/>
  <updated>2020-03-04T11:15:31.898Z</updated>
  <id>http://wusuiwei.github.io/</id>
  
  <author>
    <name>wusuiwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java笔记/SpringMVC学习笔记</title>
    <link href="http://wusuiwei.github.io/2020/03/04/Java%E7%AC%94%E8%AE%B0/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://wusuiwei.github.io/2020/03/04/Java笔记/SpringMVC学习笔记/</id>
    <published>2020-03-04T11:15:31.898Z</published>
    <updated>2020-03-04T11:15:31.898Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java笔记/Spring学习笔记</title>
    <link href="http://wusuiwei.github.io/2020/03/04/Java%E7%AC%94%E8%AE%B0/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://wusuiwei.github.io/2020/03/04/Java笔记/Spring学习笔记/</id>
    <published>2020-03-04T11:14:17.763Z</published>
    <updated>2020-03-04T11:14:17.763Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java笔记/SSM 框架整合笔记</title>
    <link href="http://wusuiwei.github.io/2020/03/04/Java%E7%AC%94%E8%AE%B0/SSM%20%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0/"/>
    <id>http://wusuiwei.github.io/2020/03/04/Java笔记/SSM 框架整合笔记/</id>
    <published>2020-03-04T11:10:46.361Z</published>
    <updated>2020-03-04T11:14:12.498Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SSM框架整合笔记"><a href="#SSM框架整合笔记" class="headerlink" title="SSM框架整合笔记"></a>SSM框架整合笔记</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SSM框架整合笔记&quot;&gt;&lt;a href=&quot;#SSM框架整合笔记&quot; class=&quot;headerlink&quot; title=&quot;SSM框架整合笔记&quot;&gt;&lt;/a&gt;SSM框架整合笔记&lt;/h3&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java笔记/Mybatis学习笔记</title>
    <link href="http://wusuiwei.github.io/2020/03/01/Java%E7%AC%94%E8%AE%B0/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://wusuiwei.github.io/2020/03/01/Java笔记/Mybatis学习笔记/</id>
    <published>2020-03-01T02:57:25.280Z</published>
    <updated>2020-03-04T11:15:04.989Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mybatis概要"><a href="#Mybatis概要" class="headerlink" title="Mybatis概要"></a>Mybatis概要</h3><p><strong>Mybatis</strong> 是 Apache的一个Java开源项目，是一个支持动态Sql语句的轻量级持久层框架。</p><p><strong>官网</strong>： <a href="https://blog.mybatis.org/" target="_blank" rel="noopener">https://blog.mybatis.org/</a> </p><p><strong>maven 依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql数据库连接jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Mybatis 整体架构</strong></p><p> <img src="../../images/20180701220233514.png" alt="Mybatis整体架构"> </p><h3 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a><a href="https://mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="noopener">全局配置文件</a></h3><p>配置文档的顶层结构如下： </p><ul><li>configuration（配置）<ul><li>properties（属性）</li><li>settings（设置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境配置）<ul><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li>databaseIdProvider（数据库厂商标识）</li><li>mappers（映射器）</li></ul></li></ul><h4 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h4><p>properties配置的属性可以动态配置且动态转换的，既可以在Java属性文件中配置，亦可以通过properties元素的子元素来传递。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/example/config.properties"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"dev_user"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"F2Fa3!33TYyg"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后就可以在整个配置文件中动态替换需要动态配置的属性值。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Mybatis对属性的加载顺序如下：</p><ol><li>在 properties 元素体内指定的属性首先被读取。 </li><li>然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。 </li><li>最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。 </li></ol><p>因此， 通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的是 properties 属性中指定的属性。 </p><h4 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h4><p>所有可配置项见官方文档： <a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/configuration.html#settings</a> </p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启驼峰命名规则映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>未开启时：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee(id=1, lastName=null, gender=女, email=jack@gmail.com)</span><br></pre></td></tr></table></figure><p>开启后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee(id=1, lastName=jack, gender=女, email=jack@gmail.com)</span><br></pre></td></tr></table></figure><h4 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h4><p>typeAliases 是为Java 类型命名一个短的名字。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--type:实体类的全路径。alias:别名，通常首字母大写--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;typeAlias type="com.wusuiwei.mybatis.Employee" alias="Employee"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.wusuiwei.mybatis"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用<code>@Alias</code>注解为某个类型指定特定的别名。</p><p>Mybatis为常用的Java类型内置了别名，不区分大小写。如下：</p><p><img src="../../images/image-20200301175830855.png" alt="image-20200301175830855"></p><h4 id="environments"><a href="#environments" class="headerlink" title="environments"></a>environments</h4><p> MyBatis 可以配置成适应多种环境，例如，开发、测试和生产环境需要有不同的配置； </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="databaseIdProvider"><a href="#databaseIdProvider" class="headerlink" title="databaseIdProvider"></a>databaseIdProvider</h4><h4 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h4><p>mappers 将sql映射注册到全局配置中。可以使用类路径、 完全限定资源定位符（包括 file:/// 的 URL） 、 类名和包名 等。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/PostMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/PostMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名</span></span><br><span class="line"><span class="comment">有sql映射文件并与类在同一目录下。 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.AuthorMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.BlogMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.PostMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"org.mybatis.builder"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h3><p>SQL映射文件只有几个顶级元素：</p><ul><li><code>cache</code> – 对给定命名空间的缓存配置。</li><li><code>cache-ref</code> – 对其他命名空间缓存配置的引用。</li><li><code>resultMap</code> – 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。</li><li><code>parameterMap</code> – 已被废弃！老式风格的参数映射。更好的办法是使用内联参数，此元素可能在将来被移除。文档中不会介绍此元素。</li><li><code>sql</code> – 可被其他语句引用的可重用语句块。</li><li><code>insert</code> – 映射插入语句</li><li><code>update</code> – 映射更新语句</li><li><code>delete</code> – 映射删除语句</li><li><code>select</code> – 映射查询语句</li></ul><h4 id="insert、update、delete"><a href="#insert、update、delete" class="headerlink" title="insert、update、delete"></a>insert、update、delete</h4><p><img src="../../images/image-20200301185357978.png" alt="inset、update、delete元素的属性"></p><p> 下面就是 insert，update 和 delete 语句的示例： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertAuthor"</span>&gt;</span></span><br><span class="line">  insert into Author (id,username,password,email,bio)</span><br><span class="line">  values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;bio&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateAuthor"</span>&gt;</span></span><br><span class="line">  update Author set</span><br><span class="line">    username = #&#123;username&#125;,</span><br><span class="line">    password = #&#123;password&#125;,</span><br><span class="line">    email = #&#123;email&#125;,</span><br><span class="line">    bio = #&#123;bio&#125;</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteAuthor"</span>&gt;</span></span><br><span class="line">  delete from Author where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Mybatis允许增删改直接定义以下数据类型的返回值：Integer、Long、Boolean、void。</p><p>其他注意事项：</p><ul><li>自增主键： 以设置 useGeneratedKeys=”true”，然后再把 keyProperty 设置到目标属性 </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertAuthor"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">  insert into Author (username,password,email,bio)</span><br><span class="line">  values (#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;bio&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>序列作为主键：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertAuthor"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span> <span class="attr">statementType</span>=<span class="string">"PREPARED"</span>&gt;</span></span><br><span class="line">      select Author_SEQ.nextval from dual</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">  insert into Author (username,password,email,bio)</span><br><span class="line">  values (#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;bio&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="参数处理之传值"><a href="#参数处理之传值" class="headerlink" title="参数处理之传值"></a>参数处理之传值</h4><h4 id="参数处理之取值"><a href="#参数处理之取值" class="headerlink" title="参数处理之取值"></a>参数处理之取值</h4><h4 id="返回值映射"><a href="#返回值映射" class="headerlink" title="返回值映射"></a>返回值映射</h4><h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><p> mybatis提供了OGNL表达式动态生成SQL的功能(条件判断使用<a href="http://commons.apache.org/proper/commons-ognl/language-guide.html" target="_blank" rel="noopener">OGNL表达式</a>)，动态SQL有：</p><ul><li><strong>if</strong></li><li><strong>choose (when, otherwise)</strong></li><li><strong>trim (where, set)</strong></li><li><strong>foreach</strong></li><li><strong>script</strong></li><li><strong>bind</strong></li><li>内置元素(_parameter,_databaseId)</li><li><strong>sql(include)</strong></li></ul><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p>满足一定的条件，则拼接上响应的sql。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionIf"</span> <span class="attr">resultType</span>=<span class="string">"com.wusuiwei.mybatis.Employee"</span>&gt;</span></span><br><span class="line">    select * from tbl_employee where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span>id = #&#123;id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName.trim()!=&amp;quot;&amp;quot;"</span>&gt;</span>and last_name=#&#123;lastName&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h4><p>根据不同的条件，拼接上不同的SQL语句，相当于Java中的 switch … break 语句。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionChoose"</span> <span class="attr">resultType</span>=<span class="string">"com.wusuiwei.mybatis.Employee"</span>&gt;</span></span><br><span class="line">    select * from tbl_employee where</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"id!=0"</span>&gt;</span></span><br><span class="line">            id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"lastName!=null"</span>&gt;</span></span><br><span class="line">            last_name=#&#123;lastName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            1=1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where, set)"></a>trim (where, set)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">where 用法比较简单，主要用于动态拼接where子句，根据where子句自动加上"where"和自动去除子句前的"and"</span></span><br><span class="line"><span class="comment">trim 有prefix、suffix、prefixOverrides、suffixOverrides属性，分别提供自定义前缀、后缀及前后缀的去除</span></span><br><span class="line"><span class="comment">set 用法同where，主要用于动态拼接set子句，根据set子句自动加上"set"和自动去除子句后的","</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionWhere"</span> <span class="attr">resultType</span>=<span class="string">"com.wusuiwei.mybatis.Employee"</span>&gt;</span></span><br><span class="line">    select * from tbl_employee</span><br><span class="line">    <span class="comment">&lt;!-- where 1=1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName.trim()!=&amp;quot;&amp;quot;"</span>&gt;</span></span><br><span class="line">            and last_name=#&#123;lastName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionTrim"</span> <span class="attr">resultType</span>=<span class="string">"com.wusuiwei.mybatis.Employee"</span>&gt;</span></span><br><span class="line">    select * from tbl_employee</span><br><span class="line">    <span class="comment">&lt;!-- where 1=1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">""</span> <span class="attr">suffixOverrides</span>=<span class="string">"and"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=0"</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName.trim()!=&amp;quot;&amp;quot;"</span>&gt;</span></span><br><span class="line">            last_name=#&#123;lastName&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateEmp"</span>&gt;</span></span><br><span class="line">    update tbl_employee</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName.trim()!=&amp;quot;&amp;quot;"</span>&gt;</span></span><br><span class="line">            last_name=#&#123;lastName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and email.trim()!=&amp;quot;&amp;quot;"</span>&gt;</span></span><br><span class="line">            email=#&#123;email&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>遍历集合，取出集合元素。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">foreach 属性的作用如下：</span></span><br><span class="line"><span class="comment">collection 指定操作的集合</span></span><br><span class="line"><span class="comment">item命名元素名称</span></span><br><span class="line"><span class="comment">separator指定foreach子句之间的分隔符</span></span><br><span class="line"><span class="comment">index指定键或索引的名称</span></span><br><span class="line"><span class="comment">close指定foreach子句结束的字符</span></span><br><span class="line"><span class="comment">open指定foreach子句开始的字符</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertEmps"</span>&gt;</span></span><br><span class="line">    insert into tbl_employee(<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"insertColumn"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>)</span><br><span class="line">    values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span> <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        (#&#123;emp.id&#125;,#&#123;emp.lastName&#125;,#&#123;emp.gender&#125;,#&#123;emp.email&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p> <code>bind</code> 元素可以从 OGNL 表达式中创建一个变量并将其绑定到上下文。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlogsLike"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"'%' + _parameter.getTitle() + '%'"</span> /&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE title LIKE #&#123;pattern&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="sql-include"><a href="#sql-include" class="headerlink" title="sql(include)"></a>sql(include)</h4><p><code>sql</code>、<code>include</code>主要用于提供sql，及应用提取的sql。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"insertColumn"</span>&gt;</span></span><br><span class="line">    id,last_name,gender,email</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertEmps"</span>&gt;</span></span><br><span class="line">    insert into tbl_employee(<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"insertColumn"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>)</span><br><span class="line">    values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span>  <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">index</span>=<span class="string">""</span> <span class="attr">close</span>=<span class="string">""</span> <span class="attr">open</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        (#&#123;emp.id&#125;,#&#123;emp.lastName&#125;,#&#123;emp.gender&#125;,#&#123;emp.email&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="内置参数"><a href="#内置参数" class="headerlink" title="内置参数"></a>内置参数</h4><p>Mybatis提供了<code>_parameter</code>、<code>_databaseId</code> 2个内置参数。</p><p><code>_databaseId</code>  表示所使用数据库的别名</p><p><code>_parameter</code> 表示当前方法的参数，如果为一个参数，则为该参数，如果为多个参数，则为参数处理后的map.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insert&quot;&gt;</span><br><span class="line">  &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;int&quot; order=&quot;BEFORE&quot;&gt;</span><br><span class="line">    &lt;if test=&quot;_databaseId == &apos;oracle&apos;&quot;&gt;</span><br><span class="line">      select seq_users.nextval from dual</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;_databaseId == &apos;db2&apos;&quot;&gt;</span><br><span class="line">      select nextval for seq_users from sysibm.sysdummy1&quot;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">  &lt;/selectKey&gt;</span><br><span class="line">  insert into users values (#&#123;id&#125;, #&#123;name&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><h4 id="script"><a href="#script" class="headerlink" title="script"></a>script</h4><p> 要在带注解的映射器接口类中使用动态 SQL，可以使用 <em>script</em> 元素。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update</span>(&#123;<span class="string">"&lt;script&gt;"</span>,</span><br><span class="line">         <span class="string">"update Author"</span>,</span><br><span class="line">         <span class="string">"  &lt;set&gt;"</span>,</span><br><span class="line">         <span class="string">"    &lt;if test='username != null'&gt;username=#&#123;username&#125;,&lt;/if&gt;"</span>,</span><br><span class="line">         <span class="string">"    &lt;if test='password != null'&gt;password=#&#123;password&#125;,&lt;/if&gt;"</span>,</span><br><span class="line">         <span class="string">"    &lt;if test='email != null'&gt;email=#&#123;email&#125;,&lt;/if&gt;"</span>,</span><br><span class="line">         <span class="string">"    &lt;if test='bio != null'&gt;bio=#&#123;bio&#125;&lt;/if&gt;"</span>,</span><br><span class="line">         <span class="string">"  &lt;/set&gt;"</span>,</span><br><span class="line">         <span class="string">"where id=#&#123;id&#125;"</span>,</span><br><span class="line">         <span class="string">"&lt;/script&gt;"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateAuthorValues</span><span class="params">(Author author)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>mybatis提供了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong>。</p><p>一级缓存作用域为sqlsession，mybatis默认开启一级缓存。</p><p>二级缓存作用域为namespace。</p><h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h4><p>一级缓存效果测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">this</span>.getSqlSessionFactory();</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        EmployeeMapper mapper = sqlSession.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Employee employee = mapper.selectOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line"><span class="comment">//命中缓存，不会查询数据库</span></span><br><span class="line">Employee employee1 = mapper.selectOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee1);</span><br><span class="line">&#125;finnaly&#123;</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一级缓存失效情况：</p><ul><li>SqlSession不同</li><li>SqlSession相同，查询条件不同</li><li>SqlSession相同，2次查询之间，做了增删改操作</li><li>SqlSession相同，清除缓存</li></ul><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">this</span>.getSqlSessionFactory();</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        EmployeeMapper mapper = sqlSession.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Employee employee = mapper.selectOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一级缓存失效情况</span></span><br><span class="line">        <span class="comment">//1.SqlSession不同</span></span><br><span class="line">        SqlSession sqlSession1 = sqlSessionFactory.openSession();</span><br><span class="line">        EmployeeMapper mapper1 = sqlSession1.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//Employee selectOne(int id);</span></span><br><span class="line">        Employee employee1 = mapper1.selectOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee1);</span><br><span class="line">        sqlSession1.close();</span><br><span class="line">        <span class="comment">//2.SqlSession相同，查询条件不同</span></span><br><span class="line">        Employee employee2 = mapper.selectOne(<span class="number">2</span>);</span><br><span class="line">        System.out.println(employee2);</span><br><span class="line">        <span class="comment">//3.SqlSession相同，2次查询之间，做了增删改操作</span></span><br><span class="line">        <span class="comment">//void update(Employee employee);</span></span><br><span class="line">        mapper.update(<span class="keyword">new</span> Employee(<span class="number">1</span>,<span class="string">"jackson"</span>,<span class="keyword">null</span>,<span class="keyword">null</span>));</span><br><span class="line">        Employee employee3 = mapper.selectOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee3);</span><br><span class="line">        <span class="comment">//4.SqlSession相同，清除缓存</span></span><br><span class="line">        sqlSession.clearCache();</span><br><span class="line">        Employee employee4 = mapper.selectOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee4);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h4><p>工作原理：sqlsession关闭后，将一级缓存保存到二级缓存中，当有新的sqlsession查询相同数据时，即可命中二级缓存。</p><p>使用方法：</p><ol><li>缓存POJO类必须<strong>实现序列化接口</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3330851033429007657L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>mybatis-config.xml</code>文件中申明开启二级缓存(默认是开启的，非必须，但利于养成开发习惯)：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启驼峰匹配--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启二级缓存,全局总开关，默认开启，这里关闭，mapper中开启了也没用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在namespace中开启二级缓存(<code>&lt;cache&gt;&lt;/cache&gt;</code>或<cache-ref namespace="com.someone.application.data.SomeMapper"/>)。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wusuiwei.mybatis.EmployeeMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;cache&gt;&lt;/cache&gt;</code>标签有以下参数：</p><p>type                             指定cache接口实现类            </p><p>eviction                       收回策略，默认LUR</p><blockquote><p>LRU （最近最少使用的）:  移除最长时间不被使用的对象，这是默认值 。<br>FIFO （先进先出〉 ： 按对象进入缓存的顺序来移除它们 。<br>SOFT （软引用） ： 移除基于垃圾回收器状态和软引用规则的对象 。<br>WEAK （弱引用） ： 更积极地移除基于垃圾收集器状态和弱引用规则的对象</p></blockquote><p>flushInterval               刷新间隔，默认不设置，仅在调用语句时刷新，以毫秒计。</p><p>readOnly                     默认false，只读的缓存会给所有调用的实例其引用地址（相同的实例）。</p><p>size                               引用数目，默认1024， ，要记住缓存的对象数目和运行环境的可用内存资源数目。</p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testSelectOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">this</span>.getSqlSessionFactory();</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        EmployeeMapper mapper = sqlSession.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Employee employee = mapper.selectOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 二级缓存：namespace级别的缓存，sqlsession关闭后将缓存移交到二级缓存中。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession1 = sqlSessionFactory.openSession();</span><br><span class="line">        EmployeeMapper mapper1 = sqlSession1.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Employee employee1 = mapper1.selectOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee1);</span><br><span class="line">        <span class="comment">//如果sqlsession未在其他sqlsession查询之前关闭，则不会将一级缓存保存到二级缓存，</span></span><br><span class="line">        <span class="comment">//其他sqlsession如果要查询相同的数据，仍需要查询数据库</span></span><br><span class="line">        <span class="comment">//sqlSession.close();</span></span><br><span class="line">        sqlSession1.close();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="集成第三方缓存框架"><a href="#集成第三方缓存框架" class="headerlink" title="集成第三方缓存框架"></a>集成第三方缓存框架</h4><p>当前分布式系统成为主流，为了实现分布式的缓存，需要我们集成第三方缓存框架，如redis、ehcache、memcached等。</p><p>mybatis提供了<code>org.apache.ibatis.cache.Cache</code>接口，便于我们集成第三方框架。</p><p>此处，以ehcache集成为例，官方提供了实现（ <a href="https://github.com/mybatis/ehcache-cache" target="_blank" rel="noopener">https://github.com/mybatis/ehcache-cache</a> ），具体集成步骤如下：</p><ul><li>添加maven依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在全局配置<code>mybatis-configuration.xml</code>中开启缓存</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启二级缓存  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在<code>xxxMapper.xml</code>文件中整合ehcache 缓存 </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wusuiwei.mybatis.EmployeeMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启ehcache缓存--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.ehcache.EhcacheCache"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>缓存框架的配置文件(在类路径下新增  <strong>ehcache.xml</strong>  ，并添加以下内容)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"../config/ehcache.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"F:\develop\ehcache"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsOnDisk</span>=<span class="string">"10000000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">persistence</span> <span class="attr">strategy</span>=<span class="string">"localTempSwap"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Mybatis概要&quot;&gt;&lt;a href=&quot;#Mybatis概要&quot; class=&quot;headerlink&quot; title=&quot;Mybatis概要&quot;&gt;&lt;/a&gt;Mybatis概要&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Mybatis&lt;/strong&gt; 是 Apache的一个Java开源
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java笔记/Untitled 1</title>
    <link href="http://wusuiwei.github.io/2020/02/19/Java%E7%AC%94%E8%AE%B0/Untitled%201/"/>
    <id>http://wusuiwei.github.io/2020/02/19/Java笔记/Untitled 1/</id>
    <published>2020-02-19T15:54:05.347Z</published>
    <updated>2020-02-19T15:54:05.347Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java笔记/Spring Cloud 笔记之 Feign</title>
    <link href="http://wusuiwei.github.io/2020/01/17/Java%E7%AC%94%E8%AE%B0/Spring%20Cloud%20%E7%AC%94%E8%AE%B0%E4%B9%8B%20Feign/"/>
    <id>http://wusuiwei.github.io/2020/01/17/Java笔记/Spring Cloud 笔记之 Feign/</id>
    <published>2020-01-17T08:35:25.505Z</published>
    <updated>2020-01-17T08:37:26.007Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java笔记/Spring Cloud 笔记之 Ribbon</title>
    <link href="http://wusuiwei.github.io/2020/01/17/Java%E7%AC%94%E8%AE%B0/Spring%20Cloud%20%E7%AC%94%E8%AE%B0%E4%B9%8B%20Ribbon/"/>
    <id>http://wusuiwei.github.io/2020/01/17/Java笔记/Spring Cloud 笔记之 Ribbon/</id>
    <published>2020-01-17T08:35:25.505Z</published>
    <updated>2020-01-17T08:38:00.621Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java笔记/【SpringCloud】Eureka</title>
    <link href="http://wusuiwei.github.io/2020/01/17/Java%E7%AC%94%E8%AE%B0/%E3%80%90SpringCloud%E3%80%91Eureka/"/>
    <id>http://wusuiwei.github.io/2020/01/17/Java笔记/【SpringCloud】Eureka/</id>
    <published>2020-01-17T08:35:25.505Z</published>
    <updated>2020-01-17T08:35:25.505Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java笔记/【Docker】常用操作总结</title>
    <link href="http://wusuiwei.github.io/2020/01/07/Java%E7%AC%94%E8%AE%B0/%E3%80%90Docker%E3%80%91%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://wusuiwei.github.io/2020/01/07/Java笔记/【Docker】常用操作总结/</id>
    <published>2020-01-07T08:22:55.247Z</published>
    <updated>2020-01-10T07:10:19.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-概要"><a href="#Docker-概要" class="headerlink" title="Docker 概要"></a>Docker 概要</h2><p>官网： <a href="https://www.docker.com/" target="_blank" rel="noopener">https://www.docker.com/</a> </p><p>官方中文文档： <a href="https://docker-doc.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">https://docker-doc.readthedocs.io/zh_CN/latest/index.html</a> </p><h3 id="理念"><a href="#理念" class="headerlink" title="理念"></a>理念</h3><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>这里以CentOS 7安装过程为例，其他系统安装过程可参考官方文档。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 移除旧版本</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装一些docker安装必备的工具</span></span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加软件源信息（阿里云）</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装docker</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动 docker 后台服务</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">卸载docker-ce</span></span><br><span class="line"><span class="meta">#</span><span class="bash">卸载docker软件包（不会删除镜像、容器、卷及其他配置文件）</span></span><br><span class="line">sudo yum remove docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash">删除镜像、容器、卷及其他配置文件</span></span><br><span class="line">sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h2 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 镜像操作相关</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检索镜像（从 https://hub.docker.com 检索）</span></span><br><span class="line">docker search mysql #OFFICIAL表示官方发行版本</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像:dockerpull 镜像名:tag</span></span><br><span class="line">docker pull mysql #拉取latest的mysql镜像</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看本地镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除镜像:docker rmi image-id</span></span><br><span class="line">docker rmi 29e0a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器操作相关</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行容器：docker run --name container-name:tag -d image-name -p 8080:8090</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d:表示后台运行容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p:端口映射，docker容器默认与外界是隔绝的，需要进行端口映射才能访问</span></span><br><span class="line">docker run --name myTomcat -d tomcat:8.5.32 -p 8090:8080</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器</span></span><br><span class="line">docker ps #查看所有运行中的容器</span><br><span class="line">docker ps -a #查看所有容器</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止运行容器:docker stop container-id</span></span><br><span class="line">docker stop 1cbabce49b84</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动容器</span></span><br><span class="line">docker start 1cbabce49b84</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除容器</span></span><br><span class="line">docker rm 1cbabce49b84</span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器日志：docker logs container-name/container-id</span></span><br><span class="line">docker logs myTtomcat1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 仓库操作相关</span></span><br></pre></td></tr></table></figure><h2 id="Docker-数据管理"><a href="#Docker-数据管理" class="headerlink" title="Docker 数据管理"></a>Docker 数据管理</h2><p> <img src="../../images/types-of-mounts.png" alt="img"> </p><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><h3 id="DockerFile的指令详解"><a href="#DockerFile的指令详解" class="headerlink" title="DockerFile的指令详解"></a>DockerFile的指令详解</h3><p><code>FROM</code>：基础镜像</p><p><code>MAINTAINER</code>：</p><p><code>RUN</code>：</p><p><code>EXPOSE</code>：</p><p><code>WORKDIR</code>:</p><p><code>ENV</code>：</p><p><code>ADD</code>：</p><p><code>COPY</code>：</p><p><code>VOLUME</code>：</p><p><code>CMD</code>：</p><p><code>ENTRYPOINT</code>：</p><p><code>ONBUILD</code>：</p><h2 id="常用镜像"><a href="#常用镜像" class="headerlink" title="常用镜像"></a>常用镜像</h2><h3 id="Docker安装MySQL"><a href="#Docker安装MySQL" class="headerlink" title="Docker安装MySQL"></a>Docker安装MySQL</h3><h3 id="Docker安装Redis"><a href="#Docker安装Redis" class="headerlink" title="Docker安装Redis"></a>Docker安装Redis</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker-概要&quot;&gt;&lt;a href=&quot;#Docker-概要&quot; class=&quot;headerlink&quot; title=&quot;Docker 概要&quot;&gt;&lt;/a&gt;Docker 概要&lt;/h2&gt;&lt;p&gt;官网： &lt;a href=&quot;https://www.docker.com/&quot; targ
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>项目笔记/hydrogen-master/【Hydrogen】团队维护</title>
    <link href="http://wusuiwei.github.io/2020/01/06/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/hydrogen-master/%E3%80%90Hydrogen%E3%80%91%E5%9B%A2%E9%98%9F%E7%BB%B4%E6%8A%A4/"/>
    <id>http://wusuiwei.github.io/2020/01/06/项目笔记/hydrogen-master/【Hydrogen】团队维护/</id>
    <published>2020-01-06T05:30:55.744Z</published>
    <updated>2020-01-06T08:58:16.179Z</updated>
    
    <content type="html"><![CDATA[<p>整个界面采用简单的人员管理界面，提供<strong>人员名称</strong>、<strong>邮箱</strong>模糊搜索功能，分页功能，邀请加入功能，移除功能；</p><p>表设计：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整个界面采用简单的人员管理界面，提供&lt;strong&gt;人员名称&lt;/strong&gt;、&lt;strong&gt;邮箱&lt;/strong&gt;模糊搜索功能，分页功能，邀请加入功能，移除功能；&lt;/p&gt;
&lt;p&gt;表设计：&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【Linux】虚拟化技术</title>
    <link href="http://wusuiwei.github.io/2019/12/23/Java%E7%AC%94%E8%AE%B0/%E3%80%90Linux%E3%80%91%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    <id>http://wusuiwei.github.io/2019/12/23/Java笔记/【Linux】虚拟化技术/</id>
    <published>2019-12-23T02:06:04.000Z</published>
    <updated>2020-01-08T01:39:24.060Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里；不积小流，无以成江海。</p></blockquote><a id="more"></a><h2 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h2><p><strong>定义</strong>： 通过<strong>虚拟化</strong>技术将一台计算机<strong>虚拟</strong>为多台逻辑计算机。 在一台计算机上同时运行多个逻辑计算机，每个逻辑计算机可运行不同的操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。 </p><p><strong>优势</strong>：</p><p><strong>劣势</strong>：</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://wusuiwei.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://wusuiwei.github.io/tags/Linux/"/>
    
      <category term="虚拟化技术" scheme="http://wusuiwei.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Docker" scheme="http://wusuiwei.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【NoSql】NoSql入门和概述</title>
    <link href="http://wusuiwei.github.io/2019/12/23/Java%E7%AC%94%E8%AE%B0/%E3%80%90NoSql%E3%80%91NoSql%E5%85%A5%E9%97%A8%E5%92%8C%E6%A6%82%E8%BF%B0/"/>
    <id>http://wusuiwei.github.io/2019/12/23/Java笔记/【NoSql】NoSql入门和概述/</id>
    <published>2019-12-23T02:06:04.000Z</published>
    <updated>2019-12-23T16:10:47.501Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里；不积小流，无以成江海。</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="NoSQL" scheme="http://wusuiwei.github.io/categories/NoSQL/"/>
    
    
      <category term="NoSql" scheme="http://wusuiwei.github.io/tags/NoSql/"/>
    
  </entry>
  
  <entry>
    <title>前端知识/Vue知识框架</title>
    <link href="http://wusuiwei.github.io/2019/12/07/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/Vue%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6/"/>
    <id>http://wusuiwei.github.io/2019/12/07/前端知识/Vue知识框架/</id>
    <published>2019-12-06T17:14:23.800Z</published>
    <updated>2019-12-06T17:14:23.800Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>项目笔记/hydrogen-master/【Hydrogen】项目环境搭建</title>
    <link href="http://wusuiwei.github.io/2019/11/29/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/hydrogen-master/%E3%80%90Hydrogen%E3%80%91%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://wusuiwei.github.io/2019/11/29/项目笔记/hydrogen-master/【Hydrogen】项目环境搭建/</id>
    <published>2019-11-29T11:19:01.308Z</published>
    <updated>2019-12-05T11:37:21.595Z</updated>
    
    <content type="html"><![CDATA[<p>登录页：</p><ul><li>登录（自动注册）</li><li>忘记密码</li></ul><p>账号信息</p><p>项目组管理：</p><ul><li>项目列表</li><li>邀请加入项目组</li><li>移交管理员</li><li>删除成员</li><li>退出项目组/解散项目组（仅自己一个人时可解散）</li></ul><p>测试数据库管理：</p><ul><li>mysql</li></ul><p>用例管理：</p><ul><li>新增用例</li><li>修改用例</li><li>删除用例</li><li>运行用例</li><li>复制用例</li></ul><p>测试用例集管理：</p><ul><li>新增用例集</li></ul><p>参数化环境管理</p><ul><li>查询</li><li>新增</li><li>修改</li><li>删除</li><li>参数值管理<ul><li>查询</li><li>新增</li><li>修改</li><li>删除</li></ul></li></ul><p>测试报告</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;登录页：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登录（自动注册）&lt;/li&gt;
&lt;li&gt;忘记密码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;账号信息&lt;/p&gt;
&lt;p&gt;项目组管理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目列表&lt;/li&gt;
&lt;li&gt;邀请加入项目组&lt;/li&gt;
&lt;li&gt;移交管理员&lt;/li&gt;
&lt;li&gt;删除成员
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【Spring Boot】异常处理机制</title>
    <link href="http://wusuiwei.github.io/2019/11/29/Java%E7%AC%94%E8%AE%B0/%E3%80%90Spring%20Boot%E3%80%91%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://wusuiwei.github.io/2019/11/29/Java笔记/【Spring Boot】异常处理机制/</id>
    <published>2019-11-29T03:08:09.000Z</published>
    <updated>2019-11-30T16:08:46.161Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里；不积小流，无以成江海。</p></blockquote><p>今天，刚好用到了Spring Boot的统一异常处理，复习并总结一下。主要内容如下：</p><ul><li>Spring Boot 提供的默认异常处理机制</li><li>如何自定义异常</li><li>项目中如何使用统一异常处理</li></ul><a id="more"></a><h3 id="默认异常处理"><a href="#默认异常处理" class="headerlink" title="默认异常处理"></a>默认异常处理</h3><p>默认情况下，Spring Boot 分情况提供了两种处理方式：</p><ul><li>浏览器访问（ Accept: text/html ）：返回一个 error 页面</li></ul><p><img src="/images/image-20191130232129074.png" alt="image-20191130232129074"></p><ul><li>其他客户端访问（如Postman，Accept: */*）：返回一个json数据</li></ul><p><img src="/images/image-20191130232326570.png" alt="image-20191130232326570"></p><p>原理：</p><p>异常处理的自动配置类：<code>org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration</code> </p><p>向 Spring 容器中添加了以下组件：</p><ul><li>DefaultErrorAttributes</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>BasicErrorController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//产生html类型的数据</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(produces = MediaType.TEXT_HTML_VALUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        HttpStatus status = getStatus(request);</span><br><span class="line">        Map&lt;String, Object&gt; model = Collections</span><br><span class="line">            .unmodifiableMap(getErrorAttributes(request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">        response.setStatus(status.value());</span><br><span class="line">        <span class="comment">//去哪个页面作为错误页面，包含页面地址和页面内容</span></span><br><span class="line">        ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">        <span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//产生json数据</span></span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">        HttpStatus status = getStatus(request);</span><br><span class="line">        <span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(status);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; body = getErrorAttributes(request, isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(body, status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ErrorPageCustomizer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;error.path:/error&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String path = <span class="string">"/error"</span>;<span class="comment">//系统错误之后来到error请求来进行处理；</span></span><br></pre></td></tr></table></figure><ul><li>DefaultErrorViewResolver</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    ModelAndView modelAndView = resolve(String.valueOf(status.value()), model);</span><br><span class="line">    <span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">        modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认Spring Boot可以去找到一个页面：/error/404.html</span></span><br><span class="line">    String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//模板引擎可以解析这个页面地址就用模板引擎解析</span></span><br><span class="line">    TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName,</span><br><span class="line">                                                                                           <span class="keyword">this</span>.applicationContext);</span><br><span class="line">    <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果模板引擎可用的情况下返回到errorViewName指定的视图地址</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的界面 error/404.html</span></span><br><span class="line">    <span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常处理步骤：</p><p>一旦系统出现4xx或5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/erroe请求，就会被BasicErrorController处理：</p><p>1) 响应页面，去哪个页面由DefaultErrorViewResolver解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">        ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">        <span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> modelAndView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）如何定制错误响应：</p><ul><li><p>如何定制错误的页面：</p><ul><li>在有模板引擎情况下，将错误页面命名为<code>404.html</code>，放在模板引擎文件夹下的error文件夹下<ul><li>也可以使用4xx或5xx作为错误页面的文件名来匹配错误，优先精确匹配404.html</li><li>页面可以获取到的信息：<ul><li>timestamp:时间戳</li><li>status：状态码</li><li>error：错误提示</li><li>exception：异常</li><li>message：异常消息</li><li>errors：JSR303数据校验的错误</li></ul></li></ul></li><li>没有模板引擎，静态资源文件夹下error文件中404.html页面</li><li>以上位置都未配置错误页面，则默认来到springboot默认错误页面</li></ul></li></ul><ul><li><p>如何定制错误的JSON数据：</p><ul><li></li></ul></li></ul><h3 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h3><p><strong>定制错误页面</strong></p><p><strong>定制错误JSON数据</strong></p><h3 id="统一异常处理实践"><a href="#统一异常处理实践" class="headerlink" title="统一异常处理实践"></a>统一异常处理实践</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天，刚好用到了Spring Boot的统一异常处理，复习并总结一下。主要内容如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Boot 提供的默认异常处理机制&lt;/li&gt;
&lt;li&gt;如何自定义异常&lt;/li&gt;
&lt;li&gt;项目中如何使用统一异常处理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://wusuiwei.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://wusuiwei.github.io/tags/SpringBoot/"/>
    
      <category term="异常处理" scheme="http://wusuiwei.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【SpringBoot】拦截器</title>
    <link href="http://wusuiwei.github.io/2019/11/29/Java%E7%AC%94%E8%AE%B0/%E3%80%90SpringBoot%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://wusuiwei.github.io/2019/11/29/Java笔记/【SpringBoot】自定义拦截器/</id>
    <published>2019-11-29T03:08:09.000Z</published>
    <updated>2019-11-30T15:15:19.331Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里；不积小流，无以成江海。</p></blockquote><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><blockquote><p>实现java web token的拦截</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;应用实例&quot;&gt;&lt;a href=&quot;#应用实例&quot; class=&quot;headerlink&quot; title=&quot;应用实例&quot;&gt;&lt;/a&gt;应用实例&lt;/h3&gt;&lt;blockqu
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://wusuiwei.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://wusuiwei.github.io/tags/SpringBoot/"/>
    
      <category term="拦截器" scheme="http://wusuiwei.github.io/tags/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>【接口自动化测试框架（Java版）】基本环境搭建</title>
    <link href="http://wusuiwei.github.io/2019/11/27/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E3%80%90%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%EF%BC%88Java%E7%89%88%EF%BC%89%E3%80%91%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://wusuiwei.github.io/2019/11/27/自动化测试/【接口自动化测试框架（Java版）】基本环境搭建/</id>
    <published>2019-11-27T07:23:49.000Z</published>
    <updated>2019-11-27T16:09:13.520Z</updated>
    
    <content type="html"><![CDATA[<p>从本文起，将详细介绍 Java 自动化框架的搭建及相关知识学习，我也是边写边学，不一定完全正确，如果有异常情况，请在评论区留言。</p><p>本文主要介绍JDK安装配置、IDEA安装配置、SpringBoot项目创建。</p><a id="more"></a><p>应用技术：SpringBoot、HttpClient、Spring Data JPA、TestNG、ReportNG、Jenkins、Vue等技术</p><h4 id="JDK-环境搭建"><a href="#JDK-环境搭建" class="headerlink" title="JDK 环境搭建"></a>JDK 环境搭建</h4><p>想要运行java项目，必须有jdk环境，我使用的是JDK8.</p><p>下载地址： <a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a> </p><p>选择自己系统的相应版本并下载安装即可。</p><p>jdk需要配置环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">变量名：JAVA_HOME</span><br><span class="line">变量值：C:\Program Files (x86)\Java\jdk1.8.0_91        // 要根据自己的实际路径配置</span><br><span class="line">变量名：CLASSPATH</span><br><span class="line">变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;         //记得前面有个&quot;.&quot;</span><br><span class="line">变量名：Path</span><br><span class="line">变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br></pre></td></tr></table></figure><p>检查是否安装成功：</p><p>运行CMD，执行命令：<code>java -version</code></p><p><img src="/images/image-20191127195442440.png" alt="image-20191127195442440"></p><h4 id="IDEA-环境搭建"><a href="#IDEA-环境搭建" class="headerlink" title="IDEA 环境搭建"></a>IDEA 环境搭建</h4><p>搭建过程非常简单，仅需要下载安装并输入注册码即可。</p><p>下载地址： <a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener">https://www.jetbrains.com/idea/download/</a> ( <strong>Ultimate</strong> 版本)</p><p>注册码（亲测可用，建议官方购买)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CATF44LT7C-eyJsaWNlbnNlSWQiOiJDQVRGNDRMVDdDIiwibGljZW5zZWVOYW1lIjoiVmxhZGlzbGF2IEtvdmFsZW5rbyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiJGb3IgZWR1Y2F0aW9uYWwgdXNlIG9ubHkiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJQUyIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiUkQiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJQQyIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IkRDIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In1dLCJoYXNoIjoiMTE1MzA4ODUvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-BZLL+H88k449OQC56NsqU0fwb6wMAX1Di+CK5HS46DuOD1E68HPiTqREdn8DzrLVAoMkJReaH30RaIDLwUI8GEFifDcCYE5RbpE5ApNJ8mcUJr8oA1nrjY9IzZCgrSBFr4GAOLqSfXH+1UJ3K8UPqGh8nThomnKW9Jvv9pA7HIH/KrNm2RLV/aNMHWO8Q44A8ToXm7g5FS2lW903URPQ0KFgxT11w/KL81UkHm6yUXC7/LTAygIBArI8j+XUk3rlz4rpi2wrJclYXukrKQqH/V6CTbnVV3d6XAdtCqjryQ2Ga7bP/XTLjwAGwPEB3Q1W7LHNQ7CsyvZG/oTSOgD2YQ==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</span><br></pre></td></tr></table></figure><h4 id="SpringBoot-项目创建"><a href="#SpringBoot-项目创建" class="headerlink" title="SpringBoot 项目创建"></a>SpringBoot 项目创建</h4><p>从IDEA搭建项目过程非常简单，下面将简要介绍一下</p><p><img src="/images/image-20191127194915867.png" alt="image-20191127194915867"></p><p>首先，选择”Spring Initalizr”,下一步：</p><p><img src="/images/image-20191127195614517.png" alt="image-20191127195614517"></p><p>输入Group、Artifact，下一步:</p><p><img src="/images/image-20191127195953736.png" alt="image-20191127195953736"></p><p>然后选择依赖，这里我们暂时先不选择任何依赖，下一步：</p><p><img src="/images/image-20191127200110798.png" alt="image-20191127200110798"></p><p>输入项目名及项目本次存储地址，”Finish”即可创建一个SpringBoot项目。</p><p><img src="/images/image-20191127200144375.png" alt="image-20191127200144375"></p><p>好了，至此，SpringBoot项目基本搭建完成，开心~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从本文起，将详细介绍 Java 自动化框架的搭建及相关知识学习，我也是边写边学，不一定完全正确，如果有异常情况，请在评论区留言。&lt;/p&gt;
&lt;p&gt;本文主要介绍JDK安装配置、IDEA安装配置、SpringBoot项目创建。&lt;/p&gt;
    
    </summary>
    
    
      <category term="接口自动化" scheme="http://wusuiwei.github.io/categories/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
      <category term="自动化测试" scheme="http://wusuiwei.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="接口自动化" scheme="http://wusuiwei.github.io/tags/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>【接口自动化测试框架（Java版）】集成HttpClient</title>
    <link href="http://wusuiwei.github.io/2019/11/27/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E3%80%90%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%EF%BC%88Java%E7%89%88%EF%BC%89%E3%80%91%E9%9B%86%E6%88%90HttpClient/"/>
    <id>http://wusuiwei.github.io/2019/11/27/自动化测试/【接口自动化测试框架（Java版）】集成HttpClient/</id>
    <published>2019-11-27T07:23:49.000Z</published>
    <updated>2019-11-27T13:07:58.271Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍HttpClient的用法及与SpringBoot的集成。</p><a id="more"></a><h4 id="HttpClient-介绍"><a href="#HttpClient-介绍" class="headerlink" title="HttpClient 介绍"></a>HttpClient 介绍</h4><p> <a href="http://hc.apache.org/index.html" target="_blank" rel="noopener">HttpClient</a>是Apache Jakarta Common下的子项目，用来提供高效的、最新的、功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。 </p><p>HttpClient相比传统JDK自带的URLConnection，增加了易用性和灵活性，它不仅使客户端发送Http请求变得容易，而且也方便开发人员测试接口（基于Http协议的），提高了开发的效率，也方便提高代码的健壮性。因此熟练掌握HttpClient是很重要的必修内容，掌握HttpClient后，相信对于Http协议的了解会更加深入。</p><p><strong>org.apache.commons.httpclient.HttpClient与org.apache.http.client.HttpClient的区别</strong></p><p>Commons的HttpClient项目现在是生命的尽头，不再被开发,  已被Apache HttpComponents项目HttpClient和HttpCore  模组取代，提供更好的性能和更大的灵活性。  </p><p><strong>HttpClient 特性</strong></p><ul><li>实现了所有 HTTP 的方法（GET,POST,PUT,DELETE 等）</li><li>支持自动转向</li><li>支持 HTTPS 协议</li><li>支持代理服务器等</li></ul><p>引用HttpClient非常简单，仅需要在maven中添加相关依赖即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 集成 httpclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="原生HttpClient使用"><a href="#原生HttpClient使用" class="headerlink" title="原生HttpClient使用"></a>原生HttpClient使用</h4><h5 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//打开浏览器</span></span><br><span class="line">    CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">    <span class="comment">//申明Get请求</span></span><br><span class="line">    HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    CloseableHttpResponse response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.判断状态码</span></span><br><span class="line">    <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">//从响应中取出实体</span></span><br><span class="line">        HttpEntity entity = response.getEntity();</span><br><span class="line">        <span class="comment">//使用工具类EntityUtils将实体并转换成字符串</span></span><br><span class="line">        String s = EntityUtils.toString(entity);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    response.close();</span><br><span class="line">    httpClient.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPost</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//打开浏览器</span></span><br><span class="line">    CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">    <span class="comment">//声明Post请求</span></span><br><span class="line">    HttpPost httpPost = <span class="keyword">new</span> HttpPost(<span class="string">"https://www.oschina.net/"</span>);</span><br><span class="line">    <span class="comment">//3.开源中国为了安全，防止恶意攻击，在post请求中都限制了浏览器才能访问</span></span><br><span class="line">    httpPost.addHeader(<span class="string">"User-Agent"</span>,<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span>);</span><br><span class="line">    ArrayList&lt;NameValuePair&gt; params = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"scope"</span>, <span class="string">"project"</span>));</span><br><span class="line">    params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"q"</span>, <span class="string">"java"</span>));</span><br><span class="line">    UrlEncodedFormEntity formEntity = <span class="keyword">new</span> UrlEncodedFormEntity(params, Charset.forName(<span class="string">"utf-8"</span>));</span><br><span class="line">    httpPost.setEntity(formEntity);</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    CloseableHttpResponse response = httpClient.execute(httpPost);</span><br><span class="line">    <span class="comment">//判断状态码</span></span><br><span class="line">    <span class="keyword">if</span>(response.getStatusLine().getStatusCode()==<span class="number">200</span>)&#123;</span><br><span class="line">        HttpEntity entity = response.getEntity();</span><br><span class="line">        String string = EntityUtils.toString(entity, <span class="string">"utf-8"</span>);</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.关闭资源</span></span><br><span class="line">    response.close();</span><br><span class="line">    httpClient.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SpringBoot集成HttpClient"><a href="#SpringBoot集成HttpClient" class="headerlink" title="SpringBoot集成HttpClient"></a>SpringBoot集成HttpClient</h4><p>引入Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 集成 httpclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍HttpClient的用法及与SpringBoot的集成。&lt;/p&gt;
    
    </summary>
    
    
      <category term="接口自动化" scheme="http://wusuiwei.github.io/categories/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
      <category term="自动化测试" scheme="http://wusuiwei.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="接口自动化" scheme="http://wusuiwei.github.io/tags/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>自动化测试/自动化测试模式介绍</title>
    <link href="http://wusuiwei.github.io/2019/11/21/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D/"/>
    <id>http://wusuiwei.github.io/2019/11/21/自动化测试/自动化测试模式介绍/</id>
    <published>2019-11-21T13:39:20.440Z</published>
    <updated>2019-11-21T13:39:20.440Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>自动化测试/Web自动化测试之PageObject思想</title>
    <link href="http://wusuiwei.github.io/2019/11/21/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%B9%8BPageObject%E6%80%9D%E6%83%B3/"/>
    <id>http://wusuiwei.github.io/2019/11/21/自动化测试/Web自动化测试之PageObject思想/</id>
    <published>2019-11-21T13:36:27.439Z</published>
    <updated>2019-11-21T13:36:27.439Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
</feed>
